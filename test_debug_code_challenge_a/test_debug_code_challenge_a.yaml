interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3678'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6ySS6/aMBCF9/0Vo1kbxPPeS5a3i4qqrbqqKjUVMs5AXPxIPZMCQvz3KgmBW9h2
        6TPy+c7Y54S2wAxNqcX4yg2eP0/KL7OP/uvUvdLid2C/X1ffvh8+TOKfgArj+hcZudwYmugrR2Jj
        MzKJtFCB2fjpZT57eV7M5gp9LMhhhttKBtPhfCB1WsfBaDoao8Ka9ZYwO2GVoq9kJXFHgTF7mU4U
        3ryv+vhprFCiaHeVFovpWaEpozXEmP04oSfubVN0hBlqZsuigzQhYxAKzQKnPAAA5ChlrLelcI4Z
        XMTLgA7SiDkugctYuwJYdBJYH8FZFhu2ICXBxjpisKE9FDaRkZiOIBGYCOwGTCxoWB2BDpaFhzmq
        t5hEmmOwYduxXmkTE8ESjA5ABzK1UO+gYAmBqGi8vd4RcJ0IrFycHzLcoyqnQ0cZwCfLcot+vZLn
        YQDvSzK7x+TtbLm5AdU1oJV+GKIo6LrQqP8GMMmKNZZ9/66P2yyh1KFw1G5iNBPsS0rXJ4AiEjeQ
        LsL9hlyR3vXme+vc//qyDnJWfWtM9F6H4qE0QXvq+A1v1YLuMuq0vS9bN7h9QmtwpbbkS4A8nPGs
        cGOD5XLVdQczZIkVKrShoANmo/PP87u/AAAA//8DAJFaeOfbAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfa9fab9a6e1265-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:05:55 GMT
      Function-Execution-Id:
      - 5qxty6y8c1ue
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9675'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4fbdb141b6d675542dc3e029369ebca3;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86502'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.332s
      X-Request-Id:
      - cf247da011b6c10d5521bff3095d4410
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by listing the files in the directory to see if code.py exists.\",\n        \"reasoning\":
      \"Before I can execute code.py, I need to make sure it exists in the directory.\",\n        \"plan\":
      \"- List files in directory\\n- Check if code.py exists\\n- If it exists, execute
      it\\n- If not, create it\",\n        \"criticism\": \"I need to make sure I
      handle the case where code.py does not exist.\",\n        \"speak\": \"I will
      start by listing the files in the directory to see if code.py exists.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''auto-gpt-memory.json'', ''file_logger.txt'', ''code.py'']"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4746'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5ySQW/bMAyF7/sVBM9K4DRt2vq2ITkEQ0/dbR4CRWYsLbJoSDSSIPB/HzzbzZAB
        O+xKUt97j9QVXYk5GqvF1I2fPb89WKO/rjcxO+3f9Gf+9q43a7s6xC9rgwp5/5OMjC/mhuvGkzgO
        qNBE0kIl5ovVy9Pjy/PrKlNYc0kec6wamS3nTzNp455n2TJboMI26Yowv2ITuW5kJ3ykkDBfZKtH
        hTf4rbF8VSgs2t9KD9myU2gsO0MJ8+9XrClN4MieMEedkkuig/Q2OQiFPsK1CAAABYrltrKSCsxh
        LI4NOktfLHALiQjEagHDJc2bC9DZJUngAoglKF0kIxwvc9hCstz6EuhMphUCJyD8G3DqAf04xcgR
        XJoXqP5UjKQTBxeqQfbdBUN3igq2YHT4H3rjdRjAM9iMz0f43aSJTpxxqZ7iB6Ky16n1kSC1kWAL
        VofSE+hwGRTTsKBaX4CNaSOcLE0+XagmqXtXqSF9nHROzvuPaFPwf+QbQJ2abmm4rnUo/zpl0DUN
        GiN811zEctgdnKc7QzpW939haPSzN9DH5m5j3WinCB12Cg8uuGR3w1ExxyTcoEIXSjpjnnU/uk+/
        AAAA//8DADUqDGSBAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfaa0077e2de20f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:06:08 GMT
      Function-Execution-Id:
      - 5qxttol1kgov
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8626'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2e1992914e6a94eaacd7b9e5247258fe;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86018'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.654s
      X-Request-Id:
      - fa45e95f3494e47e0dd088b555dd6ae0
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by listing the files in the directory to see if code.py exists.\",\n        \"reasoning\":
      \"Before I can execute code.py, I need to make sure it exists in the directory.\",\n        \"plan\":
      \"- List files in directory\\n- Check if code.py exists\\n- If it exists, execute
      it\\n- If not, create it\",\n        \"criticism\": \"I need to make sure I
      handle the case where code.py does not exist.\",\n        \"speak\": \"I will
      start by listing the files in the directory to see if code.py exists.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''auto-gpt-memory.json'', ''file_logger.txt'', ''code.py'']"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I see that code.py exists in the directory. I should
      execute it to see what the error is.\",\n        \"reasoning\": \"Since code.py
      exists, I can execute it to see what the error is.\",\n        \"plan\": \"-
      Execute code.py\",\n        \"criticism\": \"I need to make sure I handle any
      errors that may occur when executing code.py.\",\n        \"speak\": \"I will
      execute code.py to see what the error is.\"\n    },\n    \"command\": {\n        \"name\":
      \"execute_python_file\",\n        \"args\": {\n            \"filename\": \"code.py\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command execute_python_file returned: [0, 1]\n"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5586'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSS2/aQBSF9/0VV3c9WBBIIF4m6oJFNy3ZtK6iYebanuB5dOZagBD/vTKGGFH1
        tb2v75yrc0CjMUdVS1Y2NKP5p7s6PJXbj8/BqqdyRT9e0nj19XnyEt5qFOjXb6T4vJEpb0NDbLxD
        gSqSZNKYTx4W97PF/HE+FWi9pgZzrAKPptn9iNu49qPxdDxBgW2SFWF+wBC9DfzKfkMuYT65mz0I
        HI4PjdlCIHuWzVCaPs6OAlXtjaKE+bcDWkqXw9E3hDnKlExi6biT6R2T6ywcCgcAUCDXvq1qTgXm
        cC6eG7TjrljgqiZQXhOYBM4zbH3cGFeBTEC7QIpJZ7CEVPu20RBJ6tN4FvbAHlqnKXYCNGzrfVag
        uKZEksk746oe9cU4RcAXoDb6RKQdqZbpmihgCY5Id4j/Q4ZGup42gs9/3ByE/N75zXEVDRtlku0J
        g0YrNwSpjQTLa8o7YU2lj9SNnQBuD9ZrUxoluxSkWxMpkNxcGFvTNH95wr9YyQrsEUdxSYfy1kqn
        fwmHk5Z6eod9LU1DNwJlrG4z1Te62WH9LPhCPtHPIgp3xKPA0jiT6tc+KJhjYh9QoHGadpiPj9+P
        H34CAAD//wMABWhysMkDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfaa05959741403-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:06:22 GMT
      Function-Execution-Id:
      - 5qxt3hqppt51
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8829'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 09535762dd603eab04d59489fb5af241;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86028'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.648s
      X-Request-Id:
      - 241e484e891a295dfa66d83faaf7b2dd
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"# mypy: ignore-errors
      from typing import List, Optional   def two_sum(nums: List, target: int) ->
      Optional[int]:     seen = {}     for i, num in enumerate(nums):         complement
      = target - num         if complement in seen:             return [seen[complement],
      i]         seen[num] = i     return None   # Example usage: nums = [2, 7, 11,
      15] target = 9 result = two_sum(nums, target) print(result)  # Output: [0, 1]
      \"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized as"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '662'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SRwWobMRCG732KYc7rxZt0E3tvoYWcCkkJlNIUM5bGluJdjZBm47jG715WJE5y
        1D+a7/9gjugtdmgcqRliP7v+ceGb/fLu/uFXuOH23+197w4/9Rv9tvPvWKGsn9jo60ZtZIg9q5eA
        FZrEpGyxa64W7dfF9XLRVjiI5R473EadXdbtTMe0ltn8ct5ghWOmLWN3xJhkiLpS2XHI2DVtU+E7
        +5xfLSpUUerPyUWzPFVonHjDGbs/Rxw4v1GT9IwdUs4+KwWdHCUoh8mf4O6gTgIYsQzqSMHyxgfO
        QLAZg5mawVDfs4VH1L2s8jg8IuydNw6UduVn77OCbCCMw5pTBgoWCJTSlvU1BMrgQxy1KtPEOqaQ
        QR2DD3YSnwC6lzPEhzIt7GJG1sIYQaXkn+g1PDh+Fx5z0bK+PCkdpqUdcwRNZHZTU0z87GXM/QEy
        c/ikro59etOq4SYAv9B0Byi3KqIf63yGmOTZW7Y1nirc+OCzWyWmLAE7zCoRK/TB8gt289Pf05f/
        AAAA//8DAArNv8tyAgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfaa0a788392bef-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:06:30 GMT
      Function-Execution-Id:
      - 5qxtzmrgqd42
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4134'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c7a3787c53c66cef4537711ff0b6d3e7;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89364'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 424ms
      X-Request-Id:
      - ac95aa2c8d5870e79b5455ce0af94943
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["# mypy: ignore-errors from typing import List, Optional   def
      two_sum(nums: List, target: int) -> Optional[int]:     seen = {}     for i,
      num in enumerate(nums):         complement = target - num         if complement
      in seen:             return [seen[complement], i]         seen[num] = i     return
      None   # Example usage: nums = [2, 7, 11, 15] target = 9 result = two_sum(nums,
      target) print(result)  # Output: [0, 1] "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '500'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AAD//wMAxDcwx+UgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfaa0c94ed8115c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:06:31 GMT
      Function-Execution-Id:
      - 5qxtvc5bildx
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '20'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b356e918ff884eaa415db575963d9fbb
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 8445d291034cc082ff1f989b9528fb7d
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a Python code that defines a function called \"two_sum\" which
      takes a list of numbers and a target number as input, and returns the indices
      of two numbers in the list that add up to the target number. The function uses
      a dictionary to keep track of previously seen numbers and their indices. An
      example usage of the function is provided.", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '415'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        3zLjIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfaa0d0ee86e26f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:06:32 GMT
      Function-Execution-Id:
      - 5qxtpz3t7t0k
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '28'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c181c7460ed6126d44e42c38ad88a34c
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 5744dd34844cdd084c3b8ba2d1adf660
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by listing the files in the directory to see if code.py exists.\",\n        \"reasoning\":
      \"Before I can execute code.py, I need to make sure it exists in the directory.\",\n        \"plan\":
      \"- List files in directory\\n- Check if code.py exists\\n- If it exists, execute
      it\\n- If not, create it\",\n        \"criticism\": \"I need to make sure I
      handle the case where code.py does not exist.\",\n        \"speak\": \"I will
      start by listing the files in the directory to see if code.py exists.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''auto-gpt-memory.json'', ''file_logger.txt'', ''code.py'']"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I see that code.py exists in the directory. I should
      execute it to see what the error is.\",\n        \"reasoning\": \"Since code.py
      exists, I can execute it to see what the error is.\",\n        \"plan\": \"-
      Execute code.py\",\n        \"criticism\": \"I need to make sure I handle any
      errors that may occur when executing code.py.\",\n        \"speak\": \"I will
      execute code.py to see what the error is.\"\n    },\n    \"command\": {\n        \"name\":
      \"execute_python_file\",\n        \"args\": {\n            \"filename\": \"code.py\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command execute_python_file returned: [0, 1]\n"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The code is not working as expected. I should read code.py
      to understand why.\",\n        \"reasoning\": \"Since the code did not execute
      as expected, I need to read code.py to understand why.\",\n        \"plan\":
      \"- Read code.py to understand why the code is not working as expected\",\n        \"criticism\":
      \"I need to make sure I understand the code before making any modifications.\",\n        \"speak\":
      \"I will read code.py to understand why the code is not working as expected.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command read_file
      returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[int]:\n    seen = {}\n    for i,
      num in enumerate(nums):\n        complement = target - num\n        if complement
      in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return
      None\n\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget = 9\nresult = two_sum(nums,
      target)\nprint(result)  # Output: [0, 1]\n"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6920'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yU24rjRhCG7/MURc/NDrSNvTPe8QgcCCQXA3u6WHZJ3Mb0SiWrM+pq0VWKxxi/
        +9I6jJ1JIAdCdKeuv776q1Tqo3KFylReWcl9U0/u3r12P7xl/PLL5+rjb/n7N/f4+ecvvLThx4+1
        0ip8/RVzGTKmefBNjeICKa3yiFawUNn8zXJxu7y7v7/VyocCa5WpXSOTm+liIm38Giazm9lcadWy
        3aHKjqqJwTeylfCIxCqbLxYzrc7w58DNza1WEsTWZ+1yeXvSKq+Cy5FVtj4qjzyCY6hRZcoyOxZL
        kmwGEqTUwtEQAIBRUoV2VwkblcFwOATwSdKhUQ/AiCCVFZAKIQ8FgmNo2dEOLLx1LLB3CSTADeau
        PKRI0sqhQQglYI0eSRgcdee1Y5nCA3AV2roAHwpXHs50CSPorylG6UvbES0HcrTrvX/6Tw1/qhxD
        bgly23JicosM+woJJPaMADbPkfl/bLmpLfXdTuBdj03IaXP4J9QX0Dw6cbljP+4AIRaJ5+0jArcR
        4QFaKjCm5So6DB9I7BOUIf6dsdo/bYYbtI9jzb2r63FS/6KlqVE9+qTHdc+D95aKP2w7WY991X10
        glsJ29LV+MKcjbuXP0ofSNozYrD6u+SXP9UV+ENzyMDtKEScYIwhsjFUxuBTU2lyzjchSrevGj40
        6TqwtTFkDBVYguzDllv/ilrPWadaO5KNBrFxh5KBI7mGyffPqetnzSYzvTVGJFjB8TS8p2/nNFDr
        0yCRWo/RCnY1rsek9PQ3VBo5rIaCMEl5FxpXXsocddUuIemJKG0kWKfY+izfaHCbC2kXptZvYAVu
        OB9S3wfCfirG0BX89GQTBLobNlVL3mEF69ca7jTM5xrmi4QeXK/g3hiKyG3d9XIx1XGU18ZQEx3J
        q152DXAFH1ppWslgPdMwT7xx27qNGxbP0EmdtCodOa62/eWkMsUSGqWVowKfVDY7bU7ffQMAAP//
        AwChxdnsjgYAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfaa0df09742244-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:06:53 GMT
      Function-Execution-Id:
      - 5qxtzg6w1gi6
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18566'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - edb753dcae62a637a678d7b6c430e9c6
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86042'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.638s
      X-Request-Id:
      - 09219e6d020e68aee5cb51e41af17219
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by listing the files in the directory to see if code.py exists.\",\n        \"reasoning\":
      \"Before I can execute code.py, I need to make sure it exists in the directory.\",\n        \"plan\":
      \"- List files in directory\\n- Check if code.py exists\\n- If it exists, execute
      it\\n- If not, create it\",\n        \"criticism\": \"I need to make sure I
      handle the case where code.py does not exist.\",\n        \"speak\": \"I will
      start by listing the files in the directory to see if code.py exists.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''auto-gpt-memory.json'', ''file_logger.txt'', ''code.py'']"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I see that code.py exists in the directory. I should
      execute it to see what the error is.\",\n        \"reasoning\": \"Since code.py
      exists, I can execute it to see what the error is.\",\n        \"plan\": \"-
      Execute code.py\",\n        \"criticism\": \"I need to make sure I handle any
      errors that may occur when executing code.py.\",\n        \"speak\": \"I will
      execute code.py to see what the error is.\"\n    },\n    \"command\": {\n        \"name\":
      \"execute_python_file\",\n        \"args\": {\n            \"filename\": \"code.py\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command execute_python_file returned: [0, 1]\n"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The code is not working as expected. I should read code.py
      to understand why.\",\n        \"reasoning\": \"Since the code did not execute
      as expected, I need to read code.py to understand why.\",\n        \"plan\":
      \"- Read code.py to understand why the code is not working as expected\",\n        \"criticism\":
      \"I need to make sure I understand the code before making any modifications.\",\n        \"speak\":
      \"I will read code.py to understand why the code is not working as expected.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command read_file
      returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[int]:\n    seen = {}\n    for i,
      num in enumerate(nums):\n        complement = target - num\n        if complement
      in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return
      None\n\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget = 9\nresult = two_sum(nums,
      target)\nprint(result)  # Output: [0, 1]\n"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I see that the code is using a List without specifying the type of elements
      in the list. I should modify the code to specify the type of elements in the
      list.\",\n        \"reasoning\": \"The code is using a List without specifying
      the type of elements in the list. This can cause issues when trying to access
      elements in the list. I should modify the code to specify the type of elements
      in the list.\",\n        \"plan\": \"- Modify code.py to specify the type of
      elements in the list\",\n        \"criticism\": \"I need to make sure I understand
      the syntax for specifying the type of elements in a list.\",\n        \"speak\":
      \"I will modify code.py to specify the type of elements in the list.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\",\n            \"text\": \"# mypy: ignore-errors\\nfrom typing import
      List, Optional\\n\\ndef two_sum(nums: List[int], target: int) -> Optional[List[int]]:\\n    seen
      = {}\\n    for i, num in enumerate(nums):\\n        complement = target - num\\n        if
      complement in seen:\\n            return [seen[complement], i]\\n        seen[num]
      = i\\n    return None\\n\\n\\n# Example usage:\\nnums = [2, 7, 11, 15]\\ntarget
      = 9\\nresult = two_sum(nums, target)\\nprint(result)  # Output: [0, 1]\\n\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8556'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6ySwW7bMAyG73sKgmcnSNI1S33boShyGLBThmweAlVmbC2SKEj0EiPwuw9u7KbI
        gA0DdiWt7/9I84ymxBx1rUS7YCcfPi3Mlu3Daf309DF83shmPQtf28fjdvtlgxny8w/SMryYanbB
        khj2mKGOpIRKzOfL1f371Wo2X2XouCSLOVZBJnfT+4k08Zkns7vZHDNskqoI8zOGyC7ITvhAPmE+
        f1gsM7zCr43lIkNhUfa1tJitVl2GumajKWH+7YyO0giObAlzVCmZJMpLr8leyPcjnAsPAFCg1NxU
        taQCcxiKQ4NO0hcLXEOtfhI4Ls3eUAmaS5qGdgprSDU3tgQ6kW6EwAioShkPwpCIwOz7kklw5Hgw
        vgKVgE6BtFA5LTB7mxdJJfbGV38MfSEH0mbfgtQE0gYC3gNZcuQlQR9eE1iT5D8LBqv8xW0CjwPv
        rdVfcDc0HY0YbZIbx/VEZc9x6kCQmkjQr8CXlkD5FihGjgmkVgJOtcBaNxGONflhuD5u/DM3WSmQ
        Oow5R2Pt6z5G/39ZyoXcZeMFaXZO+fK3A/LK0SV0SNuFVmr2u72xdGOoYnV7gZdG/+0VNOiODi8e
        g07hO+wy3BtvUr27HBPmmIQDZmh8SSfMZ9337t0vAAAA//8DAPgkIh73AwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfaa17219fe224f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:07:08 GMT
      Function-Execution-Id:
      - 5qxtm3iqobpk
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9782'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8437c72d9c349e6fb63f5712504214a0;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86053'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.631s
      X-Request-Id:
      - ae291fbec606e3498f354fa2edbe8569
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by listing the files in the directory to see if code.py exists.\",\n        \"reasoning\":
      \"Before I can execute code.py, I need to make sure it exists in the directory.\",\n        \"plan\":
      \"- List files in directory\\n- Check if code.py exists\\n- If it exists, execute
      it\\n- If not, create it\",\n        \"criticism\": \"I need to make sure I
      handle the case where code.py does not exist.\",\n        \"speak\": \"I will
      start by listing the files in the directory to see if code.py exists.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''auto-gpt-memory.json'', ''file_logger.txt'', ''code.py'']"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I see that code.py exists in the directory. I should
      execute it to see what the error is.\",\n        \"reasoning\": \"Since code.py
      exists, I can execute it to see what the error is.\",\n        \"plan\": \"-
      Execute code.py\",\n        \"criticism\": \"I need to make sure I handle any
      errors that may occur when executing code.py.\",\n        \"speak\": \"I will
      execute code.py to see what the error is.\"\n    },\n    \"command\": {\n        \"name\":
      \"execute_python_file\",\n        \"args\": {\n            \"filename\": \"code.py\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command execute_python_file returned: [0, 1]\n"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The code is not working as expected. I should read code.py
      to understand why.\",\n        \"reasoning\": \"Since the code did not execute
      as expected, I need to read code.py to understand why.\",\n        \"plan\":
      \"- Read code.py to understand why the code is not working as expected\",\n        \"criticism\":
      \"I need to make sure I understand the code before making any modifications.\",\n        \"speak\":
      \"I will read code.py to understand why the code is not working as expected.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command read_file
      returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[int]:\n    seen = {}\n    for i,
      num in enumerate(nums):\n        complement = target - num\n        if complement
      in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return
      None\n\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget = 9\nresult = two_sum(nums,
      target)\nprint(result)  # Output: [0, 1]\n"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I see that the code is using a List without specifying the type of elements
      in the list. I should modify the code to specify the type of elements in the
      list.\",\n        \"reasoning\": \"The code is using a List without specifying
      the type of elements in the list. This can cause issues when trying to access
      elements in the list. I should modify the code to specify the type of elements
      in the list.\",\n        \"plan\": \"- Modify code.py to specify the type of
      elements in the list\",\n        \"criticism\": \"I need to make sure I understand
      the syntax for specifying the type of elements in a list.\",\n        \"speak\":
      \"I will modify code.py to specify the type of elements in the list.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\",\n            \"text\": \"# mypy: ignore-errors\\nfrom typing import
      List, Optional\\n\\ndef two_sum(nums: List[int], target: int) -> Optional[List[int]]:\\n    seen
      = {}\\n    for i, num in enumerate(nums):\\n        complement = target - num\\n        if
      complement in seen:\\n            return [seen[complement], i]\\n        seen[num]
      = i\\n    return None\\n\\n\\n# Example usage:\\nnums = [2, 7, 11, 15]\\ntarget
      = 9\\nresult = two_sum(nums, target)\\nprint(result)  # Output: [0, 1]\\n\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I have modified code.py.
      I should execute it again to see if it is working as expected.\",\n        \"reasoning\":
      \"I have modified code.py to specify the type of elements in the list. I should
      execute it again to see if it is working as expected.\",\n        \"plan\":
      \"- Execute code.py to see if it is working as expected\",\n        \"criticism\":
      \"I need to make sure I handle any errors that may occur when executing code.py.\",\n        \"speak\":
      \"I will execute code.py again to see if it is working as expected.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '9514'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7ySz27bMAzG73sKgmfFiJNlC/wA3XLYZegOwzwEisRYSvQPFt2mC/zugx2n7TLs
        0MtOBCjy930UeUarsUJlJCuf3Ozjl4UN3q3NySzuVg+/7il8v4ufvh42B/0ZBcbdgRRPHYWKPjli
        GwMKVC1JJo1V+WG9er9ez5dLgT5qclhhk3i2LFYz7tpdnM2X8xIFdlk2hNUZUxt94i3HI4WM1aJc
        lgJf4M8P5aoUyJGle6ldrBe9QGWiVZSx+nFGT/kKbqMjrFDmbDPLwIPNGJjCMMK5DgAANbKJXWM4
        11jBlJwe6MRDssZ7Q6CiJrAZHmN7tKEBmYFOiRSTLmAD2cTOaegyARsClvm4nWYYer2XQQNHoCFM
        BUWN4rVgSzLHYEPzX1WTk+EiOINvbwHdcFRr2Sqb/QW2gUA09nh5JMhdS7ABIx9G3gjWIJ0bcYHU
        sLb2CTJTyrCjfWxpUBuG/pfznEger2qP1rk3f8SF1ovrLUyVf51CkJ4uQn+Qb/zItrm9oteLvd1q
        GGORnsDIYWQKsLcn0s++Rm+TxTr02Avc22Cz2V6AWGHmmFCgDZpOWM37n/273wAAAP//AwA+sBfX
        1QMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfaa1ceaac82c24-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:07:23 GMT
      Function-Execution-Id:
      - 5qxtxo81gk74
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9927'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2e37c60705236f8d80396e394a092247;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86058'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.628s
      X-Request-Id:
      - 217338632cadca40e3fe185ecbf619b7
    status:
      code: 200
      message: OK
version: 1
