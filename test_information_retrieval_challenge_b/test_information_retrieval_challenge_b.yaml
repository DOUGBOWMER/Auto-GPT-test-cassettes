interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Get-PhysicsNobelPrize, An autonomous agent that specializes in physics history.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write to file the winner''s name(s), affiliated
      university, and discovery of the 2010 nobel prize in physics. Write your final
      answer to 2010_nobel_prize_winners.txt.\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. browse_website: Browse Website, args: \"url\":
      \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3304'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SU0W/TMBDG3/krTveyl7RNu41CntmkSmhMqDwAQZXjXBJviR3sy7JS9X9HTtLS
        ZhIIeIvO9n3f7zs7O1QpRigLwbKqy8nyPd8tn3i9zh+a9fLdl6K5uQ0/3y5u9McPNQZokgeSPJyY
        SlPVJbEyGgOUlgRTitH89Zvrq+tF+PYywMqkVGKEec2Ty+n1hBubmEl4Gc4xwMaJnDDaYW1NVfOG
        zSNph9HyahHgr97H+uJ1GCAbFuWxNA/DxT5AWRglyWH0dYcVuUNfa0rCCIVzyrHQ7F0azaQ9wS7W
        AAAxcmGavGAXYwRDcVigZ/bFGFegiVJgA5nSKZiGoS0MtEYDFwSLcB7CnUmohHurfhAoDffF1inp
        QOgUWquY/E5lQYuKXAAiy1SpfGDQaPVE1ineBt3uVDlpnshuvZ6ATJU0hRVIocGxsAzJFhwJKwul
        805faSariSEzdihkxlbCpzeNMTiFsiSc0UrnY7JccEH29CgklBlLg3YPofjU1fpUXDkQkBuTQl0K
        SX5f53fsoC6F7sUn8Ml1ucBFYk3raNNS4hTTBUhTVT4M36Rj7dhOzf05+2kc6xOJDmDDZuO9nykc
        5wOt0pqsu/jHMY1IpVWspHLVOOtKPBK4xnpRweORweo4DAdCysYKpk6z2706G4U/67VBGmtJcrkd
        u3A1iceDg1aV5SHRF1fn7+I9v9r/H13veR8c3uUwoBfP0vfvcc4vzQhb2Hz8pPuFxpb98YK5dtFs
        1rbtVHvE2hNOjc1n3Zeb1T3pzKcwc01VCbudnen0Lb835Hxqfd/fZTakdKDtiAfwWO9xH2CmtHLF
        pn+nGKFj4/+8Sqf0jFG4/7Z/9RMAAP//AwBaJNWatgUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf734597d942be1-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:08:34 GMT
      Function-Execution-Id:
      - ou9ydckrhk8v
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '20954'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 779eee6280a1d7e66ffbd86eda3d8369;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86502'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.332s
      X-Request-Id:
      - 5975ea4ac0c753f3086418e53e4982f3
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text; include any information that can be
      used to answer the question \"2010 Nobel Prize in Physics winners\". Do not
      directly answer the question itself:\n\n\nLITERAL TEXT: \"\"\"Skip to content
      This website uses cookies to improve the user experience. By using this website
      you consent to all cookies in accordance with our cookie policy.I understand
      Close the search form A button that allows you to close the search form if needed
      Close the search form A button that allows you to close the search form if needed
      Close Mobile Menu The Nobel Prize The Nobel Prize Logo Toggle Mobile Menu Nobel
      Prizes & Laureates All Nobel Prizes Physics Prize Chemistry Prize Medicine Prize
      Literature Prize Peace Prize Prize in Economic Sciences Quick facts Nomination
      Physics Prize Chemistry Prize Medicine Prize Literature Prize Peace Prize Prize
      in Economic Sciences Nomination Archive Alfred Nobel Alfred Nobel\u2019s life
      Alfred Nobel\u2019s will News & insights Press In-depth Events Public events
      Nobel Prize Concert Nobel Week Dialogue Nobel Prize Dialogue Nobel Prize Summit
      Nobel Prize Inspiration Initiative Nobel Prize award ceremonies Educational
      Close the search form A button that allows you to close the search form if needed
      Close the search form A button that allows you to close the search form if needed
      Header Search Submit a search term Allows users to submit a search term Physics
      The Nobel Prize in Physics 2010 Explore Summary Physics Prizes Chemistry Prizes
      Medicine Prizes Literature Prizes Peace Prizes Prizes in Economic Sciences Summary
      Prize announcement Press release Advanced information Popular information Illustrated
      information Speed read Award ceremony video Award ceremony speech Banquet video
      Laureates Andre Geim Konstantin Novoselov Enhanced Page Navigation The Nobel
      Prize in Physics 2010 The Nobel Prize in Physics 2010 - Prize announcement The
      2010 Nobel Prize in Physics - Press release The Nobel Prize in Physics 2010
      Andre Geim Konstantin Novoselov Share this Share on Facebook: The Nobel Prize
      in Physics 2010 Share this content on Facebook Facebook Tweet: The Nobel Prize
      in Physics 2010 Share this content on Twitter Twitter Share on LinkedIn: The
      Nobel Prize in Physics 2010 Share this content on LinkedIn LinkedIn Share via
      Email: The Nobel Prize in Physics 2010 Share this content via Email Email this
      page The Nobel Prize in Physics 2010 \u00a9 The Nobel Foundation. Photo: U.
      Montan Andre Geim Prize share: 1/2 \u00a9 The Nobel Foundation. Photo: U. Montan
      Konstantin Novoselov Prize share: 1/2 The Nobel Prize in Physics 2010 was awarded
      jointly to Andre Geim and Konstantin Novoselov \"for groundbreaking experiments
      regarding the two-dimensional material graphene\" To cite this section MLA style:
      The Nobel Prize in Physics 2010. NobelPrize.org. Nobel Prize Outreach AB 2023.
      Tue. 30 May 2023. <https://www.nobelprize.org/prizes/physics/2010/summary/>
      Back to top Back To Top Takes users back to the top of the page Nobel Prizes
      and laureates Nobel Prizes 2022 Fourteen laureates were awarded a Nobel Prize
      in 2022, for achievements that have conferred the greatest benefit to humankind.
      Their work and discoveries range from paleogenomics and click chemistry to documenting
      war crimes.See them all presented here. Explore prizes and laureates Look for
      popular awards and laureates in different fields, and discover the history of
      the Nobel Prize. Select the category or categories you would like to filter
      by Physics Chemistry Medicine Literature Peace Economic Sciences Select the
      category or categories you would like to filter by Physics Chemistry Medicine
      Literature Peace Economic Sciences Decrease the year by one - Choose a year
      you would like to search in Increase the year by one + Explore About the Nobel
      Prize organisation The Nobel Foundation Tasked with a mission to manage Alfred
      Nobel''s fortune and has\u00a0ultimate responsibility for fulfilling the intentions
      of Nobel''s will. The prize-awarding institutions For more than a century, these
      academic institutions have worked independently to select Nobel Prize laureates.
      Nobel Prize outreach activities Several outreach organisations and activities
      have been developed to inspire generations and disseminate knowledge about the
      Nobel Prize. Press Contact FAQ Privacy policy Technical support Terms of use
      For developers Media player Join us Facebook Twitter Icon Follow The Nobel Prize
      on Twitter Twitter Instagram Icon Follow The Nobel Prize on Instagram Instagram
      Youtube Icon Follow The Nobel Prize on Youtube Youtube LinkedIn IconConnect
      with The Nobel Prize on LinkedIn LinkedIn The Nobel Prize Copyright \u00a9 Nobel
      Prize Outreach AB 2023\"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized
      as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4871'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0ROTW8TMRC98ytGc/ZGu0lTwDe4AGoV9UCFKlRVjj3JTuqdWdmTbtIo/x2lAnp8
        3++EnNBj7IPFYczNx1tbPRxudl/n06/v94vj4se13r/+fLB0W5/Roa53FO1vYhZ1GDMZq6DDWCgY
        JfTd9afl1XLezVuHgybK6HE7WrOYLRvbl7U27aLt0OG+hi2hP+FYdBjtyfSZpKL/3LUO37v/81ed
        Q1ML+d257M4OY68cqaL/fcKB6r/WopnQY6iVqwWxy0cVI7n8DyK6l8iyBesJJhahUkE3b3Dedi2s
        dE0Z7gq/ErDAXX+sHKuDqefYwxQq7JTF8hHCFEqiBKbwRVIh+EY8QJAENypv2yyw0hetlPUFNlou
        K1yADiMVHkiswsTWw7aEsSchBwFs0iZdxMoqIcMQjAqHPMOzww0L1/6pUKgq6LGajuiQJdEBfXt+
        PH/4AwAA//8DAIsP5ETcAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf73505c88e2aae-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:08:44 GMT
      Function-Execution-Id:
      - ou9yddyzen28
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4508'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9bbdcae1b4f3dc1fe4b5d491cdc74387;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88318'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 1.121s
      X-Request-Id:
      - 42930f6b99cecdfe3ab44f8e70a21ff9
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Skip to content This website uses cookies to improve the user
      experience. By using this website you consent to all cookies in accordance with
      our cookie policy.I understand Close the search form A button that allows you
      to close the search form if needed Close the search form A button that allows
      you to close the search form if needed Close Mobile Menu The Nobel Prize The
      Nobel Prize Logo Toggle Mobile Menu Nobel Prizes & Laureates All Nobel Prizes
      Physics Prize Chemistry Prize Medicine Prize Literature Prize Peace Prize Prize
      in Economic Sciences Quick facts Nomination Physics Prize Chemistry Prize Medicine
      Prize Literature Prize Peace Prize Prize in Economic Sciences Nomination Archive
      Alfred Nobel Alfred Nobel\u2019s life Alfred Nobel\u2019s will News & insights
      Press In-depth Events Public events Nobel Prize Concert Nobel Week Dialogue
      Nobel Prize Dialogue Nobel Prize Summit Nobel Prize Inspiration Initiative Nobel
      Prize award ceremonies Educational Close the search form A button that allows
      you to close the search form if needed Close the search form A button that allows
      you to close the search form if needed Header Search Submit a search term Allows
      users to submit a search term Physics The Nobel Prize in Physics 2010 Explore
      Summary Physics Prizes Chemistry Prizes Medicine Prizes Literature Prizes Peace
      Prizes Prizes in Economic Sciences Summary Prize announcement Press release
      Advanced information Popular information Illustrated information Speed read
      Award ceremony video Award ceremony speech Banquet video Laureates Andre Geim
      Konstantin Novoselov Enhanced Page Navigation The Nobel Prize in Physics 2010
      The Nobel Prize in Physics 2010 - Prize announcement The 2010 Nobel Prize in
      Physics - Press release The Nobel Prize in Physics 2010 Andre Geim Konstantin
      Novoselov Share this Share on Facebook: The Nobel Prize in Physics 2010 Share
      this content on Facebook Facebook Tweet: The Nobel Prize in Physics 2010 Share
      this content on Twitter Twitter Share on LinkedIn: The Nobel Prize in Physics
      2010 Share this content on LinkedIn LinkedIn Share via Email: The Nobel Prize
      in Physics 2010 Share this content via Email Email this page The Nobel Prize
      in Physics 2010 \u00a9 The Nobel Foundation. Photo: U. Montan Andre Geim Prize
      share: 1/2 \u00a9 The Nobel Foundation. Photo: U. Montan Konstantin Novoselov
      Prize share: 1/2 The Nobel Prize in Physics 2010 was awarded jointly to Andre
      Geim and Konstantin Novoselov \"for groundbreaking experiments regarding the
      two-dimensional material graphene\" To cite this section MLA style: The Nobel
      Prize in Physics 2010. NobelPrize.org. Nobel Prize Outreach AB 2023. Tue. 30
      May 2023. <https://www.nobelprize.org/prizes/physics/2010/summary/> Back to
      top Back To Top Takes users back to the top of the page Nobel Prizes and laureates
      Nobel Prizes 2022 Fourteen laureates were awarded a Nobel Prize in 2022, for
      achievements that have conferred the greatest benefit to humankind. Their work
      and discoveries range from paleogenomics and click chemistry to documenting
      war crimes.See them all presented here. Explore prizes and laureates Look for
      popular awards and laureates in different fields, and discover the history of
      the Nobel Prize. Select the category or categories you would like to filter
      by Physics Chemistry Medicine Literature Peace Economic Sciences Select the
      category or categories you would like to filter by Physics Chemistry Medicine
      Literature Peace Economic Sciences Decrease the year by one - Choose a year
      you would like to search in Increase the year by one + Explore About the Nobel
      Prize organisation The Nobel Foundation Tasked with a mission to manage Alfred
      Nobel''s fortune and has\u00a0ultimate responsibility for fulfilling the intentions
      of Nobel''s will. The prize-awarding institutions For more than a century, these
      academic institutions have worked independently to select Nobel Prize laureates.
      Nobel Prize outreach activities Several outreach organisations and activities
      have been developed to inspire generations and disseminate knowledge about the
      Nobel Prize. Press Contact FAQ Privacy policy Technical support Terms of use
      For developers Media player Join us Facebook Twitter Icon Follow The Nobel Prize
      on Twitter Twitter Instagram Icon Follow The Nobel Prize on Instagram Instagram
      Youtube Icon Follow The Nobel Prize on Youtube Youtube LinkedIn IconConnect
      with The Nobel Prize on LinkedIn LinkedIn The Nobel Prize Copyright \u00a9 Nobel
      Prize Outreach AB 2023"], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4560'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf7352d2bce2a2a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:08:46 GMT
      Function-Execution-Id:
      - ou9yfdvgasf9
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '424'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - cf0d92c45b87dc3854b1d473766f3df4
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 8a8add3f6af259d5ba812fe4e936bdb0
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "announcing the winners of the 2010 Nobel Prize in Physics, which
      was jointly awarded to Andre Geim and Konstantin Novoselov for their experiments
      with graphene, a two-dimensional material.", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '265'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf73532cf9a10f6-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:08:47 GMT
      Function-Execution-Id:
      - ou9ybjefnj29
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '530'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - ccf01f086a83334db7361baa88b087a9
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 0d991b925e16ef02a697635658af1372
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Get-PhysicsNobelPrize, An autonomous agent that specializes in physics history.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write to file the winner''s name(s), affiliated
      university, and discovery of the 2010 nobel prize in physics. Write your final
      answer to 2010_nobel_prize_winners.txt.\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. browse_website: Browse Website, args: \"url\":
      \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to find out who won the
      2010 Nobel Prize in Physics and write their names, affiliated university, and
      discovery to a file. I can start by searching the internet for the information.\",\n        \"reasoning\":
      \"I need to gather information before I can write it to a file. The internet
      is a good place to start.\",\n        \"plan\": \"- Use the ''browse_website''
      command to search for information on the 2010 Nobel Prize in Physics.\\n- Use
      the ''write_to_file'' command to write the winners'' names, affiliated university,
      and discovery to a file.\",\n        \"criticism\": \"I need to make sure that
      the information I gather is accurate and that I write it to the file correctly.\",\n        \"speak\":
      \"I will search the internet for information on the 2010 Nobel Prize in Physics
      and write the winners'' names, affiliated university, and discovery to a file.\"\n    },\n    \"command\":
      {\n        \"name\": \"browse_website\",\n        \"args\": {\n            \"url\":
      \"https://www.nobelprize.org/prizes/physics/2010/summary/\",\n            \"question\":
      \"2010 Nobel Prize in Physics winners\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command browse_website returned: Answer gathered from website: announcing
      the winners of the 2010 Nobel Prize in Physics, which was jointly awarded to
      Andre Geim and Konstantin Novoselov for their experiments with graphene, a two-dimensional
      material.\n\nLinks: [''\\nSkip to content  (https://www.nobelprize.org/prizes/physics/2010/summary/#content)'',
      ''cookie policy (https://www.nobelprize.org/about/privacy-policy/)'', ''\\n\\nClose
      the search form\\nA button that allows you to close the search form if needed\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nClose
      the search form\\nA button that allows you to close the search form if needed\\n\\n\\n
      (https://www.nobelprize.org/prizes/physics/2010/summary/)'', ''\\nClose Mobile
      Menu\\n (https://www.nobelprize.org/prizes/physics/2010/summary/)'', ''\\n\\nThe
      Nobel Prize\\nThe Nobel Prize Logo\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n (https://www.nobelprize.org)'']"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5653'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6yTT2/aQBDF7/0Uo7nkYhB/Co18q3qoaFOaqo2iqFRoWY/xBHvH2h0gKeK7V2sg
        EFq1PeRm7cz+5r23ng1yhinawqit6rL15krHPKyHd9m9/3DVHQ3Ht4vPt1/fde6+2CtMUGb3ZHV/
        o22lqktSFocJWk9GKcO0O7wcvB70uv1OgpVkVGKK81pb/fagpUs/k1an3+ligstg5oTpBmsvVa1T
        lQW5gGm3d9lJ8Ah/KvQGvQRV1JTH3kG/t03QFsKWAqbfN1hROIC9lIQpmhA4qHEaZYpTctHCZuIA
        ACaohSznhYYJprA/3BfoQePhBEdQmBVBLkuXgRYE7HLxlYnyYASOKGvDWNb7b1CBtWelpnfNzpEP
        F+BMRSEBk+dccgwLlo5X5APrYwLGZZBxsLIi/xgJBnIuqQ0jsMbBMuxoFw14qjKN1QuwUlXxqgpk
        AlpwaE8wObXhyQRx7ObPvPzZxU7G3+ZwaMozCgpr0wgNkcd6ovlMQV0atxvegpt/+3ix6M5kWM/K
        lkN1COLwVpVZEISlj0ONwuhEwWlEKs1RRIMV78lq+Xg+JNRkFocBay7L/3m5F3S807JNDn/3fspv
        P3fk72Q+k3Xmxvj5+V7sCrH3iOh1up2pkxmV09rzT5rubbQ1blByfvm4WN+OlkHyJoHIgnFkwXVk
        ATu4Lh4D2wDGE7x1mSd4T1w1KXwU1+w2OxjLSgKVsoLcS9XAbp4yi/hPxtmCgpKHXHxsYA/0UJPn
        ipwGWLMWMPemLshRAgZ0La0sFgOLMyVURsmzKZ+CbsLeZz5xW9wmmLPjUEx3a4cpBpUaE2SX0QOm
        ne2P7atfAAAA//8DAPor8Gd4BQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf735444876233f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:09:12 GMT
      Function-Execution-Id:
      - ou9yg20j4re7
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22571'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9c971259de0b7489329ca06f70990e38;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86013'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.658s
      X-Request-Id:
      - 3a0194b6544f5718543bcada4b40dafa
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Get-PhysicsNobelPrize, An autonomous agent that specializes in physics history.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write to file the winner''s name(s), affiliated
      university, and discovery of the 2010 nobel prize in physics. Write your final
      answer to 2010_nobel_prize_winners.txt.\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. browse_website: Browse Website, args: \"url\":
      \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to find out who won the
      2010 Nobel Prize in Physics and write their names, affiliated university, and
      discovery to a file. I can start by searching the internet for the information.\",\n        \"reasoning\":
      \"I need to gather information before I can write it to a file. The internet
      is a good place to start.\",\n        \"plan\": \"- Use the ''browse_website''
      command to search for information on the 2010 Nobel Prize in Physics.\\n- Use
      the ''write_to_file'' command to write the winners'' names, affiliated university,
      and discovery to a file.\",\n        \"criticism\": \"I need to make sure that
      the information I gather is accurate and that I write it to the file correctly.\",\n        \"speak\":
      \"I will search the internet for information on the 2010 Nobel Prize in Physics
      and write the winners'' names, affiliated university, and discovery to a file.\"\n    },\n    \"command\":
      {\n        \"name\": \"browse_website\",\n        \"args\": {\n            \"url\":
      \"https://www.nobelprize.org/prizes/physics/2010/summary/\",\n            \"question\":
      \"2010 Nobel Prize in Physics winners\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command browse_website returned: Answer gathered from website: announcing
      the winners of the 2010 Nobel Prize in Physics, which was jointly awarded to
      Andre Geim and Konstantin Novoselov for their experiments with graphene, a two-dimensional
      material.\n\nLinks: [''\\nSkip to content  (https://www.nobelprize.org/prizes/physics/2010/summary/#content)'',
      ''cookie policy (https://www.nobelprize.org/about/privacy-policy/)'', ''\\n\\nClose
      the search form\\nA button that allows you to close the search form if needed\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nClose
      the search form\\nA button that allows you to close the search form if needed\\n\\n\\n
      (https://www.nobelprize.org/prizes/physics/2010/summary/)'', ''\\nClose Mobile
      Menu\\n (https://www.nobelprize.org/prizes/physics/2010/summary/)'', ''\\n\\nThe
      Nobel Prize\\nThe Nobel Prize Logo\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n (https://www.nobelprize.org)'']"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I have found the information I need. Now I need to write
      the winners'' names, affiliated university, and discovery to a file. I can use
      the ''write_to_file'' command to do this.\",\n        \"reasoning\": \"I have
      the information I need, and the ''write_to_file'' command is the best way to
      save it to a file.\",\n        \"plan\": \"- Use the ''write_to_file'' command
      to write the winners'' names, affiliated university, and discovery to a file.\",\n        \"criticism\":
      \"I need to make sure that I write the information to the file correctly.\",\n        \"speak\":
      \"I will use the ''write_to_file'' command to write the winners'' names, affiliated
      university, and discovery to a file.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"2010_nobel_prize_winners.txt\",\n            \"text\":
      \"The winners of the 2010 Nobel Prize in Physics are Andre Geim and Konstantin
      Novoselov from the University of Manchester for their experiments with graphene,
      a two-dimensional material.\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command write_to_file returned: File written to successfully."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7011'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSTW/TQBCG7/yK0Vx62UQJiZvKQkgILqkqwaWIglE0XU/sxfau2R0njSL/98of
        UapA4Tgzmud95+OIJsUYdU6iq7qcrO7k84eHL9s7+nTr/dfDQ+TZ1fcfv3+75ltU6B5/sZaxY6pd
        VZcsxllUqD2TcIrx/PomWkZv59GNwsqlXGKMWS2TxTSaSOMf3WS2mM1RYRMoY4yPWHtX1bIRV7AN
        GM+j1VLhGX4uLBcKxQmV59RqvmoV6twZzQHjH0esOJzA3pWMMVIIJghZ6Ww6K2y7EY6JBQBIUHLX
        ZLmEBGMYk2OBn6RLJriGnHYMoydOoTqAUCimsAZNFqzbA9sUJDcBAodgnJ0mqF7SPFNw1tjsFaTk
        3DNhDXsKkJkdWwXUU9kzkGewDraN72Ig3e0mgOffjfGcXsrVJdlBaQL3gXv8Vcqd1oYytnLVaVc9
        3/3XvPZGjDahOpm3zH1jRQVDaHwnQALjVIF2nAKVZS9rWXc38Qcwdut8RZ3zcbJzz182oZ33rKU8
        XNoJNVPx79P0/L0py9eOM/BadXqDcRt/fIGligepl9u7MEQ+u/yfoVDwYWh+V/Dh/Um1Vx4NJLbF
        VuHWWBPyzfAlGGMQV6NCY1N+wnjW/mzfPAMAAP//AwC/Z9OhrgMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf735f5bd4f86f8-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:09:30 GMT
      Function-Execution-Id:
      - ou9yhs1x21kt
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12195'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 83b9623d57953ea36141355efbfe1a6d;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86008'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.661s
      X-Request-Id:
      - bbb396adba073b69b5e511052c7c392b
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Get-PhysicsNobelPrize, An autonomous agent that specializes in physics history.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write to file the winner''s name(s), affiliated
      university, and discovery of the 2010 nobel prize in physics. Write your final
      answer to 2010_nobel_prize_winners.txt.\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. browse_website: Browse Website, args: \"url\":
      \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to find out who won the
      2010 Nobel Prize in Physics and write their names, affiliated university, and
      discovery to a file. I can start by searching the internet for the information.\",\n        \"reasoning\":
      \"I need to gather information before I can write it to a file. The internet
      is a good place to start.\",\n        \"plan\": \"- Use the ''browse_website''
      command to search for information on the 2010 Nobel Prize in Physics.\\n- Use
      the ''write_to_file'' command to write the winners'' names, affiliated university,
      and discovery to a file.\",\n        \"criticism\": \"I need to make sure that
      the information I gather is accurate and that I write it to the file correctly.\",\n        \"speak\":
      \"I will search the internet for information on the 2010 Nobel Prize in Physics
      and write the winners'' names, affiliated university, and discovery to a file.\"\n    },\n    \"command\":
      {\n        \"name\": \"browse_website\",\n        \"args\": {\n            \"url\":
      \"https://www.nobelprize.org/prizes/physics/2010/summary/\",\n            \"question\":
      \"2010 Nobel Prize in Physics winners\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command browse_website returned: Answer gathered from website: announcing
      the winners of the 2010 Nobel Prize in Physics, which was jointly awarded to
      Andre Geim and Konstantin Novoselov for their experiments with graphene, a two-dimensional
      material.\n\nLinks: [''\\nSkip to content  (https://www.nobelprize.org/prizes/physics/2010/summary/#content)'',
      ''cookie policy (https://www.nobelprize.org/about/privacy-policy/)'', ''\\n\\nClose
      the search form\\nA button that allows you to close the search form if needed\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nClose
      the search form\\nA button that allows you to close the search form if needed\\n\\n\\n
      (https://www.nobelprize.org/prizes/physics/2010/summary/)'', ''\\nClose Mobile
      Menu\\n (https://www.nobelprize.org/prizes/physics/2010/summary/)'', ''\\n\\nThe
      Nobel Prize\\nThe Nobel Prize Logo\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n (https://www.nobelprize.org)'']"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I have found the information I need. Now I need to write
      the winners'' names, affiliated university, and discovery to a file. I can use
      the ''write_to_file'' command to do this.\",\n        \"reasoning\": \"I have
      the information I need, and the ''write_to_file'' command is the best way to
      save it to a file.\",\n        \"plan\": \"- Use the ''write_to_file'' command
      to write the winners'' names, affiliated university, and discovery to a file.\",\n        \"criticism\":
      \"I need to make sure that I write the information to the file correctly.\",\n        \"speak\":
      \"I will use the ''write_to_file'' command to write the winners'' names, affiliated
      university, and discovery to a file.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"2010_nobel_prize_winners.txt\",\n            \"text\":
      \"The winners of the 2010 Nobel Prize in Physics are Andre Geim and Konstantin
      Novoselov from the University of Manchester for their experiments with graphene,
      a two-dimensional material.\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command write_to_file returned: File written to successfully."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I have completed my task. I can now end this session.\",\n        \"reasoning\":
      \"I have completed the task I was given, and there are no further actions required.\",\n        \"plan\":
      \"- Use the ''delete_agent'' command to end this session.\",\n        \"criticism\":
      \"I need to make sure that I have saved all the necessary information and that
      I have completed the task correctly.\",\n        \"speak\": \"I have completed
      my task and will now end this session.\"\n    },\n    \"command\": {\n        \"name\":
      \"delete_agent\",\n        \"args\": {\n            \"key\": \"<key>\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command delete_agent returned: Error: invalid
      literal for int() with base 10: ''<key>''"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7935'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSTW8aQQyG7/0Vli+57CJoIIQ9VmoQUtMitT1EpUJm1uxO2Z3Zjg2EIv57tR+I
        iDbt0bb8vo8/jmhTTNDkpKasinj8QT993k/L+cOjf/riJu/HQ5q9e1xNOTw9YIR+9YONdh0948uq
        YLXeYYQmMCmnmAzu7kfD0dvB+C7C0qdcYIJZpfFtbxTrNqx83L/tDzDCrVDGmByxCr6sdKl+w04w
        GYzv7iO8iF8Kw0mE6pWKS2oyGJ8iNLm3hgWTb0csWc7CwReMCZKIFSWnNaZ3yq4e4bhwAAAL1Nxv
        s1xlgQl0ya7Az1onFziDnHYMHROnUB5ASTY9mIEhB87vgV0KmlsBYRHrXW+B0Uu1wCTeWZe9Iqk5
        N5owgz0JZHbHLgJqVDkwUGBwHtbbUMdApt6NQOCfWxs4vbarCnKtUwxfhRv5m5RrryVl7PSm9i4b
        ff9feBOsWmOlPMM75qaxpA2DbENtQArdVEI7ToGKorF1bOqbhANYt/ahpJq8m+zS85dNGB8CGy0O
        1zhSMW3+fZpGf2+L4rXjtHqn6PwG3Tb++AJHJbdWL7d3BUQhu/6ftrDhQ9s8ZY3n+UGskY9+xcU8
        2F98pmhIOqCFO+EpwrV1VvJl+zWYoKivMELrUn7GpH/6fnrzGwAA//8DAOFl6Tm+AwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf736653aa9e15f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:09:51 GMT
      Function-Execution-Id:
      - ou9ydeeyzm8r
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15038'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e4d9d3e3b2f16dbefeb9146b618a7461;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86008'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.66s
      X-Request-Id:
      - bbdf877ce10c8b9e361ca166706cf3f4
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"The winners
      of the 2010 Nobel Prize in Physics are Andre Geim and Konstantin Novoselov from
      the University of Manchester for their experiments with graphene, a two-dimensional
      material.\"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized as"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '426'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOwU4bQRBE7/mKVp9nrV2MIZ4bB5IIiIMUoSiJIjSebXsbZrpXM20bsPzvkREh
        11evSrVH7tFjHILFPKbm/Ma+PV7dXZT4/ebTWBZf0q9LWW9+vsTLH3N0qMsHivbWmETNYyJjFXQY
        CwWjHn139nF2Ojvp5qcOs/aU0ON6tGY6mTW2KUtt2mnbocNNDWtCv8exaB7t3vSRpKI/nzr8P/2O
        p2cOTS2kd9K184PDOChHquh/7zFT/TdaNBF6DLVytSB2vKhiJMf7F9IXgs/EGYL0cK3y6rDAQrda
        KekWVkUz2EBwJ7ylUtmeQVfwNUgcqBoV2Km8Cidt18JCl5TgtvALAQvcDs+VY4WVlqPDBehppMKZ
        xCrs2AZYlzAOJOQggO206Y9hZZWQIAejwiFN8OBwxcJ1uC8Uqgp6rKYjOmTp6Ql9e/hz+PAXAAD/
        /wMAxnVI6skBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf736d39aebf216-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:09:57 GMT
      Function-Execution-Id:
      - ou9y6nak5gvc
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3405'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - edaccd8759836fcad1b8c659e712cd64;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89422'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 384ms
      X-Request-Id:
      - 9964bc5cc90d0345d6f56124f71274b2
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The winners of the 2010 Nobel Prize in Physics are Andre Geim
      and Konstantin Novoselov from the University of Manchester for their experiments
      with graphene, a two-dimensional material."], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '264'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AIQ56ujjIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf736ee2b4d7f8c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:09:59 GMT
      Function-Execution-Id:
      - ou9yu3j4c78o
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '819'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 38dca5fcd8c1fffe755943e548dca9b4
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 2852e87d874bd8fdc9b6a8e772836ee3
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "Andre Geim and Konstantin Novoselov from the University of Manchester
      won the 2010 Nobel Prize in Physics for their experiments with graphene, a two-dimensional
      material.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '247'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        /wMA1eRc7uMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf736f79eea0298-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 13:09:59 GMT
      Function-Execution-Id:
      - ou9ya8zoowae
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '288'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e2546aa3b029632acc48582d85a46020
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 8db57036a720b4295ef97022b48946a0
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Get-PhysicsNobelPrize, An autonomous agent that specializes in physics history.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write to file the winner''s name(s), affiliated
      university, and discovery of the 2010 nobel prize in physics. Write your final
      answer to 2010_nobel_prize_winners.txt.\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. browse_website: Browse Website, args: \"url\":
      \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to find out who won the
      2010 Nobel Prize in Physics and write their names, affiliated university, and
      discovery to a file. I can start by searching the internet for the information.\",\n        \"reasoning\":
      \"I need to gather information before I can write it to a file. The internet
      is a good place to start.\",\n        \"plan\": \"- Use the ''browse_website''
      command to search for information on the 2010 Nobel Prize in Physics.\\n- Use
      the ''write_to_file'' command to write the winners'' names, affiliated university,
      and discovery to a file.\",\n        \"criticism\": \"I need to make sure that
      the information I gather is accurate and that I write it to the file correctly.\",\n        \"speak\":
      \"I will search the internet for information on the 2010 Nobel Prize in Physics
      and write the winners'' names, affiliated university, and discovery to a file.\"\n    },\n    \"command\":
      {\n        \"name\": \"browse_website\",\n        \"args\": {\n            \"url\":
      \"https://www.nobelprize.org/prizes/physics/2010/summary/\",\n            \"question\":
      \"2010 Nobel Prize in Physics winners\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command browse_website returned: Answer gathered from website: announcing
      the winners of the 2010 Nobel Prize in Physics, which was jointly awarded to
      Andre Geim and Konstantin Novoselov for their experiments with graphene, a two-dimensional
      material.\n\nLinks: [''Checking the proxy and the firewall (https://www.nobelprize.org/prizes/physics/2010/summary/#buttons)'']"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5130'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xTS2/bMAy+71cQvPSiBEnTZqtvOwxb98IO6y7LECg2bbOxRUNi4mZB/vsgx0na
        bMV22E0Qqe8lcoucYYJpaTWtm2rw8mO7KG+W04rK0df7YlHot9aV+fv13Zd3hAZlcU+p9i+GqdRN
        Rcri0GDqySplmIynr66vplfXlzcGa8mowgSLRgeT4fVAV34hg9FkNEaDq2ALwmSLjZe60bnKklzA
        ZDyeTAyewI+Fy8nIoIra6tQ7mU52BtNSOKWAyfct1hQOwF4qwgRtCBzUOo0yxSm5aGE7cwAAM9RS
        VkWpYYYJ9Jd9gR40Xs7wFkq7Jshl5TLQkoBdLr62UR7cgiPKhvBZ2v4MKtB6VgLWeLaQc0VDuIWW
        qwpWgTqQi65nrjKP5QtIpa6t615nAlpyGM7QPFbkyQZx7Ionsv4syIDtxT7Hw6ErLygotHYTeUPE
        eyL6TEFTWbcnH8Dd333sU4hNLTtHPlyAszUFAzbPueI4MrByvCYfWDd7zRmHVNbkN8/LSD0rpxzq
        QxCH2Gu7JAgrH0mtxsSPCh5HpNJdRWhIxXtKtdqck4SG7PJA8K8/9x8d77XszGFQe5bf5jTi72U+
        kXXmxvrifMT3hdh7grgcjUdzJwuq5o3nnzTvbQw1LoM5f3zakdcu8wRvievO0gdx3c6xg8+ylkCV
        rA3cHY2D5PDJurSkoOQNvHloyHNNTgO0rCUU3jYlOTJgQVsZZLEYWJytoLZKnm11DKkLqs9r5na4
        M5iz41DO9yuDCQaVBg2yy+gBk9Hux+7FLwAAAP//AwAQLSbk/wQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf863fb3b5a233f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 16:35:49 GMT
      Function-Execution-Id:
      - e9uhe6wl1iyy
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '20153'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8dac3e665b169f903b7ac4d38c15606f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85987'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.674s
      X-Request-Id:
      - 70778c354fae1532bd37408e7945b48d
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Get-PhysicsNobelPrize, An autonomous agent that specializes in physics history.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write to file the winner''s name(s), affiliated
      university, and discovery of the 2010 nobel prize in physics. Write your final
      answer to 2010_nobel_prize_winners.txt.\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. browse_website: Browse Website, args: \"url\":
      \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to find out who won the
      2010 Nobel Prize in Physics and write their names, affiliated university, and
      discovery to a file. I can start by searching the internet for the information.\",\n        \"reasoning\":
      \"I need to gather information before I can write it to a file. The internet
      is a good place to start.\",\n        \"plan\": \"- Use the ''browse_website''
      command to search for information on the 2010 Nobel Prize in Physics.\\n- Use
      the ''write_to_file'' command to write the winners'' names, affiliated university,
      and discovery to a file.\",\n        \"criticism\": \"I need to make sure that
      the information I gather is accurate and that I write it to the file correctly.\",\n        \"speak\":
      \"I will search the internet for information on the 2010 Nobel Prize in Physics
      and write the winners'' names, affiliated university, and discovery to a file.\"\n    },\n    \"command\":
      {\n        \"name\": \"browse_website\",\n        \"args\": {\n            \"url\":
      \"https://www.nobelprize.org/prizes/physics/2010/summary/\",\n            \"question\":
      \"2010 Nobel Prize in Physics winners\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command browse_website returned: Answer gathered from website: announcing
      the winners of the 2010 Nobel Prize in Physics, which was jointly awarded to
      Andre Geim and Konstantin Novoselov for their experiments with graphene, a two-dimensional
      material.\n\nLinks: [''Checking the proxy and the firewall (https://www.nobelprize.org/prizes/physics/2010/summary/#buttons)'']"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I have found the information I need. Now I need to write
      it to a file. I will use the ''write_to_file'' command to do this.\",\n        \"reasoning\":
      \"I have the information I need, and the ''write_to_file'' command is the best
      way to save it to a file.\",\n        \"plan\": \"- Use the ''write_to_file''
      command to write the winners'' names, affiliated university, and discovery to
      a file.\",\n        \"criticism\": \"I need to make sure that I write the information
      to the file correctly.\",\n        \"speak\": \"I will use the ''write_to_file''
      command to write the winners'' names, affiliated university, and discovery to
      a file.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"2010_nobel_prize_winners.txt\",\n            \"text\":
      \"Andre Geim and Konstantin Novoselov, University of Manchester, Experiments
      with graphene, a two-dimensional material.\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6367'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSQY/TQAyF7/wKyxcuaZVuN91VbkigZQWChStFq+nETWaTeMLYbbdU/e9oklRF
        RajHseXn73neAV2BOdrKqG27ZnL3eWfv3t3YIn1/9z2r6df86/zjp2/sHl7qR0zQr17I6jgxtb7t
        GlLnGRO0gYxSgflscZ/dLm6zLEuw9QU1mGPZ6WQ+zSa6CSs/SefpDBPciCkJ8wN2wbedPquviQXz
        2W2aJXgWPzcW8wTVq2nOpWxxf0zQVt5ZEsx/HLAlOQkH3xDmaEScqGGNmJ6VOFo4LBkAYIla+U1Z
        qSwxh7E4NuhVY3GJj1CZLcHIRAVoRaBG6ik8ws41DbDfAXFsOAEhEed5usTkb71ARjw7Lq+IRk0j
        ULotcQKmV6VAYAIBe1hvQnyDY9GwsfFEcrmqawwPWybw4QqWDU6dddKesJgijIfW1ASyCQRaGYX/
        81ofAllt9iOs0b63dg1BZQRWRAxitlRc7paOTH3tHH4Nu8jIZV/bOWYK8hbYtCQJmPXaNS6GDzbs
        thTE6X64W+HE+i2FfdSIszfpLIUvfkUNPAX3m8AxPFV7cVaiY9MzX/vUwcAxOQXI+rY1XPyTn8g3
        eCsoWno2JbFeXMCE8jJ5Q6Om/TD8QDoZGXvyHvxE0ZOMQEs+4jHBtWMn1fOQNsxR1HeYoOOCXjFP
        jz+Pb/4AAAD//wMAp8spfvgDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf8649c98c52c78-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 16:36:09 GMT
      Function-Execution-Id:
      - e9uhx46563cj
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14925'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 39c7eafb48f90f67860a8814e6e4bbe4;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85990'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.672s
      X-Request-Id:
      - 018760a2cd5305dfd0f6c61ba4334e8a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Get-PhysicsNobelPrize, An autonomous agent that specializes in physics history.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write to file the winner''s name(s), affiliated
      university, and discovery of the 2010 nobel prize in physics. Write your final
      answer to 2010_nobel_prize_winners.txt.\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. browse_website: Browse Website, args: \"url\":
      \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to find out who won the
      2010 Nobel Prize in Physics and write their names, affiliated university, and
      discovery to a file. I can start by searching the internet for the information.\",\n        \"reasoning\":
      \"I need to gather information before I can write it to a file. The internet
      is a good place to start.\",\n        \"plan\": \"- Use the ''browse_website''
      command to search for information on the 2010 Nobel Prize in Physics.\\n- Use
      the ''write_to_file'' command to write the winners'' names, affiliated university,
      and discovery to a file.\",\n        \"criticism\": \"I need to make sure that
      the information I gather is accurate and that I write it to the file correctly.\",\n        \"speak\":
      \"I will search the internet for information on the 2010 Nobel Prize in Physics
      and write the winners'' names, affiliated university, and discovery to a file.\"\n    },\n    \"command\":
      {\n        \"name\": \"browse_website\",\n        \"args\": {\n            \"url\":
      \"https://www.nobelprize.org/prizes/physics/2010/summary/\",\n            \"question\":
      \"2010 Nobel Prize in Physics winners\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command browse_website returned: Answer gathered from website: announcing
      the winners of the 2010 Nobel Prize in Physics, which was jointly awarded to
      Andre Geim and Konstantin Novoselov for their experiments with graphene, a two-dimensional
      material.\n\nLinks: [''Checking the proxy and the firewall (https://www.nobelprize.org/prizes/physics/2010/summary/#buttons)'']"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I have found the information I need. Now I need to write
      it to a file. I will use the ''write_to_file'' command to do this.\",\n        \"reasoning\":
      \"I have the information I need, and the ''write_to_file'' command is the best
      way to save it to a file.\",\n        \"plan\": \"- Use the ''write_to_file''
      command to write the winners'' names, affiliated university, and discovery to
      a file.\",\n        \"criticism\": \"I need to make sure that I write the information
      to the file correctly.\",\n        \"speak\": \"I will use the ''write_to_file''
      command to write the winners'' names, affiliated university, and discovery to
      a file.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"2010_nobel_prize_winners.txt\",\n            \"text\":
      \"Andre Geim and Konstantin Novoselov, University of Manchester, Experiments
      with graphene, a two-dimensional material.\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I have completed the task. I will now end this session.\",\n        \"reasoning\":
      \"I have completed the task I was given, and there are no further instructions.\",\n        \"plan\":
      \"- End this session.\",\n        \"criticism\": \"I need to make sure that
      I have completed the task correctly and that the file has been saved.\",\n        \"speak\":
      \"I have completed the task of writing the winners'' names, affiliated university,
      and discovery of the 2010 Nobel Prize in Physics to a file. I will now end this
      session.\"\n    },\n    \"command\": {\n        \"name\": \"delete_agent\",\n        \"args\":
      {\n            \"key\": \"Get-PhysicsNobelPrize\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command delete_agent returned: Error: invalid literal
      for int() with base 10: ''Get-PhysicsNobelPrize''"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7381'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SST2/bMAzF7/sUBC+7KEHa/Ct8XLFDh6ErtsOALUWhyLStxaZckU6aBf7ugxIX
        GToMOYoEH3+Pegf0OWboKquuaevR8vPOfftw+2P73X5y+/uvu9w+F/Ll9nlxqzM0GNa/yOkwMXah
        aWtSHxgNukhWKcfsanEzny1m8+XCYBNyqjHDstXRdDwfaRfXYTSZTq7QYCe2JMwO2MbQtPqkYUMs
        SeB6bvAsfm7MbgxqUFufS8vltDfoquAdCWY/D9iQvArHUBNmaEW8qGVNmIGVOFk4rBgAYIVaha6s
        VFaYwVAcGvSiqbjCO6jslmBgohy0IlArmzHcwc7XNXDYAXFqeAEhER94vELzt14kK4E9lxdEk6YV
        KP2W2IA9qlIksJGAAxRdTG/wLBo7l04kb1e1teXTlhF8vIDlolfvvDSvWEwJJkBjNwTSRQKtrML/
        eV2IkZzW+wHW6rFX+JqgsgJrIgaxW8rf7paW7ObSOUIBu8TI5bG288wU5T2wbUgM2KLwtU/hg479
        lqJ43Z/ulntxYUtxnzTS7PXkagL3YU01PET/m8AzPFR78U6SY3tkvvSpJwO9eQ2QC01jOf8nP4nv
        5I04fxrm3xzAxvIUvH5QXXGPvcHCs5fq6RQZzFA0tGjQc04vmE36x/7dHwAAAP//AwC0khrEvQMA
        AA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf86523ab327f8c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 16:36:32 GMT
      Function-Execution-Id:
      - e9uhravz5pgr
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15424'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1777adb78b5946e2f3f19287ec65e725;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85996'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.669s
      X-Request-Id:
      - d860312168fe1bb3cafe313499f22277
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Andre Geim
      and Konstantin Novoselov, University of Manchester, Experiments with graphene,
      a two-dimensional material.\"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized
      as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '358'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOy07DMBBF93yFNWunSmiTgrcIqRKwAcGGosp1po2p4zGeSR+q8u+oEo/tubpH
        5wy+BQOus+L6FIr548GFh8WQ7k6nt6/Fc5Wr/Wx3P7xc+6YGDbT+RCc/j4mjPgUUTxE0uIxWsAVT
        NTf1rJnVt7WGnloMYGCbpJhO6kKGvKainJYVaBjYbhHMGVKmPslKaIeRwTSlhn/1H65qDUJiwx+Z
        16MG15F3yGDez9Aj/zozBQQDltmz2CiXQoqC8VK/hNfo95jZy0nRRj3Z6DpkwawyMtrsOsysHMV2
        cKLwmDD7HqOwOnjp1Dbb1GFEraySAxXtZWRP0QbVW8HsbZgsAUYNGx89d6uMlimCARZKoMHHFo9g
        yvFjvPoGAAD//wMA1YkzGIUBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf8659a6f04296e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 16:36:37 GMT
      Function-Execution-Id:
      - e9uhotbu0kxg
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1676'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f199c34292ec416def92b8b506691780;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89440'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 373ms
      X-Request-Id:
      - 2b4a5db4e9341117cf366368c2cb275a
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Andre Geim and Konstantin Novoselov, University of Manchester,
      Experiments with graphene, a two-dimensional material."], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '196'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf865ae4c3de27b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 16:36:39 GMT
      Function-Execution-Id:
      - e9uh2265u4lr
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '255'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9fa4559557ce4fabf375d7902934c3be
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 71f7e8377ad41519dbf8a4fd269f8239
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "\"University of Manchester researchers conduct experiments with
      graphene, a two-dimensional material.\"", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '180'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cf865b8fa7922f4-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 16:36:40 GMT
      Function-Execution-Id:
      - e9uhhvlcit97
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '68'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 798de106e8aa34648815a275367f2f4c
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 0b92749ccfacfff10a465860925461e5
    status:
      code: 200
      message: OK
version: 1
