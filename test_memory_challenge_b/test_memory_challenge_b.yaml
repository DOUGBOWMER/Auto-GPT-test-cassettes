interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4RSS2/bMAy+71cQPNtBjDRN5ltvLQZ0h24rsHkIFIm2tcqSJ9Fr0sD/fVAcp4NT
        dNePj+9BHlArzFHWgmXTmnR1//nPy/fb7cPNx0fL9Scy39rr9f2DN7ePChN0218k+TQxk65pDbF2
        FhOUngSTwjy7Xi/XWba6WiXYOEUGc6xaThezZcqd37p0vphnmGAXREWYH7D1rml5w+6JbMB8tcgS
        fN19xrPlIkF2LMwZWq+v+gRl7bSkgPmPAzYUxrXeGcIcRQg6sLAcRTrLZKOBQ2EBAArk2nVVzaHA
        HE7gqUA7jmCBdxBq1xkFgYVn2O7Bk1DaVsA1gbaBfSej1LDJZrxjKLUh6MLYEbs3R0y6phFWzQpM
        /qXyJIKz2lYD35eaoNQ+MASmFnQAdtBZRT76UBesEMHnWnBs9fS7054UuBIamjK1RtiBJIWvgd6W
        F+ki+J69orAp3Fhh9i/0tiBFTL7Rdihb2g12wkSR9Jq11KEZs7ZERwVkQ+fjsGC4g7IzZv9uCFsq
        nSdovZNEw3XchHqaRmhJPI28z9qY/1/4aH5W4LCmT8Y3OkV38UVWNDQwnGOeiBC+mj7fUIi9r+OX
        dxhFHIWc9BS2xz7BUlsd6s3wV5hjYNdigtoq2mE+73/2H/4CAAD//wMATmXVM/sDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1980fcbe176332-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:02:41 GMT
      Function-Execution-Id:
      - ggzhal5k5r2p
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14111'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9f23ee52b7c9b5187692c8ed925c3b34;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86496'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - 18d48277fc6c1840f58ba01b5995c8c8
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This task_id is 1111 nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the task_ids into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2391'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0RPS08CMRC++ysmcy4bFuRhr8REPUA0nDSGlHaWrXQ7m3ZWSMj+dwOi3CbffM8T
        eocabW3ENm0YzJarw/P71D+t1m+5sotcravHxWuVZuOXDhXy9ousXBWF5aYNJJ4jKrSJjJBDXU7n
        k3lZzqZThQ07Cqhx18pgXEwG0qUtD4bjYYkKu2x2hPqEbeKmlY3wnmJGXd7PRwpv5v+P0YNCYTHh
        Rp2UZa/Q1uwtZdQfJ2wo//kmDoQaTc4+i4lybslRKJ4XGBCT9yAMh+SFwIRwQTbeZfBRGAxUPhBY
        EwI54E7aTgo5CpjoQGqK0GU6H7+6a2ECy01joitgyVB1SWpKcMk9CnACHytOjTkvA5+hTfztHbkC
        e4WVjz7Xm0Qmc0SNWbhFhT46OqIe9p/93Q8AAAD//wMAeWovQLMBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d198171e89b1046-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:02:48 GMT
      Function-Execution-Id:
      - ggzhplzz2rq3
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2663'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4e3f62a04df874562d0c3f569e92bb9a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88930'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 712ms
      X-Request-Id:
      - adcc0acd647a4098584170cbbbc28456
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This task_id is 1111 nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the task_ids into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2229'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AP//AwAFJxVO5yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19818bba12e271-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:02:50 GMT
      Function-Execution-Id:
      - ggzhqad3twt1
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '206'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4135e04109ea570054f75c67b614634b
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 3edd3d8dfcab4708b42c0b28b2a40221
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task to write all task_ids into a file called output.txt and
      then use the task_complete command. No further context or information is provided.",
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '222'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        //8DAFIO77PjIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1981944d6a115a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:02:51 GMT
      Function-Execution-Id:
      - ggzh7yml1dg4
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '24'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - baeead626b2ffc20ac6498dab1e54e28
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 8e263b35dd882ea777514207a6f74733
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      task_id is 1111\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the task_ids into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6483'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        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
        AA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19819f19a110d3-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:04:19 GMT
      Function-Execution-Id:
      - ggzhtiwrby0h
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '85741'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - dd4196e26a04482edfcec90c1e71c30e
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86905'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.063s
      X-Request-Id:
      - a5f71f72f94d037eeef3de47395805be
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are now the following python function: ```# This function takes a JSON string
      and ensures that it is parseable and fully compliant with the provided schema.
      If an object or field specified in the schema isn''t contained within the correct
      JSON, it is omitted. The function also escapes any double quotes within JSON
      string values to ensure that they are valid. If the JSON string contains any
      None or NaN values, they are replaced with null before being parsed.\ndef fix_json(json_string:
      str, schema:str=None) -> str:```\n\nOnly respond with your `return` value."},
      {"role": "user", "content": "''''''{\n    \"thoughts\": {\n        \"text\":
      \"I need to append the task_id to the output.txt file and then complete the
      task.\",\n        \"reasoning\": \"Appending the task_id to the output.txt file
      will ensure that I have a record of the task_id. Completing the task will allow
      me to move on to the next instruction.\",\n        \"plan\": \"- Use the append_to_file
      command to append the task_id to the output.txt file\\n- Use the task_complete
      command to complete the task\",\n        \"criticism\": \"I need to ensure that
      the task_id is correctly appended to the output.txt file before completing the
      task.\",\n        \"speak\": \"I will append the task_id to the output.txt file
      and then complete the task.\"\n    },\n    \"command\": {\n        \"name\":
      \"append_to_file\",\n        \"args\": {\n            \"filename\": \"output.txt\",\n            \"text\":
      \"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\"\n        }\n    }\n},\n{\n    \"thoughts\":
      {\n        \"text\": \"I have appended the task_id to the output.txt file, so
      I can now complete the task.\",\n        \"reasoning\": \"Appending the task_id
      to the output.txt file will ensure that I have a record of the task_id. Completing
      the task will allow me to move on to the next instruction.\",\n        \"plan\":
      \"- Use the task_complete command to complete the task\",\n        \"criticism\":
      \"I need to ensure that the task is correctly completed before moving on to
      the next instruction.\",\n        \"speak\": \"I will complete the task.\"\n    },\n    \"command\":
      {\n        \"name\": \"task_complete\",\n        \"args\": {\n            \"reason\":
      \"Task completed successfully.\"\n        }\n    }\n}'''''', ''''''\n{\n    \"command\":
      {\n        \"name\": \"command name\",\n        \"args\": {\n            \"arg
      name\": \"value\"\n        }\n    },\n    \"thoughts\":\n    {\n        \"text\":
      \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\": \"- short
      bulleted\n- list that conveys\n- long-term plan\",\n        \"criticism\": \"constructive
      self-criticism\",\n        \"speak\": \"thoughts summary to say to user\"\n    }\n}\n''''''"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3802'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        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
        CwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19a24fdd182abe-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:26:44 GMT
      Function-Execution-Id:
      - afqwhice26m2
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '91678'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - deecc590bb5764a85183d6689150aabb;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89107'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 595ms
      X-Request-Id:
      - cf960b6ee06d81302664b6cf400bbe53
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=''{\\n    \"thoughts\":
      {\\n        \"text\": \"I need to append the task_id to the output.txt file
      and then complete the task.\",\\n        \"reasoning\": \"Appending the task_id
      to the output.txt file will ensure that I have a record of the task_id. Completing
      the task will allow me to move on to the next instruction.\",\\n        \"plan\":
      \"- Use the append_to_file command to append the task_id to the output.txt file\\\\n-
      Use the task_complete command to complete the task\",\\n        \"criticism\":
      \"I need to ensure that the task_id is correctly appended to the output.txt
      file before completing the task.\",\\n        \"speak\": \"I will append the
      task_id to the output.txt file and then complete the task.\"\\n    },\\n    \"command\":
      {\\n        \"name\": \"append_to_file\",\\n        \"args\": {\\n            \"filename\":
      \"output.txt\",\\n            \"text\": \"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\"\\n        }\\n    }\\n},\\n{\\n    \"thoughts\":
      {\\n        \"text\": \"I have appended the task_id to the output.txt file,
      so I can now complete the task.\",\\n        \"reasoning\": \"Appending the
      task_id to the output.txt file will ensure that I have a record of the task_id.
      Completing the task will allow me to move on to the next instruction.\",\\n        \"plan\":
      \"- Use the task_complete command to complete the task\",\\n        \"criticism\":
      \"I need to ensure that the task is correctly completed before moving on to
      the next instruction.\",\\n        \"speak\": \"I will complete the task.\"\\n    },\\n    \"command\":
      {\\n        \"name\": \"task_complete\",\\n        \"args\": {\\n            \"reason\":
      \"Task completed successfully.\"\\n        }\\n    }\\n}'', type=''ai_response''),
      Message(role=''your computer'', content=''Command append_to_file returned: Text
      appended successfully.'', type=''action_result'')]\n\"\"\"\n"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3424'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3SPQU8CMRCF7/6KZs5lswsi0JvGhKCGaMJFxWxKO0Blt1O304gh/HfDCsrFwxwm
        731v3uzAWVBg1ppNHarOYPp49zKYPQzTOOC4Zz/0zXRw+4zu+v4pBwm0eEfDRyIzVIcK2ZEHCaZB
        zWhBFVfD/rDodfORhJosVqBgFbjTy/odTs2COnkvL0BCinqFoHYQGqoDl0wb9BFU0e2OJPyF/wqX
        XQlMrKsz66DYSzBrcgYjqNcd1BhPuQ1VCAp0jC6y9nxoSZ7RHz6YiE8dxbF1JuZ+7idCh4DeohW8
        RsE6bkpnBVO7UuKQOOMti6WrUKTo/KpVfqiSqWwFQ3WtvRWHOX5xlnjGtQdOjhOWidn/kQ1yajxa
        MYcZbvmvb0zGYIzLVFVf2RxgL2HpvIvrskEdyYOCyBRAgvMWt6Dy/dv+4hsAAP//AwC0yw6b/wEA
        AA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19a4acafe6e273-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:26:53 GMT
      Function-Execution-Id:
      - afqw2vpujymu
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4425'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2c8a18236ee7dc7ce1104d94717cc1de;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89187'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 542ms
      X-Request-Id:
      - a3e73289ab3423d6bbdac43883144bf5
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. \n\nI appended
      the task_id to the output.txt file using the append_to_file command and completed
      the task using the task_complete command. The append_to_file command returned
      \"Text appended successfully.\""}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"I should
      start by reading the instructions_1.txt file using the read_file command.\",\n        \"reasoning\":
      \"The first step is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will start by reading the instructions
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      task_id is 1111\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the task_ids into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6691'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        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
        wdsIAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19a4d10a40e178-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:28:07 GMT
      Function-Execution-Id:
      - afqw9n3nl8yl
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '72562'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - fcaec18b5977c3b3138bb86e9c99272e
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86893'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.071s
      X-Request-Id:
      - 2e8d9e7cf5e789e1a3201b597b7393ae
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. \n\nI appended
      the task_id to the output.txt file using the append_to_file command and completed
      the task using the task_complete command. The append_to_file command returned
      \"Text appended successfully.\""}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"I should
      create the output.txt file and write all the task_ids into it using the write_to_file
      command. After that, I can use the task_complete command to complete the task.\",\n        \"reasoning\":
      \"It is important to keep track of all the task_ids and write them to a file
      for future reference.\",\n        \"plan\": \"- Use the write_to_file command
      to create the output.txt file and write all the task_ids into it\\n- Use the
      task_complete command to complete the task\",\n        \"criticism\": \"I need
      to ensure that the output.txt file is created and all the task_ids are written
      to it before completing the task.\",\n        \"speak\": \"I will create the
      output.txt file and write all the task_ids into it using the write_to_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: Error: File has
      already been updated."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5824'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5yS3W7bMAyF7/cUBK+dID9LmvgBhnUbtgLrejMXgSIzthZZMkQKSRb43QfXTtKl
        6ID1liKPvkOeI5ocU9SlEl3VdnDz9e5z/BJrmT18nP2e3+0+fHr/bRrvRw/b5QwT9OtfpKWfGGpf
        1ZbEeIcJ6kBKKMd0PF/MFuPpZDlJsPI5WUyxqGUwHc4GEsPaD0bT0RgTjKwKwvSIdfBVLSvxW3KM
        6fhmNknwIn55mC8SFC/KXkrLyahJUJfeaGJMfx6xIj4JB28JU1TMhkU5aTG9E3KthWPmAAAylNLH
        ohTOMIW+2D/QXtpihvclgY9SRxnKXmBjLEGpGJQNpPIDrIkc9BsA5XLYBSNCDsQP4Ra0chCZQEoC
        Ubxd9eYItK+qtl88nGunrmGGyXOcQIq9M67omL4bp7vmN5Il7XAgMAzOgyPqMJ56wQioQhl3wmdT
        1fbwEhIiG1e87uzaRG2V6/gH8OO/V3IlpoMRow1XneLt2QQ5jqEdU/KPHwy3V8lB+xBIiz08Lejs
        zPAZIAeOWhPzJlp7uPbENantCWFnrH3bsTvJJjnlsm9/EUunKup++0v+CkqF4jrRz2PU57r1+arJ
        y2TTs2WuwSbBjXGGy1WnhCmy+BoTNC6nPaaj5rF59wcAAP//AwDjBxSNWgQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19a6b36f9c1257-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:28:25 GMT
      Function-Execution-Id:
      - afqw45ysv9vr
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '13617'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 5a1e3b9379bf4761b38ea1bee7fd1d74;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86173'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.55s
      X-Request-Id:
      - e1afc0b6f6206b417d1ce0af11fdfab3
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1241'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOTUsDMRRF9/6K8NaZMuPYD7MTXCgVdVNbFCmZ5HUmmuQNyRuslPnv0qJ2d7nc
        c7gHcBYUmE6zCb0v5o/PDzfLdHu33lza9bDB7+vXZfbt/dPLagUSqPlAw7/ExFDoPbKjCBJMQs1o
        QVWzxXRR1XW5kBDIogcFbc9FPZkWPKSGirIuK5AwZN0iqAP0iULPW6ZPjBnU/KqUcHb/99VMAhNr
        f15OZ6ME05EzmEG9HSBg/rMm8ggKdM4us458/EiRMR7/a+EptiJzcrEVtBNJR0tBmE4nbRhTFjpa
        EYfQHPOX405EEtZlgym6xqMIqOMJTuLk3fMERgk7F13utgl1pggKMlMPEly0uAdVju/jxQ8AAAD/
        /wMA8tPF2XYBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19a71a8dd522c2-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:28:30 GMT
      Function-Execution-Id:
      - afqwimqruhk8
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1705'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b0f87309b0fea0c647b7686fc6442c2c;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89218'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 520ms
      X-Request-Id:
      - 5ecdcc69bd8d8e57c79e4f8922cfd297
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61"],
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1079'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        //r83n/+6/8BAAD//wMAkeWFCuUgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19a72d4c3c2d94-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:28:32 GMT
      Function-Execution-Id:
      - 5c6oq8oc6mxz
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '445'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - efcf87688e3c4960dde4dcdb7cac9c40
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 52eb3eb345887179bb61791ac919604b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a long string of random characters and numbers with no discernible
      meaning or context.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '163'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1R62w6yyrbm/XqKmXlrr4iI1GDeIedjlQoqdjodUFRARA5VQO3sd9/Rv7O7+8bE
        ohIQR32nMf7jX3/99XeTlfl1+Pufv/5+Ff3w9//4rt3SIf37n7/+57/++uuvv/7j9/n/7czrLL/d
        ivfjt/13sXjf8unvf/4S/nvl/27656+/ixxRZuah0E1r0cWI3JqKqcqN+pO1GK5oR8crC/eXouNV
        RQ5Ql8aOhYnXc355JSJCuxJReJ68aHwX1wLxSD7h5cZecxp8NhZUWeWSmy3hbhRN6SDT1LkT1/J3
        mbD1RgFWj4ZTyIiGxnh/iGF2NIHKh49ZTucEclg+VzFxUGr5sy2nC7At9cKSTbzMpjA9OaCsGk6M
        oXKQ0DIDoDJXGwoamfn80eUYVq+Ny0zOE3+OxuYk7ytEmQVoF42fzauFRXczqeGqAV8rqKkgSEWJ
        wva188d+Pzco7GAkdtK35TyuGk/GQdET9antdZ7BcwHz43YgjqxN2WeqTQwJH2/MkM9tNwduhkHy
        1S1LGTUjvq3GAiGzJ+QE+6GcBL65AjYan5mDfUPMXgUNGHUqYHhoBu8Vsd1Jm+qcUtker3yM66wH
        w+lVduwMs5s2UgJQ5BtKgmuTZLxIDi3gIGK4i8HI1vv8UwPy4EUCbbPqGuP82SHrrriEtOt9NF3f
        0KCljkoMS8bKUeZ5j05UerKbjTvEdHAbOI4wseAez2XniGqupHZUMiOTV7wX000DG1cXCJZk1Z/x
        ozqBerjtSMrUKOstOqfKTC2duIqu6eNhE8aQZbuSUimg/nA8VVS5FXOL53Msld1p+IxgraYrXaQX
        0KdDrjQozw3C3Eaf/SndlcWmeB88jDbXvT7ShgCah7VFrGWZRcMCxlxxbGdPzvV664+vFXZQEV80
        5stWhGbv5jQQHM8vgmfmZqNVXSgaNseaeHsUlf3FvzjgEHUm5PQpuu4TfzDKskNJsBO+9Hn2Vw9w
        lVXOfK3B3VQmtId4wAOW1LrkcxJ/FtBdYMGC1u39wX1GjrLZJzv6Xg2ZPz1OOcBT7DE5FUWL5o3S
        xehjD5i5pBF4YZauCLHt53ilFs9sKmUnRVnSJox41zhq/Dx5gPF0cuJlVzvjK0cEFNY0ZXgH53Jq
        mraHPkw0EuFZQb/3I2NNU4lzEj29Z3lpbAy1LjB0t6nkXnAT5ebsHiioIYr66TGLSyWtPGLntNDn
        6phooN6CDZY/zaIbwjT3EKxTnZAg7/0RfSZBATc8Mj8/XkrmFZEq101c49W7vfizJixbtInVDH/x
        IZvSuqHIqdYm0ct5QDNaLHcQUabitTtvsx68twysaQNiC5dVyR/b7QNmr1kyco5eUR/v8gLu1TVn
        RjSdeH03rxoMm6okl/PE0Yzut0D2SRCR4zHXfBafdo2ycXcTs47dBvF6f2xgr+xcuqBd6s/G2k5g
        v11UuF6QFRpi0Zrhvbnm7Hhd3Xm7gXeBzGuuE9JsPv4knZY7dDx2Pl59r/N6f2vBftoaMW/lHg3t
        /QaolBKNXIuWIU4QkuG4iF/EOQV2NtnL5wG4cD0wd/Y2ETftxQm2phyTEH8kPvYwYfjVg5VkZddv
        42MPo7oeiP70CsS75VKWTsJtTbZ3ueh4IY0PxE+PJztwV/N5EYiOkmS2RuXn/d7Ne5pUsLTGjlmk
        mqM2WMxXWJW7BV7xtZ1xucxaIIpSEv+2FfRRTKcGWlNZ4Kl4K11fRNcTGH7sU+XVPbre3T8M+Gi5
        RPfvIyuHazNe4a1OBnF0TDnbK0QAMwgtOgTdWNLhlmGk39wbsV/3PutfK8uDfZttmVmfonK0klUA
        wn2vELMzXt30QnEM+4CGeN7So97Thizk28O7k3CNaj4y99krX/xiRFMkn85a0sITLSrmv+eFP8zg
        JVBr+zMLaRrpU8P9FDJpeSb6Z3PMPvZKrdB7Ez4ZdkLTX0fLc4Uu+/sePwJrzIbljRZy4L0Rcx/V
        EfFT0iR/zp+Zh3E5b7jWouBGVXx0kdgNC3sfgJpWlG2p9/FHpd9WSJZZw+yIvNCws/sCKWntEWs4
        VxH7uAFFU3tSWfjq1G56ntMZnGVNmRaiMhqdzFjAbKYfpg7+zucg9zOYn43MHJTW+iRtFRm0YPsi
        WXzYduuLfAjgflr1WFRekT/lR12DLEo1oneoR0O75CKw8FQTp05Per8sQAC/4h8sr6ZbN3LJXyAa
        f4JvPV6iSVDyE5QGLIgRTSL/lJUfoG0dRsSw4kPUOyM+oWu8U8g5W0jRXOUgo9Tel3QUG6EbnufD
        CMwxduxq7L1uRPeLB357ABKGR57NtVrPkOyqE9tqKw1N9vJzQGdyvbFLUYeR4Jj2DO7O64h2Mopo
        itqDA7Xp3fEU6ftumEFLwCslSrSuNXlf3FYaciwUEywLF50PGullWCc6OxmuWYr6NlHRQF9A10vv
        3lFBr2p4hpP41RsFH0kgi7DLUExMziW/q9IihbqxP4Q0xIoEkXFVXj1aTgwq3P3pLJ0eMD96wkxQ
        rW6U+akHPR0JcyZCynFFbh5slieV+ZLTlWNcR1S52f2WZA476ZOS5SPEQSYQvHlE5Xw6pBj2c/Eg
        Vnrx+VjYawEClAjMjbMTomrsNhDsTgHb3qROp5vmCb/z+sWzC5/ax2VGtp7g7/kKso9WOwk0F37D
        4kJ58+m8SU+yKXtrhq8ZR3PqHwMQ/SEj1myd+Ph6OjVcoNwwDWqLjyWfA/lVVSVWrMeFN+i+d8DL
        s5Q4gan6K344j/DWL4RK9xeU468eNkJ9Zr/zz20PGxsjhBMJbnDjP7xGv+8HuSI6f79TEdodvDC3
        M1Ufd+spAXpBBVXMQIgYqecCTGsx4oVKHf5egvCAdBYsRqxz1U1bYieA5euNJBLt+OSXhawEKBXw
        84tHkzJFoPhB7ZDt5vOKBnedxNBOUYVfan7wqXbap8qqS69MzV59xr76DS1dd4PRdH5GzHRkBwYI
        KPEdM4o6fvApeidSQfxDkJbUTD4eKHfhwZL5XWWTFdWyLMebE8NVo+nTcy01cteLFvOv2aOj1TId
        0ap2LKadqOkLB3nrKcHtppNwvTf8KfIkAzLnkuHyOZ4i7j3PAXAhPJKtt2OcwnGMkZ54BnECVvBB
        G58GslLK6bpafUpW6JcDyKnbM2t7QXxej7IECWoWzBPvrJzVpYohz64Gc86PHrGiQPGvvkhw5Dkf
        kGE2ENtuzrRwr3ZztPNyeAQSYto5lrrhkK9aqInksF26t9AqZPcComwt4fXhpfuzuggSyPiwZV99
        56+XynhSzPlwIqFTq2hq78cFXJ/tTGVzjsubP9gzJJmpER/lTreGXavBY7iu2Xb1En3+Plxy5Epv
        h2yp4CMebCoH9Z0lYhm/TtG0c5oTCo7HF9Ou0y2abSbvYGM1NdlWg9Hxm3Nq4PZw7iyIS6ec0Khq
        sPm8RmIj/kRc3+sWerzqE+arZF8K/bwrYPTfJ1roY1/OLrQUAPcN2375j4/GOYfYTjIq5fuzPg/O
        RZQz8RgQe20SNC+KZpadamWywFIMtP4y70/PMP34PkdsnoYREtQu8PLay3wOIiRB3xkic2Jpi9b6
        1ADMHUZ088Nf8VieQD9cBGZEvp6tF3sFEF8sFnRVLRaoe+22FLT30cePR7z0pyGoTiANis8sLJOO
        F8HCQ+8FFZiefSgal2sRA3alJwlpyvXpy0cwbOqSuJ+sRlTY+CKUWsyZzk8bxDdhnoM0LH0WHEM/
        Wj37q4PqFqafPvAb4i9VeKvcIK4yGIhns7tDYWURunCfXjlXy8Os7ImZEWd8BXwevU/1w386dq6U
        zVi1rnAjdUG21ecYzWmwVyG1iwfldvbw5+c7FH/6mk6GhPwKPCaBq6xzqhx0M5u0tJTQMfNyvOxe
        ZdaXn0uBrBW/kq0DXja7iEoIXHKk/HHd8ckfyIz84OxjuUZlN2k7PUD07kokaPyS87Vo7uCZq5w5
        nu5kIlUmA+5VntM1aws0sTSp0N44z3hxVGs0B/ckhdf6OWAxrD1/2rLhAIl6vuB36C519jI/Kvr6
        S4JR4fsr/JJbmO71iW31u1mOL7Xogex2I7NZq3G+3WwkcNY0pPNXv62Sy7iDzdLWqeQuL343jntB
        eZ2WE+bp8ZMxKfAK5BvhgKcbdrLpwJcaTGeCWBgeo+xjKJcH6NJdJ8b7cvDn+bGQASZ5ZOGDQMnr
        +qwi9RgnzFTz2Z8X68KB48YidLlcP6ORn6kFCzW9kcB+2+XM8rf389NYqM2+HErj4wEE1o1+/UnE
        g7IGOETWFY+ntZzRm6Fa6KElhBzvr0/002dofF4+zFv5rc5/+HCUVgdmVHaVtbov9ajUTpwuXnhV
        ToHhiPB5tUsWNNM6m8SHoSHlqiR4x8J3yU/Dc4TysX0z5yNo3XRtxlxW05p+8afw50VQVoqQ6m/m
        7Y+qvzLgSOFjL3zidscl5/rb2YHp1oj+/k+qb3eq8tM/9tB0EfOkBMNcnlLK02Xv//QfdPcwJlu3
        HvxxSS8x9KFr/slH5iPEC6CH7ZZZYZFyfklHD6rFvGNbzVf1dUJXPcRMkIg23t5oOAiyCB+bYeJ2
        F+LzW54JSOqOKlOL9MVZaDr0D16rKXJLHpJnAqnndUybs53PH2IzopSBQiz7XnSTL/UHUFYtZzqs
        BzRjv13IwuoYEncUI1RSXX/A+Mw+eKKCz5melaPs1cXm66+O5XvFlQJ5z13JzOvqjuYV2Vo/Psbf
        esjYe0IPkDSpJNZZp91cb4ta+eYbNPf8IRuty0YDuxM65vNlEM0ne3ooejoT4r1fVjZNCFfAXafH
        cmK1WWtfFAt9/SL56d35NEsWQmWjEj8GI+LZ+1ErVtpz5qHwWc7HbG2hr7+j1AlNfY7QVpO/+PIH
        P3nXisVmmHqN3Y9o100+/hRypb7Ln7/K5i7zcxAzSIhnOhP64THqtfaCRdI8u1HvagFOwn1NuWiV
        3XCIY4B0iGfmuMuLPtX7S4W2HytjbrnQ9PVtMfUouYHHjOFx6dh+obfot/9+JqLPPk09grXDNlMf
        8VKvSi5jFOqPiOzRO+zGl7hdoJ8+/eo3NKFNL8O2FE3MGlJHEzLCRsYrbOPFC94dh4pV6BkVNjGi
        leXzm5O3SE2PE7Oj1Saa93RXKUa4ONEfHojDm0tAr2PLwibJOvYQmxnyjSMRdu1lxPlB72EQISHJ
        wZH8+Vv/MKW2Tsi1T3n3Mp8q2uSjQbLpvM0Ga/G6/viZEE1J9L4dnRmdLhkm9h49Mn5h0wNa0ENm
        9wunW0dtjtFXH3/zvTGbj5bSo6d43xOsUgfNrq3n8CgYpuP3PM+pfwvgIMmU4eu99EdzWFQyVqyG
        Tj9/653nGMUz3RJt0lFW19uiUr58+cWnd/k7f0hb1w49DecqY/fO2EHTqinRRUvvps7fpX/8E9Gi
        VTYs7AtGR0RTZuaoLsd+txCgJh8fJ5K6QXQWBQNZ6MDwk+W04476DP7kbSScp3IOhMuMfNtaYaS2
        dcaiYyyAV8qUaUvQ0XhpOYaULRQq7E3omstxEmG93gBzg9Nb5/uF38Iyl1yWffXktNhvJKTPyxHv
        I30qJ7aZW0WigcMuglz689xHKfyeVy2NpuOb4i5Acd6G+DXfDx2TN4mIDkk8Y/TVm9y0xRhWzTNm
        xp7jjr2vsweyPDRUtO9aOQ+3LECXfGX+8af8vqoAypbviOb7m3LaRVsVsCs/mZZzgX+OTzNBwbEq
        CAnFxzdPsheQH2Fi929+OG/e1AM3ObjE9q6GTr33J0btJtOouIhMfYpFPCNUtuo3Pzx0K3FJLRA3
        nwCvd6VfskRfez//+ofv0xv1RMBr8cDIl48oc4cZDgvXIGEisJLa1W2Gp2DoxEDdqDdbTxKhD32T
        uc1k6MPu+pJAkTcusR6VVs5F47boGXIRSxLt0OxeAwESMWnYdpfVHT+4D6zc2o/PAiHWUP8A35Hz
        RetTOaWriCuoqYEL5MhCq3L9dZh6BvTNtcPdBxfZuBV4DaoyrsjVOaXRJLYVhXzXZ2y7N91sg62k
        /sNX+mWrox5W9VU+D+6eBPF9E41je+7heJQdygUj0IcriCq0dSnTUtSEjH3xDZKNxglxUuCNfxBU
        pB8PQNztbRFx2LUqKjstJPZ+vfcnN7iMv3oj3rOkfF4M2xxWTnBkiWS4ulgJswV8Euxf3oSGxX6S
        AE6iTXTtk/PX5swNyCTl/M1DeUltck1AXOtbusKfpuzDR7OD3/3cUp55+8Vn2LPuTLZf/zU+pvYK
        Z6MXGO515vfv9VGG5+I4ExK/O3/sr1ksPYZQZu6yC/3m4u8dxXh6Oa2VF/fp2ho9ZH6QTIXnWe6a
        V/c5/Kn3yZPnbjaTp4P4qXhSpKplN76LuIB0OM1MfY26/s3XH6At8w8LiFXySTqtd2ha8zXmHQo4
        54p3gG/eTUwEZ79m7mv++UMqqbXOxed18JC4kV2M6HtdfvO5GG0foHz9WqWPB1o1YFvahXmXlKC2
        Q58YEWVZ0r41AfVhGzrwdJ6Pbx6G+ejNJwOMqOxxzdNrNqJ4vEJdWjumG+yFxg9+G7A+1wpxOsfR
        +Wy9MbpUpwtxg8OaT26HRJDHAFh8O7SIRi9fgHYhHUm+Tfzy8ctz1tdVxEjoYDQ3g2LAEiqFeF+/
        JAol/sMXuCeaUE55TAK5DK0rXX37PavWu9aQajuPWOvcL8dlsGzBo82ZxPLZ66atHAJap6HD8Lnf
        6ivrU1nop08y+j5302x13k/PEuytRr/7CP4Oyanf06kaqm4k/VWCvXGcme/wVzbh3WYHTfy0qSBd
        imzkQ7eDpx55Xz1ccH736kT+6jGM/GwXMS84CtCHqYaZuld+fhIAr4UDFr/vk5vXNYVLvaiI227T
        bEp3XSEX751HdGMboanUhxOIrr37o0/7bXuQ/vy+wyaQs1Hp3RrCz+nF7GjjdDNarA9oGehb5t/1
        ruQfzynQjx+3N+xEwnQ6ONC0Worrb543/Pwtn14eHVcx0ac2Xh2A8Oua6Gzv+X/y1G/eTqyLWWfs
        q7/hmDk52U4PKxMeb3dEvuIZLCjUwR+2srn4039RgzHSf/p78+NH502zbpr2ugDf/JByYxvxObl7
        DZw160O++Q2aE9e8wu3lSgzL2CxpJIcBFJcuoXU/bLu11/NeLguZMW81KSXzwksL6SuM6ULGZjcP
        13OCuN5d/viPmS1DFaxj+CCmr2CdjSxX0Qj+gXn4JUZDfi8pfPMMpr3rUzkny0ehcH9ck+vZj7pv
        v+YBGgg5Cx8K7n56F/KkAqZbA9U/Z7pp5KvwBrwJDmc0M3cYIZarAgt710eTj5+PP3o4NWehnL78
        DUg3DHbVNsdydPeN9eu34IdQ3/Q5MgZAbirH+NOan5L9/LWzbRd0IUtOJNrpKINyC47MyZeu37ej
        OsK0V17MvD9TfSxuigZb32vxrMh9ND3XYwPHhd1gbl6acizjnQdj/Vl+9d+mG/yLhkEzfIO4R96V
        /TuMHJjW05ppV//D5+jyjsHDVkYs5VNkU+M6LZpL+4bX/U7s5vV+JyBm5iYxB1tB4x7jGbmpFFNh
        eGzKdrjeExCuMiNOLD357F4NERzb2xPtnLzRrz8JuXrLiTnfD2WfncMZdb1gsd/zzPdKtCDVDh5d
        l7e4o+tXnsCqmfd0KWdKxrWUATrsrnt2/vLxKM3eiL79gh+ed+zn7z4tOuLF7iBwvufFAt586dPl
        tx81sWo6/PJ75mar0mdTluTAp7eHq43+0qfS+Dhgq7OOV1fyy9s+C/TFK0K+eplW7T5RStK/SZiK
        9q8/toDSIzHxvWko/+QFQzTuSSaPYtdGxgv+8KERrWp9yu8dBesgHuhiyko0m1jNQZzGDi+uWcTZ
        N9+HFzsFDAtOzpntWQb6+ili3Z1F9Kn3+0p5g/UhAU72fAjN6wiwNdfE3+E5mobw4YByFx80l6Wf
        316rf/rN9/JaZZ/mZgU/PGGXZTfonWbWldzFffPl+5LP61eeQmynGQvc9s55coETirZqSK5Eizsu
        rV0LLEWS8ZQFY/nzbxBGqwMLro2U8eqlG3/Osyk3U8eyfZnCZoKAeImG9MYx7RFKL9/T19dvz/tC
        sFA/sC3TA2/m06D5LQTeC7FAPqd8PFy6HbpkisKsJ35F3WhGB+Xv31TAf/7rr7/+12/CoG5u+es7
        GDDk0/Dv/x4V+Hd6S/8tCOK/mfhnEoH26SP/+5//M4Tw96dr6s/wv4emyt/93//8tZL/jBv8PTRD
        +vp/1//1vdt//uu/AAAA//8DAICb4hfjIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19a7354da322cd-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:28:33 GMT
      Function-Execution-Id:
      - 5c6o5mv39ncy
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '178'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 87e22517a37c5dc39c727b35faf426ee
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - f8bf9f317ef49a5dcc9ee73c1c5a05b0
    status:
      code: 200
      message: OK
version: 1
