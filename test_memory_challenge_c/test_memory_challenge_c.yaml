interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6ySTWvbQBCG7/0Vy5wlI2HsJLr1lkBSeqghUBWzWo2ljVczYndEHBv99yJLtotd
        Wii9zsf7PvNxAFtCBqbWYprWxXfPr9u9fv1aPJm0qIuXfRG+PC6fV93bYsUQARdvaGTqmBluWodi
        mSAC41ELlpCly/vFfPmQJIsIGi7RQQZVK/F8toil8wXHyTxJIYIu6AohO0DruWllLbxFCpDdzZMI
        LtrneLpMIxAW7c6h+4e0j8DUbA0GyL4foMFwkvXsEDLQIdggmmSAZBKkYYBDTkoplYPU3FW1hBwy
        NQWnBO5kCObwpAixVMLKoy6V1KgsBfGdGfjCOp3JTtTGOhxqShT0jSU8FhLuRBluGk1HhS7gLIfo
        VyOPOjBZqka3b3+QH/i1pXDDoKTWoi6gG3aO36+dWqdpNInVKoyAw0jrSfxM+bc5Z3lOsfpM2n3s
        8Tcw/7AF461YY0NzvXOk0Hk8DdhRiX445y2fMuw9GnEfqsANe1StZ4NYWqqu3UKLentyerfO/bfT
        ji59dPqvqeDmvUg3OAKcL3DFqH11/ZVjYqi9tN/yniCOIBNPTj30EWws2VCvx5eDDIJwCxFYKnEH
        WdL/6D/9BAAA//8DAEip/esUBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef47debcd722cc-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:03:42 GMT
      Function-Execution-Id:
      - ruh7ys8hr19k
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '16284'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e07af8f380a56e52a6130ed802a80b8e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86495'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - 07275d7a7c58feb9ff3a198bf118d04b
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2447'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPzU7DMBCE7zyFtWcnSvpLfeXAAbhWCISqxd40po7XsjeiUpV3RxGF3kaamU8z
        F/AODNgexQ4pVNvn1/Dk+/3epfUoMTxuH1z2uHIv3VsEDfz5RVaujdrykAKJ59mymVDIgWk39+vl
        ZtcsNhoGdhTAwDFJtazXlYz5k6tm2bSgYSx4JDAXSJmHJAfhE8UCpl3tGg03+L+xaDUIC4ZbdN22
        kwbbs7dUwLxfYKDyx80cCAxgKb4IRplXchSK8wNUguWkhNV39kIKVUlkfeetSn3GQspHYYWq84GU
        xRDIKR4ljVLLWRRGp6SnqAbMp1n98rCo63KqYdLQ+ehLf8iEhSMYKMIJNPjo6AymmT6mux8AAAD/
        /wMAqXlTGIUBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef4861bc9f2cf5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:03:49 GMT
      Function-Execution-Id:
      - ruh7e2y2ntfb
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2367'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - df19dc706682ec7b5e6a090c196359da;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88917'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 722ms
      X-Request-Id:
      - 31ca91c05fed1e9a47a04e80c9f558b7
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2285'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef487949518105-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:03:51 GMT
      Function-Execution-Id:
      - ruh7nmbtbk0m
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '751'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8d2b036a3c01c9a2cfebf6c5f8505fdf
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - b94219a04b506f17a6963cf6759be54f
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task to write a specific phrase into a file called output.txt
      and then mark the task as complete.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '176'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        DFTo4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef4885ed7f10c7-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:03:52 GMT
      Function-Execution-Id:
      - ruh7ntdnpq5c
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '113'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 53b42102dad890a670994ec9b3bd4fce
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 3eb08ed2e7d7a23347649d4de6a1dc05
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to read the instructions_1.txt file to determine the next command to
      use.\",\n        \"reasoning\": \"The instructions_1.txt file contains the instructions
      that I need to follow.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_1.txt file.\\n- Analyze the instructions to determine
      the next command to use.\",\n        \"criticism\": \"I need to ensure that
      I understand the instructions correctly before proceeding.\",\n        \"speak\":
      \"I will read the instructions_1.txt file to determine the next command to use.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6564'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xTTW/TQBC98ytGc3Yit25S8BVxQBSQoAgERtFmPYmXrGdXu2OSKsp/R47tuknb
        Qy9c3+x7+9587NGUmKOulOja28n1zQ/79fPd7fWXTx//KnPzoX6bVauflL1z31eYoFv+IS09Y6pd
        7S2JcYwJ6kBKqMT8Yv56ls3fpNlVgrUryWKOay+TbDqbSBOWbpJm6QUm2ES1Jsz36IOrvSzEbYgj
        5pdXaZbgKD4W0ssExYmyIzRPZ4cEdeWMpoj5rz3WFAfh4CxhjipGE0WxtDYdC3EbYV8wAECBUrlm
        XUksMIce7Au0kxYs8D0wUQniYBuMEEhF4KugIkUwLO4IuEZ8I1PZCayMJVBctjhDEzuGqLhZ9LkI
        tKtrxeW0wOThp4FUdGx43f18WxEYjhIa3fYCTPwvLrxV3BmYwLeeePx0IW5x1O2JL3MzLQoeBZ90
        0greY8Orc3s6GDHaxPp8PMSxCS1PyYkhFTr/QgzahUBa7N3zTVvSygUafBheP+skelKbwcXWWPuS
        2TRxkH66t/eze9SQB9Tn5tm5PCTDmveVR1vOqqYuwImJs5wqrM8PpCu0b0eJMeEJ//ye2q32TfCW
        gCz5SrFAqVhTCY5BQVCGl24L26ptB6njCBSI0q5doSHcMWCfs+ADHhJcGTaxWnRXhDlGcR4TNFzS
        DvP08Pvw6h8AAAD//wMA6o9RffUEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef4892e9c8110e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:04:15 GMT
      Function-Execution-Id:
      - ruh75mpot1qy
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '20475'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 94b8556983b950764d3291c801a3da9c
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86898'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.068s
      X-Request-Id:
      - 4eb35fceec5c8400877b301c79432e3d
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\":
      {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=\"Command read_file
      returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\\n\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3029'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2SRwY7bMAxE7/0KgmfHcBok2foH2gV2eyqKResiYCTGViOLgkRvsgjy74WMpF2g
        16Fm+Ia6oLPYohlIzRj9Yvv04nM4yvf1k9UvKX19jm+n188ve/7RH7FC2f9mozdHbWSMntVJwApN
        YlK22C43D+vV5lOzaSocxbLHFvuoi1W9XuiU9rJoVs0SK5wy9YztBWOSMepO5cghl4DmY4X/wv8O
        tpsKVZT8u6fbh2uFZhBnOGP784Ij53tuEs/YIuXsslLQQilBOZQGj3CiDDfqGh4hsWH3yhYIjIwj
        BQsqkJiKcnCewZD3bKFDF7KmyRS4vFvWetYOoRicQmKdUphjvIQesiYXepADKJ+1hm8D37UCQy5k
        IIhDoszQYRnHKUXPwJ7jQEHBUjBsQQIQJHJhLyc4DYWISUsQgZKRukN4fgNPylmBZry5pAqcklMG
        8h60LJi3ZTgkGWfhBuSCyn9lZdI46buSOnCAKfPs7FApH3e33+IO78er8VrhwQWXh11iyhKwxawS
        sUIXLJ+xba6/rh/+AAAA//8DANIqZX+DAgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef4931c9d10285-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:04:27 GMT
      Function-Execution-Id:
      - ruh7lb53eitr
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '7328'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0cc918ccd2872cae1ea745de45db2a73;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89263'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 490ms
      X-Request-Id:
      - 476f6c0b5b114a067e7e9cbc4f4f981c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I received a command
      to read a file called \"instructions_1.txt\" and it returned a long string of
      text. The string contains a phrase \"The purple elephant danced on a rainbow
      while eating a taco.\" My latest action was to write all the phrases from the
      string into a file called \"output.txt\" and then use the \"task_complete\"
      command."}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to write the phrases into
      the output.txt file and then use the task_complete command.\",\n        \"reasoning\":
      \"The instruction is to write the phrases into the output.txt file and then
      use the task_complete command.\",\n        \"plan\": \"- Use the write_to_file
      command to write the phrases into the output.txt file.\\n- Use the task_complete
      command to complete the task.\",\n        \"criticism\": \"I need to ensure
      that the phrases are written correctly into the output.txt file before completing
      the task.\",\n        \"speak\": \"I will write the phrases into the output.txt
      file using the write_to_file command and then complete the task using the task_complete
      command.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"The purple
      elephant danced on a rainbow while eating a taco.\\n\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4950'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6yS3Y7TQAyF73mKka+nVUrZQPIEi0ACiUUCEVRNJ24y2xlPNHbYoirvjkLSHwrc
        IC5jj79z7JMjuBpKsK0RGzq/ePn2U1g1vnizzj6/MxKKh929vX8ssj1+KEBD3D6ilXliaWPoPIqL
        BBpsQiNYQ7nKX92t8yLLCw0h1uihhKaTxXp5t5A+beMiW2cr0NCzaRDKI3Qphk42EvdIDOUqy3MN
        F/il8SLTIFGMv5SeZ/mgwbbRWWQovxwhIJ/AKXqEEgyzYzEko81IgjSucKxIKaUqkDb2TStcQanm
        4tzAg4zFCl4rQqyVRDXbQiUtKjG8Vz07as6fm/MDG0MwVC8r0NfQhIYjOWom8kOLyhFL6u24q3L8
        X1Q6b2gSWKiPjH8f/KPaLc0mJ846DrfXQOI+jXNGLlYdn4m14t5aZN713n9XW9zFhAqpPi3DyOwi
        3Qpyh2Z/Enty3v/TRSbioE9Bz53fciYTcBL7hXTjyaTm9he5TnQCvG+TYWS1SzFc58qb1VIOolrz
        DdUWkdRTciJI4xVjL10vY/9s+qfx2X9FAwwado4ct5tJDUpgiR1ocFTjAcps+Do8+wEAAP//AwCk
        IkfIzwMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef496b5eeb293d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:04:44 GMT
      Function-Execution-Id:
      - ruh7f85x0gxj
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15507'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1df9c05250a7686d525a3dcfd17bd9fb
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85966'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.688s
      X-Request-Id:
      - b29bb385bde23d3770aa246c1ceaf430
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"The purple
      elephant danced on a rainbow while eating a taco. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '302'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOTUsDMRBA7/6KMOds2brutuZYPVlB8KIgUqbZ6SaazcRkFotl/7sU/Lg+eI93
        At+DAetQ7JhCtbp/Hrd3ncuTe2xvN4enD/9w/Lrc3LRbdwQNvH8jKz/GwvKYAonnCBpsJhTqwSy7
        ddt01/V6rWHkngIYGJJUzaKtZMp7ruqmXoKGqeBAYE6QMo9JdsLvFAuYq5WG//QfXnYahAXDH+ma
        WYN17C0VMC8nGKn8NjMHAgNYii+CUc6HHIXi+R5VmXImDMqPOJDig0KVppwCKQqUHEZRPUbr46A4
        KlQZfdzzp8LYK0I5c1SClhcwazj46IvbZcLCEQwU4QQafOzpCKaeX+eLbwAAAP//AwDvcOyFagEA
        AA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef49e28e9e2c8c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:04:50 GMT
      Function-Execution-Id:
      - ruh78101d4m0
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2276'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d12c3dfac38fffa29938ecaa65dbb1b0;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89454'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 364ms
      X-Request-Id:
      - 957dfe77ab0a0806f76397ffcf882f56
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The purple elephant danced on a rainbow while eating a taco.
      "], "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '140'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef49f92dc01122-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:04:52 GMT
      Function-Execution-Id:
      - ruh7e2ry1ieu
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '72'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 380733d38e1ccb41038718033fb32dda
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - dc2f8288e122614a638cc142c7666171
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a surreal image of a purple elephant dancing on a rainbow and
      eating a taco.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '153'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef4a01cef82a12-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 14:04:53 GMT
      Function-Execution-Id:
      - ruh7sis6oyz4
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '50'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 6ade5de67c20257338860199f9de47c4
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 761b64ff1508881964b2202655a6d642
    status:
      code: 200
      message: OK
version: 1
