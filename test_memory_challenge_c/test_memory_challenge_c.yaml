interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTW/aQBCG7/0VoznbCIcmUN9yK1IvVVO1TV2hZT3gDbuz1u5YgSD+e7WxIS1U
        XHqdr/d5Z2aPpsYSdaNEu9bm008/6Oa76x4/33+cxseXb3bezMZP0my+PDjM0C+fSMvQMdLetZbE
        eMYMdSAlVGNZ3M1uJ9Ob98UsQ+drsljiupV8MrrNpQtLn48n4wIz7KJaE5Z7bIN3rSzEb4gjltPJ
        OMO32ad4cVdkKF6UPYVmH4pDhrrxRlPE8uceHcXj2OAtYYkqRhNFsSRIz0KcDOwrBgCoUBrfrRuJ
        FZYwBIcEbSUFK5xDbHxna4iigsByB4FUbXgN0hAYjhI6nVDjohjJVmBlLIF4qEkoOMMEz40SUH1R
        yojaEDBtZVRh9qdqIBU9G1730g9XBJIZZdK8Js3SyXnYgeGVD06l8r8Z+rKtQBRq47lwaxX3mjl8
        jX11srkYtJxTXKeBKXjNeFVxDves7O6FLuquEZ0B6WDEaBPd8QhM9ApAHLuQmpXAHJSDlbfWP//r
        HqC07oISsjtI+LRaGW2Ixe7O/ceW1OYo9Wys/Y9rX2y6Fzpkx6cb1nnxc6wc9Qyn1Z9hqrA+f9U+
        kWrf2i8xjxCvIANPxQc8ZLgybGKz6F8PS4ziW8zQcE1bLMeHX4d3vwEAAP//AwCllnuLKQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9b2c49388714-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:00:36 GMT
      Function-Execution-Id:
      - 9enwq63fslif
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '17991'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - eb532b245b7d869b9d0480b974db361f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - 97d9f0c6664be1f5ca32ee9286fc4962
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2447'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPS0/DMBCE7/wKa89OFDctBV+5cKAS4o0Qqhxn25g4XsveipYq/x1FPHobaWY+
        zRzBtaDBdobtEH2xvHnF269Dn9Q9P91dXTfbhh+e69Xq5fAYQAI1H2j5t1FaGqJHdjRZNqFhbEGr
        84tFvZzN50rCQC160LCNXNTlouBdaqio6kqBhF02WwR9hJhoiLxm6jFk0Gp+WUk4wf+NmZLAxMaf
        ogulRgm2I2cxg347woD5j5vII2gwObvMJvC0kgJjmB4YwSb3gkl8JscojMgRrds4K2KXTEbhApMw
        YuM8Cmu8x1bQjuOOS96zMKEV3GEQg0n9pH54Jovf5VjCKGHjgsvdOqHJFEBDZoogwYUW96Cr8X08
        +wYAAP//AwBxWv9ghQEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9bbfd9fe2949-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:00:44 GMT
      Function-Execution-Id:
      - 6v0ues8rci4v
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2323'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2ed74b05ba882ec24221bcd812eabd63;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88917'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 722ms
      X-Request-Id:
      - f622cf54f8f249b78af658a6e23300c0
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2285'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9bdadc6d633f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:00:46 GMT
      Function-Execution-Id:
      - 6v0ut7d8itbb
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '215'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 786c580b57148c6f373ab76c3b926c67
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 8d8979326aec703614d513d07744bb10
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task to write a specific phrase into a file called output.txt
      and then mark the task as complete.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '176'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        DFTo4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9be56942e247-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:00:50 GMT
      Function-Execution-Id:
      - 6v0u2xm8kwt2
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1517'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0b530ffb4a039933e8c926e7b1cf83ed
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - a0c1dd455a5a044ade95f2e73bd06268
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6585'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xTXW/bMAx8368g+OwE+Wjaxc8DugEbCgwdhmEuAkZmYy0ypUr00iHIfx8cO03r
        AVuf9koeT3fkaY+2xBxNRWrq4EZXH78xfX5wX69/3r6/vrLTC7127x7SzXr56QYz9OsfbLSfGBtf
        B8dqvWCGJjIpl5hPL98u5lezi8Usw9qX7DDHTdDRfLwYaRPXfjSZT6aYYZNow5jvMURfB12p37Ik
        zGcXk3mGZ/KnxnR5maF6JXfGLpbLQ4am8tZwwvz7HmtOJ+LoHWOOlJJNSqKtTC/K0lrYFwIAUKBW
        vtlUmgrMoS/2DX7UtljgBxDmEtTDLlpl0IohVJESJ7Ci/ljwjYZGx/qocG8dA0nZ1gWa1E0ope2q
        98VgfF0fIR6eaifUuMDsuZLIlLxY2XRybisGK0ljY9oFJYj80NjIUPNfNNJA1j9fDY6ke3AEX3oP
        R+6V+tWR65mH1y+mKOTM9/qdDMSZaNUam+rhhVhSE9sx0hdyKHbqlQXImCaSsvvVr6PHDk9oE/S5
        Hu4mBabt6emdde7/JaOTcchO+e3hf8RXqOZO4YujDYxQ3AyT3zVa7JnibOHF/PCjtMkMTQyOgR2H
        ikShJDFcghcgiGRl7Xewq9o9MKmVDRAoGT8uCjmZOxrsfRZywEOG91ZsqlbdT8Ack/qAGVop+RHz
        yeHu8OY3AAAA//8DAJ3L7bvOBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9c00dddd806c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:01:14 GMT
      Function-Execution-Id:
      - 6v0u4us9dsv0
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22249'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9780bbaf1d0ba1a2cafff9738d53d96e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86893'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.071s
      X-Request-Id:
      - 39cc2541deacb79cd36abe22c7b93a08
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\":
      {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=\"Command read_file
      returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\\n\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3029'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2SR3WobQQyF7/sUQtfrxT9NbPYFiiGhEHoTusXIs7J3ktnRMNLWDsbvXmax20Bv
        j+YcfUdzQd9hg64nc0MKs/XT62GZzqvN9u3leT1+/8bdQp9ez/rxEvdYoezf2NnNUTsZUmDzErFC
        l5mMO2wWj5uH1Xr5dTOvcJCOAzZ4TDZb1Q8zG/NeZvPVfIEVjkpHxuaCKcuQbGfyzlFLwHxZ4b/w
        v4P1Y4UmRuHT0/XmWqHrxTtWbH5ecGC952YJjA2SqlejaIVSonEsDbZwIoUbdQ1byOzY/+YOCJwM
        A8UOTCAzFeXgA4OjELiDFn1Uy6MrcLpb1Ha2FqEYvEFmG3OcYoLEI6hlH48gBzA+Ww0/er5rBYZ8
        VCBIfSZlaLGM05hTYODAqado0FF03IFEIMjk415OcOoLEZOVIAIjJ3WL8PwBgYzVgCa8qaQJnLI3
        BgoBrCyYtikcsgyTcAPy0eS/sjJaGu1TSes5wqg8OVs00vfd7be4xfvxarxWePDRa7/LTCoRG1ST
        hBX62PEZm/n11/XLHwAAAP//AwAMEERLgwIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9cb53bcb2b45-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:01:28 GMT
      Function-Execution-Id:
      - oznc4oqppm5z
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '7696'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 600825a33f41893547443561fcf66d43;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89263'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 490ms
      X-Request-Id:
      - 7ed6f5dde522d012f38727fe57a76227
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I received a command
      to read a file called \"instructions_1.txt\" and it returned a long string of
      text. The string contains a phrase \"The purple elephant danced on a rainbow
      while eating a taco.\" My latest action was to write all the phrases from the
      string into a file called \"output.txt\" and then use the \"task_complete\"
      command."}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to write the phrases into
      the output.txt file and then use the task_complete command to complete the task.\",\n        \"reasoning\":
      \"The instructions require me to write the phrases into a file and then complete
      the task.\",\n        \"plan\": \"- Use the write_to_file command to write the
      phrases into the output.txt file\\n- Use the task_complete command to complete
      the task\",\n        \"criticism\": \"I need to ensure that the phrases are
      written accurately and that the output.txt file is created.\",\n        \"speak\":
      \"I will write the phrases into the output.txt file and then use the task_complete
      command to complete the task.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"output.txt\",\n            \"text\":
      \"The purple elephant danced on a rainbow while eating a taco.\\n\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4911'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6ySTW/aQBCG7/0VozkbZEIIxbeqUtVIUT/U9FDVFVrWY7xlvevszBIq5P9eGRtI
        6KlRrvPxvO987NEUmKGulOi6saP53Y/y/bu7uN1O3K2e33/bfvCfHmafP1aLrzNM0K9+k5ahY6x9
        3VgS4x0mqAMpoQKzyc3b2XR+db1IE6x9QRYzXDcymo5nI4lh5UfpNJ1ggpHVmjDbYxN83chS/IYc
        YzZJb9IEz/Bz4nqRoHhR9hy6ShdtgrryRhNj9nOPNfERHLwlzFAxGxblpLPpnZDrRtjnDgAgR6l8
        XFfCOWYwBIcE7aQL5ngLjqgA8RCZQCoCUbxZDh4JtK9r5Q4Fp9ixapxj8pQaSLF3xq179H1FYBxL
        iLobliHQQzSBoKbX0Wuscr3UCL7/N+0CpoMRow3Xl3shxzF0bUpOvWD4BCyAo9bEXEZr/8BB7ljb
        bwRKH+B89a5ZaR2DErociRtSm6ODR2Pty9bUI9vk+AhD+T9/4FRNvdoz/IUpFdaXL/T04D3gSxUU
        E0MZfP3s7MvJWHYCldoSrIgcPAYjQq7z7qM0UQ750lg6OT+4H4bIXYttgqVxhqtlL4kZsvgGEzSu
        oB1mafurffMXAAD//wMAeXQl6PQDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9cf03ef110f5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:01:48 GMT
      Function-Execution-Id:
      - 6v0ua6d742j4
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18629'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e0a5e288afef3de784efe0ab0df8bab3;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85971'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.686s
      X-Request-Id:
      - 7505c1b8cb55f161c9fabcfde7c56450
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"The purple
      elephant danced on a rainbow while eating a taco. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '302'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOwUoDMRBA735FmHO2dLt2q7lVRDyUUlGQIlKm2eluNJuJyawKZf9dClqvD97j
        HcE1YMB2KLaPvlistoftc7it7lfLzef6Y1Mtn27i+qF6vM53oIH3b2Tl15hY7qMncRxAg02EQg2Y
        sr6aV4vZvJxp6LkhDwbaKEU1mRcypD0X02pagoYhY0tgjhAT91F2wu8UMpjLhYb/9BmXtQZhQX8m
        dTVqsB07SxnMyxF6yn/NxJ7AAObssmCQ0yEHoXC6R5WHlAi9cj22pPigUMUhRU+KPMUOg6gGg3Wh
        VRwUqoQu7PlLYWgUoZw4KkHLExg1HFxwudslwswBDGThCBpcaOgbzHR8HS9+AAAA//8DAMonOF9q
        AQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9d7b2d7702ac-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:01:54 GMT
      Function-Execution-Id:
      - 6v0u5bbi51sx
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1789'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 28e2763fb42c179f0c563d4c98d03d1a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89454'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 364ms
      X-Request-Id:
      - ad7fc704ae5de0ce0bdc9fbcedfafd01
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The purple elephant danced on a rainbow while eating a taco.
      "], "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '140'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        6S4aoOMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9d8d3fef28e9-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:01:55 GMT
      Function-Execution-Id:
      - 6v0u1uggdwvq
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '328'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 437b187aec17a2afffea0cdc56da2cdd
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 0b0be58956495aa5960c9933232f91a1
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a surreal image of a purple elephant dancing on a rainbow and
      eating a taco.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '153'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cef9d95f9d22d3d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:01:56 GMT
      Function-Execution-Id:
      - 6v0ugm1tevpu
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '73'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c0bca82d075b58076925e9c3702bfaeb
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - fb07f96784bf41295bf0a8b87630a41e
    status:
      code: 200
      message: OK
version: 1
