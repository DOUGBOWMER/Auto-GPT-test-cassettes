interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTW8aQQyG7/0Vls8LAhFCurdcKqVqFbVqeki3QmbWsFNmPasZb4Ei/ns12YW0
        UHHp1V/v89reoy0xR1ORmrpxg9mH55ufj9v79Ttqnp5HYd28n3z15ebjo3z+hBn6xQ822ncMja8b
        x2q9YIYmMCmXmI9v76aT2c3obpph7Ut2mOOq0cFkOB1oGxZ+MJqMxphhG2nFmO+xCb5udK5+zRIx
        n01GGb7OPsXHt+MM1Su5U+ju7fiQoam8NRwx/7bHmuNxbPCOMUeK0UYl0QTpRVmSgX0hAAAFauXb
        VaWxwBz6YJ/graZggQ8QK9+6EqJSUFjsIDCVVlagFYOVqKE1CTXOx0PdKiytY1APJSuH2grDpiIF
        6opSRmnNILzVYYHZn6qBKXqxsuqkv1wRSGbIpnlVmmWS87ADK0sfakrlfzN0ZVuFqNzEc+HGkXSa
        A3iKXXWyOe+16pqkTANT8JrxopAB3Au53S++qLtGdAZkglVrbKyPRxDmFwCW2IbUTAoPQDUsvXN+
        8697ABnTBlJ2O0j4vFxaY1nU7c79x4ZpfZTaWOf+49oXm+6EDtnx6fp1XvycUM0dw2n1Z5gUVuev
        2iVS7Wv7JeYR4gWk5ynkgIcMl1ZsrObd62GOUX2DGVopeYv56PD98OY3AAAA//8DAKrIm3gpBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc3e3ab8a2d5e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:28:21 GMT
      Function-Execution-Id:
      - 943h1c501p0t
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15373'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 7bb5bd6dee3edd6176ca9e31e4cbe8cc;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - d846f1fa4b99144224b534fa2249eec5
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2447'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPQUsDMRSE7/6K8M7ZZdNurebmQaQgeFekvGZfu2mzeSF5a4tl/7sUq70NzMzH
        zBl8BxZcj+KGFKrl6/vieXYcSt6v+Oktbr7bFb/sv06mFwINvNmTk2ujdjykQOI5ggaXCYU6sOb+
        YTFftqZpNQzcUQALuyTVvF5UMuYNV828MaBhLLgjsGdImYcka+EDxQLWtI+Nhhv835gZDcKC4RZd
        GDNpcD17RwXsxxkGKn/czIHAApbii2CUy0qOQvHyAJVgOShhdcxeSKEqiZzfeqdSn7GQ8lFYodr6
        QMphCNQpHiWNUstJFMZOSU9RDZgPF/XLw6Kuy6mGScPWR1/6dSYsHMFCEU6gwceOTmCb6XO6+wEA
        AP//AwCsTPeNhQEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc4583cc91230-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:28:27 GMT
      Function-Execution-Id:
      - 943hv6if8wwk
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3327'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d899e88e707d4770b8bfcd9853040a3a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88917'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 722ms
      X-Request-Id:
      - 8f7439c2b7bbd4f73f51ed0e9576fa57
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2285'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SWy66rvJaF+/UUW7ubkgIk4Mnf434Hk0Bu1YKEECCEcLEBn5cvrXVKVaqOG9PD
        tqY0POb3r//48+dvl9fFffr7z5+/72qc/v7nT+2RTdnff/7813/8+fPnz79+1/+nLNq8eDyqT/kr
        /92sPo9i+fvPH+5/K/8n+ufPX3unu9Sqg1vOwntHoOPULFoKMGqmyksA4iF16FPaq74AsVCiy0oN
        aiaPt86e+1sGasrZVOFfDPXX5tXApjZeVMPeTV8FfXtH7OL52L2bs79slNoDYzo/SC/msb+eDwcB
        tScPiLREXT7dL50DLcwKVZWu8QmtnBK46+JS/dZG/mzlOYHd+yhT7ePrvjCibgOOyXE4RFyPqKiG
        DQhoMMjiOos/7kYWQ9I0R2x5V1knyXNawbuPQbSOvpws74AIKBHeFlV3c8nmk75PwS2TIFp35nuY
        58t+A8K3iyn2660/Mj80UKWEbxwsZoyWJPVHMEf4YAXQN6G9QiUExzCjEaWZPgfxjUDc20fyVIQc
        sTbMZxQ8tinZNTlN2K9eTXVGEK46Njl8Gshy2o04OB0GxHJruqKH8XhgP8F1PXnJXML381Wpn9+H
        fA66bIbgsFmxpfl8MhIx7aFJ7BKb/GYa5sh5euj9ebVYBVnRheQoBsibKU/E03Ws5wj1JRo3Tk0t
        bf9J5rhFmTSHfEk1Ld7m85MLO8B6d6XGOd/54wOUSE4v+ZvsltNXZ3NIQCJlpGA8LDFi3OVuId7K
        nhj/9LvMVtnLF1PSqImKha2rUxqy31zuFC9D5S+ExQJ44f4VLedqxxacpVfA/cOJtpVhsKm3CgdC
        PqhpKKY453SO8+B22xyptrxfCYeE8iovrhFgb9u1yWJmboQoFVxs+7aJ+Eo9dFJ8SESylw9aPktO
        dEbpIxewIiJlmNikeHJaazYOXXHSl/g0GBB+AwVHinpETL7QI+IIy7AtVZ2/lt/WgPK8rShOHzef
        fE29Q3M3kIgNU8tmU886dLnsBbLlBg+xUzp38r5BNrbRSUr6V4BGiAwlwknDNvU65dMZGuPAE/mU
        VMPQeCoHH/pJsAHfLF92+ncPQss7NFD7qF6fYr2HAzpj7EF+/fHLPYJgXLdk38lMn7Jpm0K+F2Zs
        Te1lYOvoR4BoZpGXf7Jzzv1KDtIVaxPxqezWc2MKBtT144zNoueHeZeu0fZG1iiShbSt12XFGvBF
        3mB3CZaarKe0Q6S+udQtV83nUyPcA+6fDvVj2unjofIMYLxbUT+9V6xH73cP/stJsL3BFRrzxwDI
        WyoXq/e76y+0zhW4+d4HOwbmEhYz7QrNIInkLQ5dslLCW0j3rBHjo6clHTk8VhRsG5tiVgwDzcX9
        CoeqFHB6yaN8rrJ3JNvhLY64gtcZqWY3BituMTWu3TQsc/Ed4Xx6NNS45VvW87YzAvW1ELt7cczH
        1Hl1CBgXEibYpj6a+8gCpy68SAyKlU3ylJ9B1KoHDt4+SZbHs76Cxb131HBU0Z8WoV8ly175CFVu
        xBbsFS2MSh1RzfQ+jLaPW4uWSXKo4rIgny8XxYKDTTqysSLXn3ZDtyKxqLbRtj8E9SyAaICcdTJh
        ubXmK3YDC72UTx7x280GjXd+0qT3rcJUmVU6kLn3Z5A2cod9ND/yudJGD7XY66Ml0TR/rvpagy2h
        YQSfqzEsjTG06Dw8+Aja4ViPR/4mIBzsVvL7Hxm2l1YO1QaIbIyRT67NtwFNHVzqn3GQzKy2HDDN
        S02q9cpqhuxylq24wZHAJbm/0yaUQTSqCY1m9+Ov9l3pgFyuLT3K61dfvGRfosxt79g0dVvvlKUK
        5Ntpw2PrsK41vZahgPhZueKC/w7Jat+dDszCAzJ6HhrGYi+ACE8tJrxx5v1p708OgH6j1N5rYz1/
        vWW/X53xjI/SWuY0a78K5CMX0qKjh2Hpi0sAOB8eER/Hu2G8ZZkCvHbTaAFngmbBnUa0HJMP9Wru
        lfzk7QqLcmRkn5yNfDFbeZbkrJexW5vXYeVthcjn8F5Qo6dWwhStamWcfx/Yb4WSreZ6ESAj1yu1
        2+jK2AKuBo/wKNDgczXqJTeuGSCludPDz/wapjWX0C1xJ6peKqr316CsoP4+P1ivyg9aOmadAQf8
        SrbFxfNJ9mHlv/MlfknCQBvPFVAOuvhvP6xPcdhDteUJ2WzPu3wUQLSQWfpLtOpyV6+PIt6jxjcy
        is3YGWhXDiXK5ECn/nTeJrN97q8Qttke62OY6uzqBDNKeQ1hf6wnfaw9mqFXFUS0YPeUzZQbzhC0
        K8E6C+8D00yuQscebvQcHt/DXGVTgNSY6wlV64mxcRdGiAvmluruONST88gdSLTtM9pyQ4+oZkIJ
        g7dfaejcHDYajr6BV5gdsEfVA+PNTI1gWKaa2rxWs3U+agSevVfiaAYxJ8PbBnifqpU6X7lP5u1t
        QyS9MlfsvwW3pvZ2mBGSbw+sfLKMrej0EeBa1zU2RNeoFz9nM6x8fY1gd/z49BtPIywrMenv+WXd
        tJo8RBKOyOsE/kiDsQADT/a0y1UnmdvgFsPPfMDnUtQQPdRBg5z67uFA3vb18hJMC8pN29Lwrlj+
        xD28M7QnB6LlBVPOVG8SQPvGIfWC0MjnqNh7SIsLDhtGusl/80r6tEyKdrvuWTMv8mK4Jf5ElcYO
        /XmwlEZGXKBjI85Nxr764iAjQFvqPbO0XoZAPMPJ5vRf3tFHXVFGVEfDDes0U+tFmI+WHBEuJ/Kj
        9JL51E0bEensjW2BDxO27nerNBrVQNi1FdDauQDogFKMD7178udVVwX4ysORcEdyz0f73GeStysz
        quUGqn/9Ko3vixfRcD4NE3eQBXEcLjl1qPfN1ymaZ3lt6RSt5WZEnSerkpzi65Pq5/adrJtt3KKg
        llschLtzvn5UcUTP/MxTHD3sev2aeg8mPh2oh8tVX+biReB1yziCQi3MSTAtCjg+b2KvU7/JskXi
        CnThNmTWReSTn/uhbyyNMPkjMQKjwgEQDFH5lN76fCCbHi0fsyaymNJk8QaxATEo/X/zxPL0uCNM
        0zphK96WCYNsXwLnygW2fWmvz1KScSAEioQPH3dMph+ekW4PP4/2Jt3XIxK6KyLZm1Iz87p6vq25
        hfo87mh4TfyE/+EpORxzl4C9axg7koMFthfZVIU48udu1xuSuu4KrBds8lc/+x6l3/morVf2P7zY
        nTWdap/NKVmj96ZAk+V+qYKI5y+fRNPkuDQbao/oni+O0s2oeUpnGh3RAy2tzVfyx5dH7F72jj7z
        31cKu71h4sDoL3m/aawj5EdNwU4rv+pJrEkEv7z7y/OMcVaBvp46YOPhZDWL4K2h5WRR6nHR4o9o
        yPfIdY4W1rbHKVmmFBpkD1qL1Rt918TPXke4+tUD2z98OkvoRmDrigdyPzQHXxB2GifNx++D2udU
        SMhZvBLoS+uNrcu2Y5ScXhUsx8OHIIN/16xuIULHzj1QVzXkhAJuFPnKe2fsmWXJRnM4lHCcNwNW
        x/NQk1O1I3AUAKj7PmJ9ccJTCta9XYhUfLREEKV0hbHyVPrDQ4y+nCegtIg8rDfKmLA6Yg6Kr0ZB
        n/dGGaZCWzQwUz+ixv3kJMtnt+tRwaaF/rw3jD95gh52/KbG7lv6zP9vAAAA//9UmlvPgsyyre/n
        r5j5bs2MCEgX646TnKVRUDHZ2QFFAQ8cu4FO1n9fwXdlJ/uaCzBWjRrjqXLCFZwmQaZ2dDai+bRy
        NeT0EQmGm2Lqc7CXU7R+oDK4vcVnNvFjaqC7JPpUGzyumx3wVxB9pyz46sO4+GnVl7VNOOJLg6Ku
        73KnRt+UXbD3cD5ey3mStt1iGpPte11409ktTHl4ygK2zZtbzQUnvSDKPwpWv06fjQ8camDkzxlf
        izeXDWPeEFBDviUz6UQ0+ZWgwRbcU9CPSY7m/Z35cLu3PbW404Sm94XFMr3rKjZEZ4jmxLkcUWSv
        R4wF75MNmZEksNWe92C7+LlGXIklWGRPqWfZN29mYRWj1d3EVFcfOpsjq++Rv3ld6d7fnlDfltLq
        5z+xM68zbzQ/dQCUcs6f35wPt4wHfOp8gkKN1/ukE0TJ3DMzEE6FobP42qwg9q5aAKX3roYAWxJg
        XEvU3xuGx1B8imV8zHVsZWodLXkk/tUD2ahnP6KZ+U6gNPc8Vbkqysa1uqkB7acIG4dA9MjBP2vw
        m1f27M76qHzuBCzFv9LHuaXRnPjPJ5S6MuDj9C4yJm7dEKqgudLrfiXoE9K0Egx/u8Ye1euKvEkh
        oWO7ulJ9Ffds5K9dCYJwmLC2eqOoH1/DU+rKrUix5GF9ILV/hua12WItvIgZo/d+RKqmrQOOYZZ9
        1bdoA6NOSGCpr2Ho5Vpa/j9schHSJ1ckLiAh88m4zgw0u4/jCzrxaf/yasUitZbQk86IoE+TofEg
        6bbEkMcCzojzjPH7KYdtFQPhvR31mOSnBjIjlpB24QfM2AsjWgnincarc9Uxde57SesfZ7w7jRlj
        4o4X4W0OFvb0U6HPnDI8IVm7BmG74wr1U2cTsNt6xEpr5dm02uQfyfWsK+mFo6WTw7pIfvmRmnPU
        dGN9e8yoEDQXK4Qbo/FWjzdYefcbQVew9NHy7iKyzkGLd9BNen+rxRsKUb8LvgeuyWp6a0O0p/4B
        3x4rrI9RapWg9oJP3fvX89ia15/w/lYfqvjspM+1bJ+hdrMCa0ejqAZHvtzQ8ewuVeDOiNWniwZJ
        MHzw3vGR18uOGMCKWnowxnu32jzWtEdr4fml5scsEHvNNoFFT4l4bI7ZbA6fUt6jgCPoBhTNOA5f
        8uQfToGEUNeNQVS1oKZ8QvXj1q2o0hb5b14SZ+8ZjHhzGcvDcy1Q9/ll6C8vZEdFoZYh4Y4s/Qpl
        xpsB3Do1YzQUfeg060pAPiYVqWXlLMdbJVn4TqXTFbFDKB1lhdWRT6ppnqZcPitNTSZhVFCTGWEi
        h7PYL3lYZH30vikoCeiH7lmae9Pb/3Di3Tq+CXBz183RcRv88iqZYqwu/OQ4//wyTe/fzpsicF/I
        2NEr1du9VvHPw1uR9ml6opa6j9nc3o0e5CHf0X2lkG4SWa+h9PEZqHuTtl4/UklBafEuqXfCG72v
        +/tHolxrYr/pUMYed8sAU0jXpJWyb8YWfw+JPZywN496xBXSk4dLha40KDWik/bukz++dIhxkbFX
        qYnoxwPOjA1oTMtTCJK7UmiQndqOObliwq3pMLbW9Ov98QOXDApu+t7ofv4TWfU+x8fotUM0zW5P
        2OU2YCyJhccCGBSk3bsukAJlQDNKtgasT4gLRrG4dVRJqxbFl+s72KD8gATBsV2o5kglwjnmM7Zp
        Ox4FoxBSzWk5NLdhYgOiiYmT2T16vXJtXDipeh4Ug3NnrEOrEtya0CVP9tm8oscRnS4qxdgaX97o
        h4cebYdziw25OVSM4ZADeQ41qkRKF/ULr5B5g4/JK7aVTvDOuxKy097BqmnXiz8eXXnhYdTbb9Zd
        Yyv1DP01/lLtMe0rvlCpDxv83mLv2zCPjJswBH+efvP+HvWVPI9ysrHP1Okeu4ircRVA/AzWWFG2
        x27eIM5GIOvfYHtK/G6+81eAx3BpiKhRzCYSekd4Xuc2mEr6qGbl+c1h4Z3UsVbvihXJaUYdJQQr
        umkz4a5yJiofOqbaO7+i4SCOrazdm44GD22XbfyvckS5jxTy3hyybk6F6Qw7NB5pepasjk+xlMMj
        djE1wyPJBnB3szTwLwsbASqirqjaI/oU3oN6xmbX8UqHANzH9oR1JgXVrLnJEX71i31Zj4jNOQSM
        Ib5jFULizWicbWh8jlGjLkN9BHZxwbyyBjtJcorGeHyWaOnXoP/5i7RwR0g+cYeDyC7RqPWjJIfx
        TsXGwmtmadPlIOwbkaQkXjP6Wm1CwU9nj4y6aSMWMjeFHy9yv99bVHNmNsPCV7E+SqbHLO4S/vEO
        d+mnYXbmF5RfrsHG2jkhxm/GMxLCu4p/vGXjPt8mfBz3Sg2HlFk/M30lt2BZdK+sWUb6qDWRR04u
        QRHWK55K6gceu/hF7YUfcnrizH/+RLyPWsedFWqgtxQTbF+cdUZ0y9JgyR8Uu6OPpIN/ViBO/SHY
        nMYMzcv8Rvb61lPFZXrFPb4HAwrij/+bJ0T3WKMQkd0e1DboNv5aPUM5cBJVtWyoJjFrV6h9GVoA
        9uWob4yOGrDwFuxqHzFjG6mokV5ac7B5uqner698D8mlUgjc86iav434gaDmXHocRZpRY78e4WjF
        MzWemq7THVw5SL9vFoius4vmH++33sqJOj9enPdaAs1R2GH7wCv65ugrN2hewpZszveBzetjnUDh
        fh1SDqJZTUTZ52jzDVYBF9vPbnxt1Rvk47OmanU7dIOtPEdY9IZIHNL1P54hfntMMepY1qenJ5Gt
        SRFJpR3PXr9W5RaSqqgIN99Ubyqa5InYAh+Ve+pUf/r+vXyCoKZy1v3yIJwsXsemvTMr0oahK3dv
        qmB9GpKIbHdF/MfH3fxbRnxqvOFP711GKjYKBRnR+kg6MhH+q0/Z7XBDr07cEv59pYy5gXaEXQg7
        6il2VLHH4ItA0i/FSh9zbAB3PyPvUT2CFQELCUl0DWHaoCB43lOnG76CUMNrQh7WsODpPJd8Pn98
        J6i1dTXZ98iG4vaVqQLIiTZFEz7hWX9O2Cg2ffVcNVz5y0eELvU2b9t8hT7aiQtW+YlFy/4ghU0W
        ZNhUk8qj2bkKwN8BXvp1kwk0FAPgzPlEXtVpZOM1TTXUIXqgAQGLzdVTv8mK884CFpsO41EyGWjh
        H6TwNx4baZNzqDrkJbmtHwGbUOq9/vim1SPIljwWyku/UO1wwd24r4qbXFipQv2my7I5xfMN/fKQ
        7cKl6qn/yuHyIcWw8FR9sIZw9ed3fVfYd2ONuwBeK6Jiv/TeHcu24wissdfYczWjY+TUPJGC3/1f
        vc4X9aaAJaspNnggHjX7mwYPcOKFZxTdX72l/vQmEhccdCZNFgEge6Aekssfrzn+9HXJ434kOLzj
        IveKDMI/tyWqL5YWgry91UQu9judYWv7gX15zbBimlPH1LfoAie/d3h3HJlHufL5gUJQXBwv84rb
        RckNJnnH4T3Eokc0upeg3UZrwjVY04WKlzTgUWMQ/vHIu1nNVjaiF2XE5nOrsdn7njj0y1cuVSc0
        HHbvELbf+EqNS0YiYuxLX349xDMNT3sVbS7Wg4fIlkes5vDqiHWzW7Ts97AhNTUbFn2Bmu7v1Bjp
        BfGHW8ZJumFmwbSvV95orYpQch/oFGzNXP3TB3hLZ0KN7+aOekdFR9CM/IADiwzZ+NPLUJRkqpz2
        BeuEE/SQmiwmmbs5syYdhLO0+8B54TPfjqzAioEJ0OJs4YnETtaJpK7rOBAaW402HScGYGwvCtWO
        hlpxtDnzUJRBEMzB5cNYGfU50DefYfcsfSv2ZLUBKX/NyZimCuMmQT7C43Cy6PnXD0ratb/9HtY+
        +cFj7cWWoO61mCBx5Bj57S8JHxyC19rZsPmcB6k0mq0UgNqSarCkXQmGVoZEboZZH1yR2HDVQaWx
        Ea+iOTWGFWLIYTjwg7RqnLEVtw3rXgH07wo1v/qeKimlAdfEHof4OgXPKQLClnw66USMwT95KNg+
        33d9jOW7CU3RjtibdElvVkplwy9vq97JitoEylZ2CVXwTue/bGzWQ/yrB6zZQtkxacIEWTXOiWm+
        NU/ISH/8+R+68MOo98TwBfpRMvHCDzLSo+cKgekLWDd7jfGVfjVA0b8uaVi/96Z10gew+Mlg1eG9
        ztJPocnTw7xTzXbHRY8n/8cbAzTrh4wVyX1G5Zdvgg15iV5zuzxt2Nolwao0Ot3mXLYuKG0mYT/L
        NX26vW49uCf0XZ433bSXQkX+8aPfvnXZN8yAzq8h2MLn643FsVlJv+/3nNOxo2x9XIGacgn+/V5y
        7/Y36M7bE1YjrdSn+6NL5EDiV8GcGdlv3wuwS71HIDjfopo2yVWBVrtjvGsFOZvJZ+LQDs1H7F+m
        b0ac2DSQteUO9Dx8hG5OptxFtqPL1N6+vhXDPQ1ghXYfjH/7nM8USNslb2OH+k99jE95AGmSWsGK
        azh9nt7HG9BGfwWD9hA6tvhz1Eg3Z+EHL28+E99HQwITVfZPy5tdIWp//Ix6pUPYyFZJ/uPneMkP
        3ljJ0gzSNE+kve5X2XAuSxfitdYsPNWJZptTifzP7yrgv//173//n9+Fwae+5+/lMGDIp+E//+9U
        4D/pPf0Px/H/ofzfJQLp02f+z3/97xHCP01Xf5rh/w71K//2//zXvzfiVvo7OPhnqIf0/f8/+dfy
        xv/+1/8AAAD//wMA25G20+cgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc46ffd1a2c2c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:28:28 GMT
      Function-Execution-Id:
      - 943h511hnoa0
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '89'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b6b9f0dd0d716f9dbf54073683e55cdb
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 13905072635555a89a8ee1ba62517f34
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task to write a specific phrase into a file called output.txt
      and then mark the task as complete.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '176'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SXya6rvLaF++cplnaXKwUIYPP3KEJpYicUCdwWJIRAagobfF7+KmtL9+h0LNme
        8pTt6W8M//tfPz9/XlVXn8Y///z8ubfD+Od/vmPnciz//PPzv//6+fn5+fdv+1+R9aOqz+f22fyG
        /062z3M9//nnR/z/kf8E/fPzJzKmnnq7YAuWXRIL0FvSM1YeeMWHKCl9GK8uV7pV9yriq9vhBAsV
        V3QbDo3N3l4Swd1rvFFHlIbkVRIUa2/kWdOayI4956K+Aai97KfOnwHgH0YtmJ52N0Lk6GCPR2ZB
        8De/N5vVOlMPOVzEQ0yRu436hTmIwce5v066fLv3s2U6EzQMWtNtPNtAVM9LA+L0k1Kzt2k1D05v
        QLW6xpRkHytZDLGJgcFQSaIrvnfLcTRlXbOLnPrBSuy4Zo8Yru/ejYb+/dONVRT6v/kwiDeoF80s
        X8DqEg40zBDoaH/TWo2vLhMWbt4NLWkmivBjWMbv+j1PxWGn2bmjTldvN3bT9iy3AM0PgZokmxNq
        uWsBxHo5UIxMqVuGW3nS1Ki4k/DQ9Xx+2qavf88L62gq+3nYCgctEewQM+90TxgIvBxsvelMw7cn
        VMvNyndQSVKBHNoHqZbnBymgV5qO7O6Hd7/ULltAfRdtsifZPhGlKn8BlfkmcbTmbrNIrw14diGi
        vnd/dwsZlAgkAGY0gxpDvI5CCI+DF1DnclXR2CR1CFO7jYhjzU3HiS5osFJjiWwTLlTD+40WmBIy
        EN+7Bz17N6zWv/WCNVVqEkp0WYEaWl+pMU8Z4DdLScF1Wm0wG6HWsdEJIXx9Fk62b2/fDynKT3BY
        uxG1ETWRVKjPCOzOlk1x4qrJfOhzEXpA94lhbSSbOmJgAVcvLlP9wG4lyu69gepee1Iry1aAP41m
        A5X5lpPjsj907HXbv4C8ndtpGcwueQ3+4ENJMkO8VqURDctdxFr3uGdTnDtNP9fBrED7lOc02dRJ
        xR57gcHdxVWIiwqhm3rXdkF3vLzw+mD1CdfO4Qm64upAwhYoaLrcDV9/hacbuTxBZMtB9xSgWeec
        bvRnhjh/CzuwF1OHWGniVOuKIQZ/7wutUjNZquL5ArtV5ZEI2HfOCvFswUaywmllHGgyS81HhHQr
        BiSquqif6Vh/tOOtSyYpCQbAwMU+wXpPMqyy9dDN6kZK4WEvG1jcnjzEL5/4sCpK3ZxUf7YSrr4E
        AUbHHJNUTYeOg+IdQznLCuolr6biN4ulevNcxXTjbw6cw8c0wOFjp1jGn6ibGGQlhE+8xSLJNh3v
        7UCAGlsu01KOO8THqWbwHNjGNF4CZnO5BQqIBxxOKltHHY8OKIa3U3mfQFrL3djTSQPdel7jZaVY
        iOm56cIuyzk5e1WM2OHDFj1kmy21TuqhYv66hFDQOmFaUnHpWVimrRaigEySKEXJIrT3k2Zv5JZs
        hJVTTbjMUnhRrgfq4k/UU++SabDgY4mVYJV2j+Nxu0BkIYu4dlpyttxhBGwxrict12Uwmd3hAMIc
        e8SabZ0PTkdDWIalToktXfkSHkENNmdDpkEzOmhOBG+C1I0T6ihPr//chpMPAn4vqOnttt3M9esO
        HrcSndTtJgQcfDwNbOwSYfmbn2cxmGCufRb6fS/dOIZnH+ZL9CZb4f2uFrjOH5CaKxHrorDrZ3/N
        DRBao0tcuV0QZwNuoRCYWxp8ejehqxPyQXdrGro93tVuOUrnEG7tQqDo9qrRoKvqS3sjx6K2p985
        v3L5BtscrPAuG2nC1hqDertGBQ3xSqrmQqVYs/jHoI4QG5W4VUUZ9s/UpCVeScliPNatdh98Rn55
        Ng7dkuuwz9YkGp1vvdy0Fp6VGhJyv5qJlGUnBnn6udIo4AzNimFH4Lf+P2vY9ksW+in88pkaslkn
        NN/1NQDH2iJ2Im7AfBl4DvPOhdTdZU6/fodRCrxhXeHMLHbJXz0bnvBC98h68Xe3yCd4sIaEhqJw
        rmj5VGptf3B7GoFbgphWFil8qrGFx+Nd7WdZ0DBEaihS53GzEjpO9QK7CaGJV+qrY59R0sBm8DuC
        dkOVzL2haJDqsUOjfKPZ86rQXCg5d0xrWQX2MjZzDNfv0qYRKhx7FkD7gq1ACbGUp1hx5vQi2NJb
        i6U+V9CgW44Ftx/vStzXkvUfd6+UUEHcI7/8ZOJz68Nn6WfEcrtXvzyR2ILeognWnZTwJeieUN3G
        XT8xnRcdhQd/A1eq8yT4oIgdu4YfBiGyXxhe6cLZvNrXoLArhGHVDX3jCtkBqlF1p5uDpdjz2+Mx
        PM4PRNyHegSs/6QTvIm7nhajs0/uX73WuGFyvJbtmTO/sG9wPOYVid6i3FO0L3xovd46sZYKIyZu
        qQIja24oCXiXTOdwL0C/W+Nf/Um4cLml0GBBSS0x7Tlrbr71y38MA75DDCmdol/PrKXGCr353C1y
        DfGrD4mfyUk/srdUQ+zG7lTL+ci5bdcLhEpJf/fXLU/7Gunt2IwTyHczoJ/GyOExmBxqnPd3ztKZ
        h/rR8gmed+P19zwF8LwOEfb42+X8qNEU7h4vSi4WiQALYzOC7xJTLJwsI1nrndPCWVre0+q7v0Er
        iwNM02Gi4aAW/ddPueAcmMYkh8qcNJU0CtDX2pkEr+UFpnT7brXrscAESettwttAG4CyXUNKQkkH
        Y5alDN42IqWbs3NN3o2EB60oVyb1+ZnaX97uwFicd8S6GHm3PMbRBZFyYyQyDhDdX/MqhLdEOBHv
        q29f/mFoZIeIhG6xSeZJaB7g6u+v1NRdsZ+lppV1fZVfyfnL9/fKSGW4muKC+nZ8tYeScRlqYH/G
        glXduqnxzQHuHh86SfIU8HE/WzGsL+GFuicg94MrW4a+XMaOeKo02kvY4AXaG7GlpBwgn69EhJAb
        NifbFqCK00uwAY87yalZ9rZN/eRa6iKALTXua5kvdmq84KwfLvhZexTNwn26Af2yiUmYfnDy9bs1
        DJIkxODLv2UkzwPYbEFA/QrbgNW9VYIv7ybqtlkywSKIgFqczjSMjg4XP+TRwGTj7khwuzTVjHTZ
        hYbg3ojnakIyDHUTwXlVpAQbaZusI7F8/X2vuNXzalKejgBXa2Oh3nPxOLs/rgpk9B1QNERi/ylT
        vQW/egttCXfir//qGzjSLx8SvnakGqTItWgQ8BN/Yx638IpfEjkHLkLTyhAV4HZM/PV/Pe8GiOE9
        bp2vnswdo/iJoV7c9zTw57Ya500/wUcXdhRBO+m/+nIDk3k8THPZd+hv/W+OV4mYewoTVoSFD49q
        aE5Kryo9tYtYBttrn2O1Fp/VIr4PGKKP6RHPLfZo1lSDwaufXAlxzRcajRWcgDCJZxoI0pYvcZQ/
        gAU3ASk/F9wNCrp8QJNLd7Kdo6yan1j/aJLWILKh6zyZg/gdg4KxmEaCZCI5WcAO9gidvv2rvehZ
        Y2n0WEvENbdKx8pj/YA7N20oGpegExuHfbRffxy0D6ub+XOMINdLlZiGbHEa5EmjO5CbhGz8sOdF
        X3xAwZaY2k8hSr7r3cCXt5TMuZGIHQKTpg2IUScVHT4rj7sCMDVqajlISQa7DDWo2VVOXaBZyWxf
        zi54n/Y3fCZNBqajlIWwcR6YktUa83ESXjcoEaJSp/CmZG7lywt0a76m4ddv88cmiP/ybfM+jx37
        kEcLCJMu1G5GoR+NIrZgfBdliq6jA8Rf3lgn4YQHpC3Ju0lqHwJ17RIEbd4zKcQDuORbD39cbd+9
        5NdhA/YDw+T3/zb/HwAAAP//TJpbD7q6tsXf96dYWa9mReTWst+4iSDaKnjB5OQEEBQQUaClNNnf
        fQf85+S8GiNgJ3P8xphzp6YqDIlyJ0Of9CFXFsAEOzd44kkPfJa6jwWkdV1g67sNyka+6TFc79IR
        T/4xGdWrHMD+CGK8G3QIKBpYCjm42HR/9gkYdmHgapmy7NGKfBxLONBjAC9t1mL9lm9LomfdTuXl
        iP7wa4ISBHfXGOHNXnu3g2rfDzAf1nvsVPneEs5iH4D98xNRQxcL8AFvUYTxcSFMevn0u3sdHcDB
        uTzoXpWQz66XnsCNIofT+/jmnFtJBVI3LvA+/95D/qiVLaR1VWB06FDbbcZGBJN+UCvdsaQZdxmE
        26PAsV+kEueumacQRs4Do7Ee28HPnQa84+2Z+razDTu4rnfw/ZJE7IbffTJsxkZQzKoIERCOcsi4
        9gngsy4Ana6f8NY/B/P5k3Xcl3/84Vxf11VRlXzonAIWjdGhpa++ShZ1zxGa57imfsSW1qhfDqom
        VHGHN/Uu4M09ogVwTu2GwNeT+N/311ehHUMDx09TbcfGDU9wGFbd1K8/gHzak/DTD+e0eQB2OfIa
        xLfHl+73bzkcoXSotRC9EN07qg249STuzy+JRY1DvnhLXzCdL9V92gMqm2kA2lBZ4XVCNUDPzHKg
        d9ydqXvbPNvhFkvj7F9J5X190LnPTFaDS+9RG4sMsD15RBAOooLtZFe2vNtAG/ZS98VYv+CQzbyp
        mIOKVvf4Asj8fN0h/mDrWT3bcREHLgTu5Uw+91SyKBqUFPpeJ9MwikV/1IUmgNmFXEg36JDzy2qF
        gBQCE1XP6MMnXkCQSasM60dwspghuDvQqq+IyIrbzPzfQY+/b3i99v12TN6HGB6Fy5oUW5H5HXUS
        GVZvzGf+tpgEjuaPh81LvGmHEcgH4J2vS7KsSwCY/uwvINCiDtvMsK2hLnUCkXsBdOs5Vz4u810A
        ztCkaHm5CQlnpvn99f8NyUHCXTaMWnGRtnQfi5t2EDRjp73W9z3itCjAeFRWX2jWL5du4jMHbCl7
        GcB9tSFL0uRtTxaPSltGPCJyG7XJwJa3VM3zQaPeVq7Kjx+OaNZn1JoJS+gJLit4trdfqidR47eu
        mWdwfVlnpGyHd1lP/QDUwnlNven/58ngj0rUv1VSMOsO+uDa6/BapBlpV1If0uzV7IBrpFua+moQ
        9mb8hZAccos8HfpIWCFevzB4nFfUWCwDv1evEYLgsUvo9SbU7UhebQyk0qTUNZOFxR2Zu/Bw9Miv
        f4sbOXRgNKIPnfg96RBxT3Chv2x6u30TMJ5oYEMru++pW6MlIEZimWoIFmeMy6Zsp/puoKqghjR0
        W7cs9OUCLL1Pi3dLCfzxx4J4f1LvINZWyYGLoJnCFEfT90dXWyN486XTnIdY45B9dCCatjnx3R0M
        Uvqsoe6gHHsbx0tm/6jN+Ugfi++W7M8tUsUiOuKAuOuSpJ35gA+MFKwjLwJ8qfEOTnqJdw9PAxQp
        9gBXpdggPvm9r+qQEygBsqj76seWE10hcOHAiN6Fe5kM5Wmjz/xAVnVVJMPCWW7n88OJvYIhPRyO
        IliX7oUMRvmeeW0B8CDl1OoqrSQR4xB6CQ2RP/H1+PW6A5j7kXnbAOtzTJwdXMR7+uNjHvDkAp/X
        BJET//Ap77g0QDYOHr7JcEgm3h3hNtptaDRCg0/5iAglkzwIL9aIS/k3PkEh+YZ4nest/6YXJwO1
        rXhIuX0BZ0KXn6A0EXp3vNYl81ffceYfbB+RmXQmf2whXXWYmlneJhyv2gre1ZIRKe9tiw1LVkBg
        aAbeH29hOWLUCOqlLx/U1ZJDOXpJ2sBHn4XYcg+olMwUmnC82DJaJehQsuZ5KLTaFE/UuIUBEOMv
        q+HRVj2yStDQcqjbOqTnSKcb7e0mq4ZJ25+f9Kb7n/KIk7L1nBixcLNruSOD7ezXydt8r8CoGHAH
        n81r+D3/4DzWUFZH6UTN2ybx+9r5nsD8vHN/6I9se4DpMj7RXS6ercE9DAF0BO1COscQ+KBHbAFh
        ZD8QVe6Vz+/s1MGXLzwxPn+LhLD91QGTflBH4Q+rZzC6wKAcDBpANQXMuhojXGXXmvRTXtFNvALt
        eGEgqYivLStsN4Orl3Inisch6PaPvAJE2tZ0zjO+TV10wJJwTSQZR1N+aULo21jC1kFcthOP6MCr
        7t3Mey1dKEatzf5Bv9Yd+OVr4GgTvFPuA2f944igGAbVL/8et4tsCya/T3EuuokI0iKG/bj/YHS5
        bpKhblMTomvakFc4OYHkdE5BWb/PqFAfDBBdaA7wZt187Dp7JRzEx3aAtnMNKao2tj/Xm/p43FJq
        5LtDsjKNPVHpgBHVizUof3mnGqk3xKY8eXwFCxnGu3xEfRgwf9JvWa1PpkjYvU7CMbxlOpjzl+3E
        y+xVNiNwgiqg8/tP18Eh1dB4FKmpLKuSRkQVVH/ztVBjBYbFVMUd4fIlHCiqkRMO1AllRfa6AB8Y
        WfE+k98qvFNSUiQc25IVZHdStC/nRP0sniE7CG0GRJ/02BouMhh7TC+ASVJGPRbd+HchPx/g0ach
        Xk9+b7DkINCmPA9demhYU561hXk+akTNNkU4vM75Akr9s6fr6v7wewncdBjmbKCW9K7LDz5+FhA+
        6Y5u8r7yu7ezDeTBkRm2Ducx7PzhUGvapfHweUyMhIi2nYEzr2rsBOmGC7a2iwHL12tqxv1gjW7o
        neCsN8JeO4WcP4sFmOcf5le6lsPK4LEqa6FMtFh8l4xlOtQm/UY8FGw+yM+QzHlF3ySU+dxQxhQe
        B6AgSYI0+f7y0ch+4Hv+1cJxdX+Sef6AnSj+hNy/VSkwcOhQ/WkZllSx+gT0+3DGMx8OE+8ASdgf
        sbG+Hvyx6/oRbkwd4U0VrsIxw7YD94dUnPzy3hqezeiqA209Ai5XwZfEFiPVoO8zalznarFYRDrw
        3zAg8kpSLcqa10nr9U7GlpzAknfLpgNZxH2iTX6kPYxmDBdEvJMxjT4WGZt1AE3e6PSAnx+f9aYn
        zPxFFttHkwyrrdNBts5iun2acdu/Lc9VqyyPyewHP0K104F5jmrUF6ANP9SvHeg1o49dCW/D/tUK
        tjLxDFJPX5Rwaa1lCj3HOrZWjyrhR1Eo4ANWOrXtICmZm50H9f45Y7ztFKWlkXvYws/nkmKryhXw
        y3uE76BT8/D8+u2Ur855MfUutCxZjjoTWG2xxvuAlXz6vXH2f0RGgeaTy1DqwFh/E6Js3peSPTFc
        QBnsLYyftPbZ2KIYLi7OGqlNzazP3O/YOo3xwbTPPguuLx12y8d58keRPy6KPoPKUz9RA77eId/D
        fvHjc4zeis8E1bXh+oV9IlnL2ic7KRn+8IN/e/l8p2926m+eBQvO2ac2G23Ke+d5WDLzpZay+xY7
        5QaWPV/DLyg7+0K3orX2hzO5LaCnLPqJb0AybsWtOOdXeP/NDbDSoo8L0tvLxkiMetACaWj+zAeT
        qwAaR9yasOTN/qePK/5+oVmvUH1qkN9rS1+AFMsLgmTL4UO2Ayb0bO9O9XY4JTxEXgW9x8nE4aPP
        yr4eyA7kd+JiX0ssvqqbWIWt3mQ06AwrJGyf24DmZos3R1rwvvm04uzPcHIWaz4sxCiF1mvLCNy/
        2pCngqbCpkpy6qLgbrVTPgz5pb9QB/s3/svLa0V0kATItmX7qDpBJdRSvC/TqOSvzTcD8Nnv6D73
        DhYvq0aF1D27aMkiPfm8K6Wb55s0sbhRit/8cQKTfiNhLR9K1pVqDN32ZhNlytuHPXsWYPL7c78A
        YmUeAo0SN6I7N1mCbh3qBbz7mxV2r2nTfkC6vUCRV5za1nLk1GXDABdy7mGkwSqkSNmNcFiMIkaL
        xYKPrePbkERgR5Z37QvYBpx24JGdaowju09GOxpHyNcPYfJjFe/PZNTBrJfe+iEkHU7FGM5+pljK
        hTXgdBEp3vm8pFM9cHr/GLG2NoUNUad6G4zzYdTibaTRnUG6kEx6pO1xEBJ54i++ipsK4iyNsfFq
        c3/QzL0OsaNWeO/v+2SEz7SA6Ta/4m29q63ZTyttHHpzHpeMbmictCx380lv3+Fwj94FzOMjRAok
        fjs6xdWES93Ssc+qineGZFzgZptd8XpHTWsQ9m8ZLNAD4ZNfeiEjqaxr7G4esNuPYjJ+jQME7ql/
        TnnOt2TluEhhnLzyaV669qWPwUyY6SbHuC4Bpyt4c+EwSN3kV/dg2KjCFjpB/Wf+LLaO78BN8lWw
        ca9BUt2j9wOeSjHBZjGGnNN3GsPS3h2JZvOiHMzXMgb1/fOk2BxUn1XrWwRH9DRIyFd+0pVfy4GL
        nAxIhYZTst40RDjVP8Vt/w55X/spZKd6g4R7TdrxkJAA4r7eUOfbcp/bZ6UBaOH6eCNBHPK0K2rt
        73kr4D//+uuv/5k3DOrmnr2mxYA+Y/0//7cq8E98j/8RBPEfKv42EUgXP7K///1nCeHvT9vUn/5/
        +6bK3t3f//5LXP3WDf7umz5+/f/P/zVd7T//+i8AAAD//wMATQxU6OMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc473883786db-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:28:29 GMT
      Function-Execution-Id:
      - 943htlyy6kax
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '410'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0088e7fc93eeff22d41f4d712d15b676
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 0c42a04ff28c32089f2947789cc9a10d
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6585'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5xSy27bMBC89ysWe5YNu47z0DFADkl7aZBeWhXGhlpbbKglS67qBIb/vdDDcaIW
        bdDrcHd2Zjg7tCXmaCpSUwc3Ofv4Zfnh4uft5fx0dhVueXnHUT+Zm8uba3uFGfr772x02JgaXwfH
        ar1ghiYyKZeYz0/Pl4uzk/l8lmHtS3aY4yboZDFdTrSJ934yW8zmmGGTaMOY7zBEXwddqX9gSZi/
        P5ktMjySPz/MzxcZqldyx9nl+ek+Q1N5azhh/nWHNacDcfSOMUdKySYl0VamF2VpLewKAQAoUCvf
        bCpNBeYwgMMDP2oLFngNwlyCethGqwxaMYQqUuIEVtR3gG80NDrVR4W1dQwkZYsLNKnfUEoPq8EX
        g/F13Y14eMYOU9MCs5dKIlPyYmXTy7mrGKwkjY1pA0oQ+UdjI0PNf9FII1n/vBocSX9wAp8HDx33
        Sv2q43rh4e3BFIUc+d6eyUiciVatsake/xBLamK7RgrXQHWnzMrmlTYypomk7J66PHi9tsayqHsa
        h5AC08PhxtY6918V+FPW/ZV9dujhYP63GgrV3At4Ff5IJ8XNuMH9Qzt7pDgqfLU/LnzbsNDE4BjY
        cahIFEoSwyV4AYJIVu79FrZVa5OpC5hAyfhnZ527wWQhe9xnuLZiU7Xq64w5JvUBM7RS8iPms/23
        /btfAAAA//8DAJmgc8qTBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc47d890d1409-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:28:50 GMT
      Function-Execution-Id:
      - 943hmonk7tqg
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19915'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4fc6ff25166883f3b617aa4b48ff0466
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86893'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.071s
      X-Request-Id:
      - 14236198d5d7299e52b06fc80e473e0d
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\":
      {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=\"Command read_file
      returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\\n\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3029'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2RRzW7bMAy+7ykInh0jWZK28W3HDsMGDDt1HgJGZiK1MulK9JI1yLsPduOtw44S
        v1/yjKHBCp0nc20XZ7efHtZhd/dozw/89eV0XMn8y83H0+Lz84ttsEDdPbKzK6N02naRLahggS4x
        GTdYLW7u1svb1WK5KrDVhiNWeOhstizXM+vTTmfz5XyBBfaZDozVGbukbWdb0yeWPAjM3xf4V/zP
        YLMo0NQovoFulpcCndfgOGP1/Ywt50k3aWSskHIO2UhsSKliLEODezhShmvqEu4hsePwkxsgcNq2
        JA2YQmIafvYhMjiKkRuoMUi21LshXN4uSjtZjTASPMPVAnQ/Pl+ZKkZBRvGocoBsKchhwDhPiZxx
        yiV88zxN3jI6nygz1DjMuz51kYEjd57EoCFx3IAKECQKstMjHP1gymSDEoGR07JGeK1sngWmBjyW
        PKZgDBTjmPjVLkMQ0/+qa29db9fKRx+cB08ZRA12zDItFH6xlfBhb5xguqQcRnmj/FRcs/wbo888
        ImocMNsrj2ucDlLipcB9kJD9NjFlFawwm3ZYYJCGT1jNLz8u734DAAD//wMAT6nZ59cCAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc5127eeae25a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:29:03 GMT
      Function-Execution-Id:
      - 943h6q95dqv6
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9179'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d22e12124f0ec5947f542f96d48c19e5;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89263'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 490ms
      X-Request-Id:
      - 8f8d29b68085f5e6c18b117faf76a4a8
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I received a command
      to read a file called \"instructions_1.txt\" and the content of the file contained
      a long string of characters. The string contained a phrase \"The purple elephant
      danced on a rainbow while eating a taco.\" I was then instructed to write all
      the phrases into a file called \"output.txt\" which has not been created yet.
      After completing the task, I was instructed to use the \"task_complete\" command."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to write the phrases into the output.txt file
      and then use the task_complete command to complete the task.\",\n        \"reasoning\":
      \"The instructions require me to write the phrases into a file and then complete
      the task.\",\n        \"plan\": \"- Use the write_to_file command to write the
      phrases into the output.txt file\\n- Use the task_complete command to complete
      the task\",\n        \"criticism\": \"I need to ensure that I am writing the
      phrases accurately and efficiently.\",\n        \"speak\": \"I will write the
      phrases into the output.txt file and then complete the task.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"The purple elephant danced on a rainbow
      while eating a taco.\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command write_to_file returned: File written to successfully."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4936'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSS2/TQBC+8ytGc95ESRM3lW8IVFQJiUsRCFxF2/XEXrLeNTuzfRD5vyMndtMG
        DoC4zs58r/12aEvM0dRaTNO6yer9l4w/XX72b7LXb+8+LN+5S77mUF/8WKUSFYbbb2RkuJia0LSO
        xAaPCk0kLVRiPj+/yBar5Xy5VNiEkhzmWLUyWUyziaR4GyazxWyOChPrijDfYRtD08pawpY8Yz6f
        nZ8pPIIfH7JMoQTR7jg6m686haYO1hBj/nWHDfEIHIMjzFEzWxbtpZcZvJDvLewKDwBQoNQhVbVw
        gTkMw+GBHqQfFngFtb4juI9WhDxITdDWUTMxWC9hPwhJ2iRTeRDYWEdTuAJPVIIESEz7FdG8XQ/G
        CExoGu33C0+zcWtaoHouJZLm4K2vDnquawLrWWIyfUIMkb4nGwka+j98rdP+QDWBj3+NdgJmohVr
        LDdjmGMu5DnF/kwLDBGPWOUTGGhjUtRC7hF6QtpsrLHkxT2equaW9HYkubfO/VsSB8hOjQUZ1n/p
        h9cNHdhewJ+I0rE6rdbzP31RsN+4D5t97ayv/qx2o/y9hcFJ4TvsFG6st1yvD7yYI0toUaH1JT1g
        Putuulc/AQAA//8DAHIz3XYRBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc5517afa22cc-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:29:18 GMT
      Function-Execution-Id:
      - ddfr584lba4w
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14627'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0fd409005db41c3e34fa248ecfc277a5;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85966'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.688s
      X-Request-Id:
      - da48d7b8674632c99add2ef824474050
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"The purple
      elephant danced on a rainbow while eating a taco.\"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '301'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOwUrDQBBA737FMudNaZomrXvTg2CoBxEvipTJZmxWNzvr7tQWSv5dClqvD97j
        ncD1YMAOKHaMvlhtXpqbu/tD+1xvnh7p+uG2y9/L5Nv2+NWBBu4+yMqvMbM8Rk/iOIAGmwiFejBl
        s66r1bJsFhpG7smDgV2UoprVhexTx8W8mpegYZ9xR2BOEBOPUbbCnxQymGWj4T99weVCg7Cgv5B6
        PWmwAztLGczrCUbKf83EnsAA5uyyYJDzIQehcL5HFfcpelLkKQ4YRPUYrAs7xUGhSuhCxweFoVeE
        cuaoBC3PYNLw7oLLwzYRZg5gIAtH0OBCT0cw8+ltuvoBAAD//wMA2vTT9VcBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc5c0198d02b4-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:29:23 GMT
      Function-Execution-Id:
      - ddfrdmu6tby2
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1655'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d4b7edb0ac9579b3bf3ea687eb63f9ed
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89454'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 364ms
      X-Request-Id:
      - 5dffe12ebbb82bbd668b148b4c2303c5
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The purple elephant danced on a rainbow while eating a taco."],
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '139'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc5cd6a86630f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:29:24 GMT
      Function-Execution-Id:
      - ddfrjb0n2a7j
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '142'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - baf70805432ece920434831dff70aa1d
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - e47525633d796226c4b1f047beb830ad
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a purple elephant dancing on a rainbow and eating a taco.",
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '134'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1R6yQ6zSpbmPp/i6m7plDHYxCF3TGYmAoMH3Gq1jI0x4IkhAohSvXvL/lPVVRsv
        MBKK4XzTOf/xj7/++vud18Vl+Ptff/39qPrh7//1fXY9D+e///XX//7HX3/99dd//H7/x5vFMy+u
        1+pV/l7//Vm9rsX097/+Ev/ryf9/6V9//e0J5xez+2FCs+2czoh+8hNFmqimfXlTL8ptZ0rMWUlt
        MKMNu6C98TyyzfVzq6dq6igqxv1E9HtWBOOjtxqkbLeYGcvjVE/m430A8tylxE2rJhjnKqiQ0Q0p
        CZbhMn9YK0eAVPNXVG3lZ9f7QzvCoJg95SfzwKe+K2JUuLuM+JkbBWOWVi3q565iroAR4mMZHmDv
        r3PiaHWOWnFluNCxF6NLuje7ud7VFWibB6PrSKm73i3mArKVVRPNIqE5MrEe0fJt68z27aRmzUrt
        we7XDtNum1M3H9VUgNH1OZaPxDGnhdqdAawjoshqPT4Xa9aj4XB8YRZKY8oP8clAT3PfM18SX0GH
        sqYA8XOs8NJe5XUfXE4xyMS/Ee2o3c05LUpFsT+RSpHRVvm4LGGEaitvqZDWEpo/i9ZAsiIbJLrD
        I6WKeA5hl9eUOU6x72aar2JY3O8mwafdPWhzX33C/elS2rTOmE+hVlcoNSUDV+vE4fMhSm3lJWx2
        eLVMz13PllIIjSwsqai3ajoZ7w1Gbmdg5uS7WzeCch+V7/eocjHrnG0uKIFSKs5sI8XvepDnTgP5
        eGvIpmzW3RxaSIE79mPiS6JjDqXlUHVzr0OmU6syxyA8hxAP9Er8IhICFsozhZ0T5ngPwTMdZfaw
        wB/GHSOL1K+nk/0pUbzMdkxrpSCQqqZqlLItAuYFFk+nXTf0oG1SFy8f5yqdgpQUsHngA17vlTmf
        Ki3L4LTwbaLpuyTo32dhRMeTVhEXvBaNU6LNai4QA0uWHaTiPPsNbHRpRUJdrc23UYOIFne5JQ7V
        umAMIbdgO5x65hXjh1Mhfl8UtZopcw/Vi0/VVPeouQlHFtzzZTCJSwuj7hh3hLx6lbOcRADrR9OR
        m6Ft0yk9ZxW6G75BV12GzSnz7DO87uONXISbmlKeaTuIE01im/yzMvlQPUpwtEdEvKrTguXzujbg
        e57MPsmNybWyC0FFm5mYLdvwb/0WSOvbI/Fuox1IaHexwUELF4uvUEpbcb1r4D1dKXOWmtoNvWIo
        i81J3tPV2nNMabdY+iBejym+D3idzuruOIKedXcqveYx5+kufKM5aUZmW3aXsvJsvKGNiUulvZ6n
        ozU/fLDF9YMY3WUTzIqYYCDVoSKGvjRyvt1pAipWRk+bxvkEQ5CSC6xPzYXsF8GHj2Oah3BjwxXL
        zWao+Q3lGJwsNYl20Bo0P2atAEzBJae5U7vhJIME8tFXSRTFc8d0bbAguE/ArFv4qlke8VI9Xo2U
        ToP14OO5SgAE6n7I5nVLU7q2Tjs45eObadZuySdvOx2Qn5x2WEzLBaeCaSfKrWaEZlb/SMcu2zfA
        9hug00Kx6ll+wgFdmzZlhnSRu/5xvQnyshwGFqwcks7lMezRKgkT4uOorPlz7ybwwvaJaLfNuh7y
        Q5PAYSOMmPFqbXbKuyvBfj8ZXtwrMxAVWhyU13qEL55awawH+g4gpQNeRFLfsdoFEUJRpng8bnwk
        cZ/66L0pGuJ0mpMPD+aXsFqvXBKswnXwu3+ARu1NzBUDk+URqkAR3z3t1+d3PcVF6EOuKjnlUZR3
        U7E87gCcvsCr11XmI/jlCub50bFNfxb5vN2amjqbkcCCIbS7+fpybbTVzzVt9AfvKE5OI6RZsGfG
        frng1H2lGAX32x7LjWYivimiHh614eMhClwuu3lTok8p5/S1klqTK++6WoNDCzw3F73jotoLYCVu
        wwxH4SnDh8oFJ0xEHLwOST3fXuYMLv8oxC7lQ82R+8hQIvof5vKUB3whbWwYDrrGbKl+dOONVjaq
        9VBgx8fmg8ZniC9r3x56ZlVhlw728jlDsTu8mG5Vn6CJOr1Bl89TIHj0MaITUmc4fNollavN02Se
        pz3VH974ceSaU37oExge9ESVfv3pZvU+CeoS7IGF0tnifbGNfNg5tcG0dtJzrsW9DyOrDKKvFN1k
        5/JWQLJ1ZqKtJrljYzEpqpSOzR8+7rmxyWBFcfnv+zxc/R4dm94nh1iP8+ndf3ZIip0ziaLARZP4
        PD5RGdgFVs+6li4x1s9Ii98eM5ct7XpHC2ywxeTIvFRp+Tx5mQa3xVkihpRYAceH1ofvedP1bUkQ
        s2A6K0r51ti5XRvBtI41Qz1T6fzFvyufJdcCRbKcgNk3OUgpVa0K1o/EIpE0B7UUmvcCHXVjQ8Ug
        d1L+2YSKQjfngbin6x2NgjJc0DIyX3QU+r05qbGTQWmeauJw5NZL46nMQPD7wtKPmObvLts/Fcm1
        gQQ6Y3wu90oCa/XhMq9/9t3rwpwZ5qWAidVsL/Uk10KGilgj5Krvh3pUP1miKGWrEbNnUTovT8Vl
        bVajjDkXlW5csk8GKskJ01q0Q2weKqzKyPswb3EJcopSrwVT4BvifvF9xmkfgv8Za7Kvbu+UvmPU
        IL/NJ7xypqSez+tyh3Z0tWUkmio+7Ns8Ac2L18xtUo33PFYMyPozokgKp6613LcPc/uIiD28rZRr
        W+mJWt48iaOiApXdMXDBe2Y+++5PJ93eRQjjTfyQoDo4NT/o/Rmuq8WTRYPc5l2Rb88Q9uWHzr4i
        m/zx6kMIXbEhyepyM3l9/BRQvI8pVVqh4zPNxxj6Qr2QyIg1czrKkwudAHfmhYsp+LPeLDxrJFgY
        njm/q8hGzXt7YUGzfeTj6uq56EZoRZ/j2w3G+IRmpPTCkm4lT6kfi6E/IPemikx/eCXi+3tVqn/W
        t9SuHbfztwSuc/BYsAz3aR/1F0393m863bFfj/unsUIe7lPKhQdBr+3mcgCvOp+YVyzT+g8/Z9aw
        YYHX7jg/To8E/fBlWihNPZ2PEkWzvXapSA275tVK0eBFc0ThwL2UP6RMQsfooGAIVmU9utfS+PEX
        syRnYX7xCaCwPphOnfcO+CqPWuWw3F0p+u7H0KP9AYT2emN2NT/S6Wasn7/zJ4flm5vT5fkyoOUo
        wmtrYaTyI5Ofyl2VGmYGplbzjGlnuMkMMTMTBpOTTdYCEXYjVj+wM2Uae09FPl4b/Lb6Tc6pwTJY
        358KsbW4QJQN0UWRAw7M2e9W+axFzxB98Ycu7RXqBilFLXQkiZivHz2T31Gh/NEjzhKNwYhPo/UH
        z6MK9G6587eF+pzZiboDrsz2tlydlVue+cR29Xs9pSCHv/0jzs3vzel9qRJQXMFj+sJCaH7VxwpG
        uSppJzkOl96JbaCj141MT6s8Z4/naQRxe9xQ+OqjOT/DG+W+3NBuCJ/dKI+Lcs2aghJ/n1wQFdsX
        oP0zvmB18a6DqbAsA5p3eqFtFDXpuG9WBZiH+U3C4WbWvGqjM9hifGS/+nmfG1mCNo5cRqRralIt
        oiHIuU9JEDzMbrhv7ytgu2nPbD4s8x/foM+lcuhkvRL01VMrCGPZoJWjpOnoTIcz0O0ZMJU2fTqj
        WuvhOZ9nolfpWI+TufOhlCadLprqiXgi+qNyYtOOYck/mPPFjSmKyMphF12tg3EQSwv6eYfw1HhW
        J6IAHZDV3t7MeWw+nIGtlYC03Y7Zi+LJv/h/UCaCD3/Oa6wxe4N+0Sxi5QcUzHFyLaB7goUF603T
        ua5jV03EW0z8U8SD/sjfIxxPR49sPrczmr/8su5tYYFRUSLzD/6d8otOkuEupYMQtSXET71iOKpJ
        PSYfoULdMemIwzUp6AQ7xHBeeMCswyEOJo9vnsii7kzXeyXJJ5UiG5XtJSAef44B7Rl9w6qtD4S0
        1ybl81CFf/iDOIiiH56CvWtMphk7nNNi/erRnMQeyz0mdG97u3ui501PmT2+3yYv8m0G9jYq2aa5
        ET4d/KuL9uc4IsnrjvlsrXmBTDz7WDyFWi6P2xuF4HSRWeivmpzboYhV9DZ8ynnrmNR9arN69R5r
        QlIpRWx1Qhim4B4y9/Da1pPumpmKZ1hieUD3lK53WQa+bxNmScY+n08QhcDVQ0bX6fIeDEQwYuCP
        tsKQczHtAyzbSlQ3EfFC5ZX3Xz/84xdmRlH+05MxajuFEee2MXJR8BIfncw5YKFvoJrXr7KCSWhM
        ZjhLr3uzpqfQofTIoh6OnF/Cjw1ZzHYYmqbKqbx8C5DjilIemW4wuoVSwGOhZcwJTgHi0Ylo6Fdv
        P3/DI+kdQxoGNsNpEZk8eRQu2gVhSIxwKfIpO3IDvv6Yrl9dF3B+7Vy4LOMnnsMxCKaDUhhowFrF
        LO0h5/zW7Xyw2uubtifXSzs37yuIbe2F1V6mAb24Wf87fxaublIwNAu9WX2y6sBwUSzq/uDcsLJ4
        hBFzCnKq55/+LFMLSBQHYTeOdRIrWWnbzK/MtuYo6wswq0uMy5P27iZcuAUY6ZngoigW3fhxEwkm
        UqlUtMqhm5MplOCnr8wVu5izL5klsNE/MB+tc87k/uiCUEwyMZzlpxsdOlWQ1pJKzI1rBnyNnAJW
        cy0So7+M6ePLNyDM3oGFQxOlM/DggrQeBIanjZ52J+InIJ9FhxyNU4km/w72uk/eL2ZdQisYUGnM
        aHx7lAR6+wy+/pii6rq8Eefln7m01U0BXuo4MKvY7oOvn6ygpztM9A5veXe9Cgk8pcGny+ZsB+LH
        TUTY4+aBxwLZgazImY9KM6+x2IQzmp1VQ+GnX9QejmiYpTPAT7/sTts2GJB+tKCxHke8OPUvPlTj
        KUHJhZ8oeh3mmjVyl8BcoAeVmsE02Ve//PwG0++ZYDIPPXcg2PxMSIjOQU+6TQKCXzR40Vf7bv75
        NRzEJtnoq7Fmn3QqYRFJKp1O6aObv/wDobikWA0CPZc9z33C5bo+MM9ffLo/fsOXnBMz2vtcD5fn
        S0N8vVh+8yeJz+fPPYHJDF2MVuHJZAtpYyntTSmZzeZFMN2aSEJfP4DXjqealAbrEM1+kzBPeqZ8
        fs2hD+/pRombXR/d9BhWFhjducdj5t/Q+M2jVNQYJ1rxu1p/9FWYgHkY32yz/4yII0+W0AJWJtv4
        fIv6r95EfNr5LLZ2S/T1By6ybHfPHOvk5uLJ2PpA6OdInIN/D1h8eIiwPZ00Qg/FiDp+iSms2pCR
        /a2hORvpCCq9DhMxfOUY8Go1a3B5IBE/DF4HU9dqLjwC9c788Ijq3o4NH5zs0bKf/perdpOBAylj
        GyE+5uKPv1x+TNlX7wX8oDcZ+LZdkHDZXAImOEWLwvF++OYRT5PnV+WJcn/ZMDMXxo7f+ucTdcG6
        xaN+ytEoLsoCrvv0jk+6t+R0f01c9X6+2bhvGiMd909fQSeZz7+8EM1xtasgc8+E/PRK7wmQwCcU
        KQtjbpicCaOhmuf5RFVrP6XjkZejes6vMl7mn1XwnM9DCKzxHTzHnZ6P0ZVlsD88zG++EaTy6/VS
        YHXAJjGy5zPvvn4HlM+2+/Ibq2c7q1bwzReYp3t7Pq6K/AlvUdz+8YvT+IyxOh3rnOG19kzHpy9q
        yBMGTNz9a5mOd6GRlNKxhq9+vAXUzEMbZNPf4umQBd18l+0SooyEmH3xdpjkxxl2XeQwrUeQ83F7
        7KG5wZHpo/Xp6DXLL7Adx5jhrMjSr/7CyEHtnWFOIKA0HxP1FuoZCYbtmH6+eR0q23Gm/X4loX4d
        +fZPz5DoWz9SnFwvCso+GZZcXa/HuTIrRJ6HlIS6EXc//AXP6DfEqpx7PcEYlUj0DA0vIXjmc7UU
        bdhJK0b88Jh3fPVREphYtCWB7FimlNyjEe3po2RORuZ0uFjuAdjoHogTnXg6CoFswEoKBWL6Lg0o
        DaYQHPS+E78VOsTSaorRVw999UIc9DjcK8j+EJUuLG2FZuNSlIjrcKWCVTfd7D7d+Ze3MLudRXMq
        K54BviGVSpnscNHD6AzVVD+YrvcrNJWW0yMtbj0sazVCk72k43o4UZ+QRSbmQ77fSrA4VQ9cYt/r
        1luKV2iMvS3TltK1Y4dtVyBxbxBm72Hgoxe9AcK4zBn55j10MbYxKgOrwMv9J0bSEbwKnCZNCPnm
        y+3mpB5QXoQO861jz3l203eQWDNgjto9Gnl6WIGzaBNi4YOe8teLrWB0XU4nv4rTKVycDCDnncUs
        Pw8CyobNBfntaSIeehacbS1vhbLe3pEfnza8XNsIgp7QpcFNU06agKI7vc6E7CWU/tavfPGUyl6h
        mqPMBgvF9h7j6ZDeeX+jrQ3f9X79NXRjgBcWeh3yAq+rrjR5cAp28Mh3KSGWpNefn38UN58rs45b
        ox6/eKaWEteJx+/PfORGdAbcPR5MS0mRj2wphPLPv9ipzvk377PRaF0/BO+LXTf+8osk5gGVuSaZ
        f/LeycQuHm8a48N4rJ/QBS8TH5o55BIbNgW8twWnyl3Q0LTW8zOyvchg0V2fee9FbwE5DNaMrLLx
        pxd9OFwXEYucvYja66eH9bI5y7/1dL2CxhJ2adh+z2eJpmWt9CglUkyn0Uvz3pmKDPzEHoiT7xb/
        rhfcJcKfvEfaExn+9APG1STX42E3ZSDJlw85JqciHw+2NcLLHyTipLsYsZ7LGlyu6IDl4BRw0VPv
        0s9f0ts3T+dddZfAO9MK81U751LLWgGyXVbQMd68Uo6OZ+OXx5OffxvNqs3gESzuzPzqWyklYgwH
        Y/tk1nql828/AoP8FA9k1zpxOmftaEDHHgyvLYtwdnfXLqj1Zs+iYda+euscw4O8O2YN4ZVTQUfS
        L59k33zY5Pnl7QP9WDNexZVWD4KgSqjyJE70Nr3l48+PKbHwIpsvnkwJulvw1fPE9aZzwFdZOcJX
        /1C2n6aaBrtZgKv3Wn/rNUff+4LRlw+x8CBPk75vJVa74+PL15cy7d77QADiLxKs3u1LPVKrVWBV
        yJQE90OQSi9tJSLsJAmJnP2Oc7c9uUpO6w8Wwpqnk26PAqwfsUWsbDugceuJFO5n/0bsSO+7ebuY
        ChDs6Ux8/TIjLuUeQLynGgsuhzKdzkfh6y/8mPmtuU7nIC0rNQ09G0tyrSNxsXIb9NVDWFwaJ/Or
        Hy5w96cBo6xM+SA+jw307cdiulHp9fg+Nbsfn1O0L+NAemmjpF6HVMBC55vdfFKUEb03PCCedNHy
        nx4B3MKRmalJ8qUyeiIQwfAwomGFmC04JXz7e0RL/V3NOZYq9MvbiJxtOq6sqic0bnInXq6c6u6L
        72hiZMs2p+YVTN1Zt+AslVvmNJrJhyJZvQFYtqMgn+9m24jDDsX2EROrd2T0Poo8RPH6vKHTgE8p
        lWylgklZrSnAvqqnzaM3wJDtHXE59tKlICwl8I77BcNff935HyOD90o0yAbtr+nYb9YtfPNYdlxI
        Uc1WWTmr6ylOiR8lNGByF1L45vXEE+4rPm2Dd4iExM+J4Y9mLZ1Ca4c2p5LSKl1m6WBtWgyhGJZk
        4/OJvy9TEMMWxoLhTV3yMf4oEhKSq0F0ahkB/ea9v/4iXgzXd8B3ol0gfnqnOAt6F4k/fzAYxg4j
        Hg581sN8RN65r779p8Cc9h9XQt/+G56+9fDLD9TtKdfwKuhd/tifLxgW2GuIHlT9j59L0LWPhZPT
        0+g6Mdy28OtXyjExu2V0X8zomycz/Y79rhdOJ4xe6jz8ue+jcrUkkN4b+d/+7ueXvyDAiCXdu5/e
        Vwb/s8DD3YaOii0TYPciB2Z2rAqaxScFMG7nK4Yvn/Dffl9P24REB7s1u3loQ1A28YIY4dgF/JNO
        1a+/ROxMfqEBL74344svPhKTYBZMnCDzWejf/mFhzh1OzjAhUmJh2tzTIX9kX/2lpcwNezEYjvLk
        //bzq0/lnC6f4xsGlUrEWB2X+ecki6IqxZvzj0/SPrpc4A9+QrDSaglMv4GTPM0k6LYu+lwb34XQ
        kjjx1pfGbH9+8tvv/PW7O658loB++n1/aMycrz3w4QrvkWlHTTelxmouoG3TI9GWfRsMv36A9zz7
        eGnw2pwecSGCJu7wFx9VNFHFbpAeLtaUXnYW+uV/P31L1751DHj9eleAwo/HnNumyl+bC0/AWlYG
        Vm/20pzifpwhPYoUC5ta48tPWIcg2H5I4U4TcygrdIa/f1MB//mPv/76P78Jg+f7Wjy+gwFDMQ3/
        /K9RgX+er+d/iqL0Tyb9mUSg/bks/v7Xv4cQ/v507+dn+L/Duyle/d//+msp/Rk3+Ht4D+fHf3/+
        j+/X/vMf/w8AAP//AwDm5Bzf4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc5d1adb31125-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:29:25 GMT
      Function-Execution-Id:
      - ddfrwtf9lvoc
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '277'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 6aba38570262a72d03a6312ce688dcc5
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 332808839f1a9961ef52ee3afedf875f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file!!!\n2. Follow
      the instructions in the instructions_1.txt file!!!\n\n\nConstraints:\n1. ~4000
      word limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3290'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSW2vbQBCF3/srhnmWjR3Fl+i1hRIKeQhtoVTFrFcjaeu9iJ0Rdmv034ssywl2
        Ql9nZr9z5swe0RSYoa6VaNfYyerpvnDlj7tFeErdg9+rL6vnz38/HR4+Pn9fYoJh+5u0nF9MdXCN
        JTHBY4I6khIqMJsv14tVmq7SdYIuFGQxw6qRSTpdTKSN2zCZpbM5JtiyqgizIzYxuEY2EnbkGbNV
        epfgC/tSn6f3CUoQZS+l9XLZJajrYDQxZj+P6IhHbAyWMEPFbFiUl95k8EK+X+CYewCAHKUObVUL
        55jBuXhu0EH6Yo6PwHVobQEsKgps/0AkVRhfgdQExrPEVvdWeTOfykGgNJag5XGin96cajo4p3wx
        zTF5LRVJcfDGV4Pe15qgNJEFWKgB46EM1ob9W4pgGCScJPqeu0Y3VvmBOoFvTG/7eU14b59rsI5G
        jDbsxow80Qnk1I6A20jwCK0vKPbh36JhS2WIBE0MmqhP81qBG1K7kb431v4//9HpgOmS8cjnPW9u
        7JWjQeGSyZUJFavrrzE0+tmX57ehjSZORs5+ct9hl2BpvOF6M1wdM2QJDSZofEEHzGbdr+7DPwAA
        AP//AwC5jS+hmQMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d121076d8f72958-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 02 Jun 2023 19:22:30 GMT
      Function-Execution-Id:
      - ykrzu9n1z0ly
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12554'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8140c4c4eeb5cf7e7ace7c7f0a750ff1;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - 85eb3052a758608d4171506406610cea
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file!!!\n2. Follow
      the instructions in the instructions_1.txt file!!!\n\n\nConstraints:\n1. ~4000
      word limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step in following the instructions
      is to read them.\",\n        \"plan\": \"- Use the read_file command to read
      the instructions_1.txt file.\",\n        \"criticism\": \"I need to make sure
      I understand the instructions before proceeding.\",\n        \"speak\": \"I
      will start by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6447'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5xTTY/aQAy991dYPgcEBZYlP6BS1XZ72PbUVMhMDJmSeKYzjmCL8t+rkAALrbba
        Xv353vPzAW2OKZqC1FS+HMwfpjxdPNLiKXwuJu9G/Lj4+GG6fRitP+kvTNCtfrDRvmNoXOVLVusE
        EzSBSTnHdHx3P5tPJvPZXYKVy7nEFDdeB5PhbKB1WLnBaDIaY4J1pA1jekAfXOV1qW7LEjF9O5nf
        J3gZfk6MF4sE1SmVl9rZfN4kaApnDUdMvx2w4ngaHFzJmCLFaKOSaAvTibK0FA6ZAABkqIWrN4XG
        DFPog32C99oGM3wPwpyDOtgFqwxaMPgiUOQIVtQdA65WX+tQ9wprWzLU0crmmDk2LdUtj3Hjqook
        T4Akb9MCdexGKsXtsid+rmu3nmOnqmGGyXOogSk6sbLp8H4pGKxEDbVpFYwQ+GdtA0PFL5CgDvcZ
        1j+3+pKkWziArz2Hv3J9nXLDLJPLwP8XxQSr1thY3R6xoi1DrEPbSnqFiUJHQY/8Q2Cj5VMvSV96
        e2cboTf/LYDomban5Ttblq+xz4tn6LY0ycnDvSx/WFio4g7A1V1ucFLY3Lq/S7S1lxEXhFf9t8/S
        ms/XwZcMXLIvSBRyEsM5OAGCQFZWbge7oqXJpO2bECgZ117+RO5IsOeZSYNNgmsrNhbLzuyYYlTn
        MUErOe8xHTXfmze/AQAA//8DACrQOW3SBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1210e80c9803cc-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 02 Jun 2023 19:22:55 GMT
      Function-Execution-Id:
      - rb9b1qcmnw3d
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19709'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0fcf41c12e7c12ba80206870daa4eaf7;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86902'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.065s
      X-Request-Id:
      - b14897eedde5100135ed54e84fc8d77a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file!!!\n2. Follow
      the instructions in the instructions_1.txt file!!!\n\n\nConstraints:\n1. ~4000
      word limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I received a command
      to read a file called \"instructions_1.txt\" and the content of the file contained
      a long string of characters. The string contained a phrase \"The purple elephant
      danced on a rainbow while eating a taco.\" I was then instructed to write all
      the phrases into a file called \"output.txt\" which has not been created yet.
      After completing the task, I was instructed to use the \"task_complete\" command."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to write the phrases into the output.txt file
      using the write_to_file command, and then use the task_complete command to complete
      the task.\",\n        \"reasoning\": \"The instructions require me to write
      the phrases into a file and then complete the task.\",\n        \"plan\": \"-
      Use the write_to_file command to write the phrases into the output.txt file.\\n-
      Use the task_complete command to complete the task.\",\n        \"criticism\":
      \"I need to make sure that the phrases are written correctly and that the output.txt
      file is created.\",\n        \"speak\": \"I will write the phrases into the
      output.txt file and then complete the task.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"output.txt\",\n            \"text\":
      \"The purple elephant danced on a rainbow while eating a taco.\\n\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5005'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SST2/TQBDF73yK1Zw3kV03JPK5CPWCBBQEwlW0XY/tJfvH7MwqqSJ/d+TEaUoI
        J65vdn7z3szuwdRQgu4Ua9fb2fLDLT5sv919bu6afJu9+/5xcXN/+960xfOnryAhPP1EzVPHXAfX
        W2QTPEjQERVjDWX+drVYFsVylUtwoUYLJbQ9z4r5YsYpPoVZVmQ5SEikWoRyD30Mruc1hw16gjLP
        VpmEM/xcKAoJHFjZs3STF4ME3QWjkaD8sQeHdALHYBFKUESGWHkebQbP6McI+8oLIUQF3IXUdkwV
        lGISpwLueBQruBcesRYcRCIU3KFgRZv15BGFDs4pf3jwop1ezSuQr6kRFQVvfHtEP3QojCeOSY9h
        SUT8lUxE4fAqTqiGMYptNGx8e5D7LipCEsZzOAghcZ94zjsWjbF46aC3yh+Hz8SX/86jRyfakLtc
        lVMbFJTi2Kr4HMDQC7QWlLRGoiZZ+3xJph7V5kTdGmuvbCPRaQtXE8wrOBIHeTr3VPnr2l45PA77
        g3ThScX28qO8Put009HZPzOeO4fJW+UHGCQ0xhvq1kcSlEAcepBgfI07KLPhcXjzGwAA//8DAOxN
        WAixAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1211833ed91247-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 02 Jun 2023 19:23:15 GMT
      Function-Execution-Id:
      - iwv95vqpsy3t
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14253'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f692f9152ab88f6a4a9f87178937b5e4;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85968'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.688s
      X-Request-Id:
      - 535844241452390b7f8d44ab5f3c88bb
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"The purple
      elephant danced on a rainbow while eating a taco. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '302'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOwWoCMRBA7/2KMOesKKuuzbG1glB6ay+lyJgdd6NJJiazbUH234vQ2uuD93gX
        cC0YsD2KDclXzcucTuFcnx+e8mb96LbzePzcpOdh+7Z+BQ28P5KVX2NiOSRP4jiCBpsJhVows+Vq
        0dR1c7/SELglDwa6JFU9WVQy5D1X03o6Aw1DwY7AXCBlDkl2wieKBcy80fCfvuHZUoOwoL+RZT1q
        sD07SwXM+wUClb9mZk9gAEtxRTDK9ZCjULzeoypDzoReuYAdKT4oVGnIyZMiT6nHKKrFaF3sFEeF
        KqOLe/5SGFtFKFeOStDyBEYNBxdd6XeZsHAEA0U4gQYXW/oGMx0/xrsfAAAA//8DAICEntFqAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1211eebc0d2321-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 02 Jun 2023 19:23:20 GMT
      Function-Execution-Id:
      - iwv9notici28
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2372'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c21884ed0ce799b4ad679d379882aae9;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89454'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 364ms
      X-Request-Id:
      - af043805f6450bee9fb354c57dc40d92
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The purple elephant danced on a rainbow while eating a taco.
      "], "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '140'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        /H/b//X92n/+6/8AAAD//wMA6S4aoOMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1212035d9e10c2-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 02 Jun 2023 19:23:21 GMT
      Function-Execution-Id:
      - iwv9nvuf3mpk
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '103'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8f3d725c1569db1b35c93d8145923cfb
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 65fe9e4785d34e4fc8dfca0c79af457e
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a surreal image of a purple elephant dancing on a rainbow and
      eating a taco.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '153'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1212087df52cc5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 02 Jun 2023 19:23:22 GMT
      Function-Execution-Id:
      - iwv9dy300ddt
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '120'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 5e0b8ad14aa72f52a5821f44a8db29da
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 646ec9c6af1b9269f0c73f656c19b467
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file!.\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3286'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSy27bMBBF9/2Kwawlw4rrR7TzJkCyyKZJ0aIqDJoaSWwoUiWHjR1D/14wsp1C
        DgJ0e+dxzzwOqErMUTaCZdvpdHl/v/j6eL14ufuil9XiZn21Lr89hPb73Z9wgwna7S+SfKyYSNt2
        mlhZgwlKR4KpxDxbrOar6edlliXY2pI05lh3nM4m85SD29p0OptmmGDwoibMD9g523a8YftExmO+
        nF0l+Nb7rGfzRYJsWeiztFqt+gRlY5Ukj/mPA7bkT22d1YQ5Cu+VZ2E4QlrDZOIAh8IAABTIjQ11
        w77AHI7iMUA7jmKBt+AbG3QJnoVj2O7BkSiVqYEbAmU8uyAjqt9kE94xVEoTBH/KiNmbV03athWm
        nBSY/GvlSHhrlKkHv4eGoFLOM3imDpQHthBMSS7OUV64QhSfG8Ex1dHvoByVYCtoaezUaWEGkxQe
        Pb2PF+2i+NF4RWFSWBuh9y/0PlBJTK5VZggb2g3j+BGRdIqVVL497doQvRKQ8cHFYsFwC1XQev/h
        ErZUWUfQOSuJhuvYkfV4G74j8XTyfVZa/9eFJwUOzfrk9EzHBV78khEtDT7nZY9QhKvHLzgEYu5b
        +SXKCeIV5MhTmB77BCtllG82w3dhjp5thwkqU9IO82n/s//0FwAA//8DAAIxXZgBBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d18d5350cde22c8-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 15:05:25 GMT
      Function-Execution-Id:
      - 5obat7biu7it
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14179'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 39f604abf9d14da1c193952f9663880f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86496'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - 0da815545e05e4e2076cbccde2c91730
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file!.\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6547'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yUT2/TQBDF73yK0ZydKKF/5VvFoaoQLQcqhDCKJutJvM16dtkdK0VRvjtybDdp
        KBKiiOvOzMv7Pc9kg7bEHE1FaurgRhe3t+chrT7eXzWrzw8rx5fvy+sP7/yX67u7O8zQzx/YaD8x
        Nr4OjtV6wQxNZFIuMZ+eX55dTk4vTqYZ1r5khzkug45OxmcjbeLcjyYnkylm2CRaMuYbDNHXQWfq
        VywJ87enk0mGe/GDwjRD9Upu/3R+Ot1maCpvDSfMv26w5jQIR+8Yc6SUbFISbW16UZYWYVMIAECB
        WvlmWWkqMIf+sS/wo7aPBd6AMJegHjpM0IrBNxoaHeujwsI6BpIS1tH21VBFSpzAinqwCk2ystxV
        dj0z9bPdlPF1TVKO4WqhHEEr0gxuwJBAkzoppbSa9Xk8DbRmrJTWdHZIn1rBJhi6xwVmh0iRKXmx
        suy4PlUMVpLGxrRJJ4j8vbGRoeZW/zc0tOfViuUvbARH0jkYwX1P+WIsr4m8KGSv/ooMj7ybaNUa
        m+rj1WBJTTzQGexQ7OCUBYyPkY26H53Jl5jmvPCRB1/d0vxhrCkwrQZba+vcf1vX3Y/9m33tgLbZ
        cJ79/C/XKVRzx/rM4VEkFJfHh90V2t69xD6cZ/PH/wPtvYQmBsfAjkNFolCSGC7BCxBEsjL3a1hX
        bVbcfT4CJePHRSED3A6w5yxki9sMF1ZsqmbdfWKOSX3ADK2U/Ij5ZPtt++YnAAAA//8DAEOWL+Kt
        BQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d18d5b339ac1048-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 15:05:52 GMT
      Function-Execution-Id:
      - 5obai8iqbn70
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '21384'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 58385236cda65aa0a33df1d4cd2d64d6;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86900'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.066s
      X-Request-Id:
      - 899e1a4854d0df02010ac11b5655f51a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file!.\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I received a command
      to read a file called \"instructions_1.txt\" and the content of the file contained
      a long string of characters. The string contained a phrase \"The purple elephant
      danced on a rainbow while eating a taco.\" I was then instructed to write all
      the phrases into a file called \"output.txt\" which has not been created yet.
      After completing the task, I was instructed to use the \"task_complete\" command."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to create the output.txt file and write the phrases
      into it using the write_to_file command. After that, I can use the task_complete
      command to indicate that the task is complete.\",\n        \"reasoning\": \"The
      instructions require me to write the phrases into a file and then indicate that
      the task is complete.\",\n        \"plan\": \"- Use the write_to_file command
      to create the output.txt file and write the phrases into it\\n- Use the task_complete
      command to indicate that the task is complete\",\n        \"criticism\": \"I
      need to ensure that the phrases are written correctly into the output.txt file
      before indicating that the task is complete.\",\n        \"speak\": \"I will
      create the output.txt file and write the phrases into it using the write_to_file
      command. After that, I will use the task_complete command to indicate that the
      task is complete.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"The purple
      elephant danced on a rainbow while eating a taco.\\n\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5220'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7STQW/aQBCF7/0VozkvCIcQwPeqpYeoUlqpaV2hZT22t9iz7u44UCH+e2VsQ0pu
        bXqd9bz3vZnxAW2KMZpCi6nqcjS/v5+/f3z4GL1tVtl8Y+lx+uXhw7uv2W02W6JCt/lBRvqOsXFV
        XZJYx6jQeNJCKcbR3WK2mNzOZ0uFlUupxBjzWkbT8Wwkjd+40WQ6iVBhE3ROGB+w9q6qZS1uSxww
        jqKbG4UX8cvD8k6hONHlpTSNFkeFpnDWUMD42wErCoOwdyVhjDoEG0SztJiOhbiNcEgYACBBKVyT
        FxISjKEv9g+0l7aY4AoK/UTQM1EKUhCIDltwGey8Fcv5qVYXXgcKYFncqeAaqRsZy14gsyWNYQVG
        M7DbQRPorLMepFuPSnMK4sByao2W9istF0sbziDjBNVzYk86OLacd9if/pISCh1gQ8SXxApOUAWB
        5SC+Me1mAnj62VhPUFEL/B8S1aXmLswIPv+7/JW6aYdibKiGNTPRSYk4NP5K56WlDW3kFIzznoyU
        v/oh9U3dNiBzfvAfFjBg1d492ZTS69ShJr0dmHa2LF9ptJ3HUQ2n3/e/uHzWFXX2f/hdUWqfX/80
        z8/w1W/wHOAUos+S8BGPCjPLNhTrzhljDOJqVGg5pT3Gk+P345vfAAAA//8DANrc7VHtBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d18d66078e82910-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 15:06:19 GMT
      Function-Execution-Id:
      - 5obaulh8hjw9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '20409'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0aa86a6458ac594676ecb8f1633a0ea3;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85956'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.696s
      X-Request-Id:
      - aa17a401bbeedb0a2d9b1295419aca0b
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      The current phrase is ''The purple elephant danced on a rainbow while eating
      a taco.''. nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Read the file instructions_2.txt using the read_file command.\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2390'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0yP0WobMRBF3/sVwzzLy26cjVN9QCEQSkhCWqiLUaTxrlJpJDSz4GD872Whbfo8
        95x754wxoEU/O/W5ps3u60PPz/HuPn370u/0pbb69P04bh+fPp8IDZbXN/L6h+h8yTWRxsJo0Ddy
        SgHtcHM73g5X/fVoMJdACS1OVTfbbtzo0l7Lpt/2AxpcxE2E9oy1lVz1oOUXsaAdrnc3Bj/k/w7b
        0aAWdekjOg7DxaCfS/QkaH+cMZP89baSCC06kSjqWNeVhZV4/eCORdvi1wIBLdDIBXBwjInAu5Qo
        wB7jf6HDVacn3SMsEnkCnQn2uFKHldkj+JKz49DB80ygdFKI7NMSSMCBX1ojVqhzc0LgeC1LhScQ
        bauvHEGIcuQpvUNzHEoGP7vmvFKTDi8Gj5GjzIdGTgqjRdFS0WDkQCe0/eXn5dNvAAAA//8DANze
        xu7RAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19883f38a5fd82-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:07:27 GMT
      Function-Execution-Id:
      - afqwo40y3957
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3183'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 7de880e33f6a657264d0fa992fb0af62
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88253'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 1.164s
      X-Request-Id:
      - 59a615c3027c4761b202b5af64237a05
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      The current phrase is ''The purple elephant danced on a rainbow while eating
      a taco.''. nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Read the file instructions_2.txt using the read_file command."], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2228'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        //Mf/wUAAP//AwDu2XAP5yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19885d5fcf2329-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:07:29 GMT
      Function-Execution-Id:
      - afqwh2oq3q7w
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '49'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 651a9a2353639ca0aaa6b37edce7c9f4
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 680cac194dc47560a89d4448124d318f
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "Instructions to read a file called \"instructions_2.txt\" using
      the \"read_file\" command. The text includes a current phrase and a long string
      of seemingly random characters.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '252'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d198865ea1de10c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:07:30 GMT
      Function-Execution-Id:
      - afqwbr7sd2cv
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '28'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c705f6ba69bec0d7d6ea69f32a3a8242
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 39feb579e98e7cc7047ec78a67a1061f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThe
      current phrase is ''The purple elephant danced on a rainbow while eating a taco.''.\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nRead
      the file instructions_2.txt using the read_file command."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6527'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6yST4/TMBDF73yK0ZydqmnV7jY3tCBtkag4gDgQVLnOJDF17Mie7Laq8t1RmqSF
        rhY4cJ0/7/2ePSfUGSaoSsmqqk10t/k0fdrFm33zLn74erd4PK42Tx8fPrx9nO33KNDtfpDiYWOi
        XFUbYu0sClSeJFOGSby8X9zHs+liLrByGRlMsKg5mk8WETd+56LpfBqjwCbIgjA5Ye1dVfOW3Z5s
        wGQ2X80EXsUvjXi5EsiOpbnOLpZxK1CVTisKmHw7YUVhFPbOECYoQ9CBpeUO01km20U4pRYAIEUu
        XVOUHFJMYCgODTpwV0zxc0mgbWDfqI4obGcTPjDk2hB0ilLbABKMDgwuB+WqStosADugA6mGaQJr
        CKVrTAaeZAZcUr8ubTbOnIuXXW3B+Yz8JEXxK5UnGZzVtvhfaAKCu9Llzhj33KFUryLURtrePYIv
        oefuUm0H17NF53CJ+gphmtoI3v8p/Y2z8pq10qHq7ddgic5OZEPjOw3JsAZZDeG0LX7XlUo1XjKZ
        Y//yea6VJsvmeBsy1CT3o82zNuavaf7pL3uLVozXN8y8OD4rK+rdLy97Ayh9cXuzfaObva6/hB0h
        ziADT2pbbAXm2upQbvsbwwQDuxoFapvRAZNp+7198xMAAP//AwBRLCyNNAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d198874ee7d22f9-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:07:47 GMT
      Function-Execution-Id:
      - afqwlzd7wj05
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14392'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 220124c3e8f67d9f53ddffd33e5a8931;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86896'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.069s
      X-Request-Id:
      - 41e35e73e732fbb9df4fd16d75a2e7a1
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The sneaky toaster stole my socks and ran away to Hawaii.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2444'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPT2sCMRTE7/0U4Z2zy2b91+beWnoo3kuRmDzdaJIXkrcoFb97sWi9DczMj5kz
        eAca7GDYxhyaxedKvWKe76f96uPNbY7LWN5/nB/LkpcggTZ7tHxrtJZiDsieEkiwBQ2jA63mz7Nn
        1XeLXkIkhwE07DI3k3bW8Fg21HSTToGEsZodgj5DLhQzr5kOmCpoNX1REh7wf6NXEpjYhEd0pvqL
        BDuQt1hBf50hYr1zCwUEDaZWX9kkvq6kxJiuD4ywFKNJTjCJY/GMwoia0fqttyIPxVQUPjEJI7Y+
        oLAmBHSCRs4jt3xi8VceMImx4lUINvWwvg3HO7+Fi4StT74O64KmUgINlSmDBJ8cnkB3l+/L0y8A
        AAD//wMA8Ydfa4wBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1988ea8dde6309-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:07:54 GMT
      Function-Execution-Id:
      - afqw2vue5ukg
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2148'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 58cb624ed43f17ba034fa4ae1db0895f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88918'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 721ms
      X-Request-Id:
      - e3dff850022e0698709c18ea81540534
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The sneaky toaster stole my socks and ran away to Hawaii.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2282'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        7vjf//h/AAAA//8DAA7mTtnnIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1989025a8a1b6a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:07:56 GMT
      Function-Execution-Id:
      - afqwi07v74y4
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '137'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 37e0ae7b7f629910251546dd176fc4e8
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 01f2541584ca5178aa99e5752015b6e5
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a command to write a specific phrase into a file called output.txt
      and then use the task_complete command.", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '183'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        9p//+H8AAAD//wMAAH1HgOMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19890b1ba06281-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:07:57 GMT
      Function-Execution-Id:
      - afqwx9tqlis7
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '53'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - bb2c98e7171b2430b341a0b4f61b346a
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 71e1461eeea02571e1c8898b2eed878f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\":
      {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=\"Command read_file
      returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nThe
      current phrase is ''The purple elephant danced on a rainbow while eating a taco.''.\\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nRead
      the file instructions_2.txt using the read_file command.\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2970'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yPwUrDQBCG7z7FMudNSBrapnv0ZNEWES2ISNluJs3qZifsTmyx5N0lpSrePA7z
        z/d/cwJbgQLTaDZt55L5+j5f1Yvnm+Jh5lbXm/0trR/vGrN42nzmIIF2b2j4cpEaajuHbMmDBBNQ
        M1ag8lk5LfNJVmYSWqrQgYJ9x0mRThPuw46SrMhGWB/1HkGdoAvUdrxlekcfQeXTci7hF/6zKEoJ
        TKzdb3Q2mQ4STEPWYAT1coIW4zc3kENQoGO0kbXn0ZI8ox8/WIqDjuJinYqlCGjQfmAltDDUttpX
        gkkE1JXgBkVtHQrrI4fejFZxm6d8ZCl2PY+BgGegJ1H3YZyFPudE79m6v3yPh392TMaOFAYJtfU2
        NtuAOpIHBZGpAwnWV3gElQ2vw9UXAAAA//8DABXbyX3OAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d19891e4ec52962-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:08:04 GMT
      Function-Execution-Id:
      - afqwpbs1v1b9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3574'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 31b82b25b17555dc6345f19d759e561d
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89278'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 481ms
      X-Request-Id:
      - bc83928e8bbb10bd3fed213369889408
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I received a command
      to read the file instructions_1.txt, but there was no further action until I
      received a new command to read the file instructions_2.txt."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The instructions_2.txt file contains a list of commands to execute. I should
      read the file and execute the commands in order.\",\n        \"reasoning\":
      \"The instructions_2.txt file contains a list of commands to execute, so I should
      follow them in order.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_2.txt file\\n- Execute the commands in order\",\n        \"criticism\":
      \"I need to ensure that I am executing the commands accurately and efficiently.\",\n        \"speak\":
      \"I will read the instructions_2.txt file and execute the commands in order.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      phrase is ''The sneaky toaster stole my socks and ran away to Hawaii.''\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6750'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RU22rbQBB971cM87wWdq5Gby0pNFDSQFIoVMVMVhNra2lX2RnhBON/L7q4clwa
        aNO+zuXMOWdndoMuxxRtQWqrupycX13PbtZH9HDz/t2X68ur2xt78XBxfPfxSs8ZDYa772x16Ehs
        qOqS1QWPBm1kUs4xnZ3NT+ezo+n8zGAVci4xxWWtk+PkdKJNvAuT6fF0hgYboSVjusE6hqrWhYYV
        e8H06ORkbnAEHxOnc4MalMoxdD492xq0RXCWBdOvG6xYdsAxlIwpkogTJa8tzeCVfSthk3kAgAy1
        CM2yUMkwhSE4JPhR22CGl+CZc9AAvUzQgiE0Wjea6KPCvSsZyOewjm7I1kUkYQHnNYDTBN7eK0fQ
        gtTAJVjy0EhfqiSrxaCXwYaqaqHaNp87248j/VkKTmBXnWRo9ilHJgne+WXP+7ZgcF40NrZ1UiDy
        Q+MiQ8Ut/m/YUqfHgAQYhe/Idj0LDYtO80A2gU/e9vku3DLs96FzZX8CxR5D2f9HH+qSfG/BBD6/
        xPw1b5plfkR/BfkD7jY6ddZJdbh77KWJezh/YDWQtU0k5fLp0CqpmVa7UWtXln/tBzTi/PKlLXl+
        A92wf/P4vaCt2d300P/LSXuquNf6jOGBJRSXh79Bn2hrR4jRnGf9h59He4TimVZPoIGkdUA0lAzV
        E0iwK+lcjeSB1tTWwAdak3NJlvmdsk7dIDLzW9wavHfeSbHoLx5TFA01GnQ+50dMp9tv2zc/AAAA
        //8DALfBi6zfBQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1989446ce6e148-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:08:29 GMT
      Function-Execution-Id:
      - afqw36i1f4vy
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22630'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f0a2b14711f2a3c3c9c232ae11fa8c79;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86896'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.068s
      X-Request-Id:
      - 5cb125e77b7a4a68b7e6657d5d824941
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created. I received a command to read the file instructions_1.txt, but there
      was no further action until I received a new command to read the file instructions_2.txt.\n\"\"\"\n\nLatest
      Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\": {\"name\":
      \"read_file\", \"args\": {\"filename\": \"instructions_2.txt\"}}}'', type=''ai_response''),
      Message(role=''your computer'', content=\"Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nThis
      phrase is ''The sneaky toaster stole my socks and ran away to Hawaii.''\\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\\n\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3185'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySwWrbQBCG732KYc5rYdm4Drr10FJTCCkk0NAUs5bG2q2lWbEzsmKM372s7Njp
        pfSomdlvvv1XR/QVFlg6q2XbNZPl/UO+d7lfPMvjs7/fP32hp+/fHj7Xq2r2Aw2GzW8q9XIiK0Pb
        NaQ+MBosI1mlCov8493iLp/l+cJgGypqsMC608k8W0y0j5swmc6nORrsxdaExRG7GNpO1xp2xJIA
        86XBG/zWmOYGNahtbqXl/O5ksHTBlyRY/DxiS/IGjqEhLNCKeFHLmjQDK3G6wgoGK3DRBssVRCrJ
        79MHlKFtU0kDRLIVeBaNfZl0ZJ1n+qoGNr0CB9j2UR1FsGN3hKrdEUPP6htYvccyDf9GzxI6g0dH
        /zEHkbSPPJKbwDWIRs+1gcH50kG6qvWprY6gc9EKwQsmtjDZ3QE0WFGKIBoagvYAEsqdnLOwDHaw
        aQa+2sF6n70gnDNTR3zVodFwiF4JbNO82yXgWcNY2PqGIPTa9XrO7mzorAAHhQ0RX1/iQJrBp23y
        evsHuAZ1PuUqO3OR+Ht/LzQuShPry7FrhBmeDG49e3HrSFYCY4GioUODnit6xWJ6+nX68AcAAP//
        AwD5A5OXDgMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d1989fb1875125d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:08:45 GMT
      Function-Execution-Id:
      - afqwzog6x1g6
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9336'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f69c822b9c5c11284033e2d56b155a66;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89224'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 516ms
      X-Request-Id:
      - a3bc43c35f52b32feb4c9bb14386a655
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and received a command
      to read instructions_1.txt, but no further action was taken until I received
      a new command to read instructions_2.txt. The command to read instructions_2.txt
      returned a long string, which contained the phrase \"The sneaky toaster stole
      my socks and ran away to Hawaii.\" I was then instructed to write all the phrases
      into the file output.txt, which has not been created yet. After completing this
      task, I was instructed to use the task_complete command."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to create the output.txt file and write the phrases into it. After
      that, I can use the task_complete command to indicate that the task is complete.\",\n        \"reasoning\":
      \"The instructions require me to write the phrases into a file, so I need to
      use the write_to_file command. Once the file is created and the phrases are
      written, I can use the task_complete command to indicate that the task is complete.\",\n        \"plan\":
      \"- Use the write_to_file command to create the output.txt file and write the
      phrases into it\\n- Use the task_complete command to indicate that the task
      is complete\",\n        \"criticism\": \"I need to ensure that the file is created
      and the phrases are written accurately.\",\n        \"speak\": \"I will create
      the output.txt file and write the phrases into it using the write_to_file command.
      After that, I will use the task_complete command to indicate that the task is
      complete.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"The sneaky
      toaster stole my socks and ran away to Hawaii.\\n\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5322'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6yST4/TQAzF73wKy+dp1fQPRDnCAboHVCQ4EVRNJ24y28xMGDtsRZXvjrJJldLl
        BFw99u89v/EFbYEZmkqLcU09e/Nxt0zT9fHwUNjdp926eHzw5/dvP7jV9sdPVBgOj2RknJib4Jqa
        xAaPCk0kLVRglrxON2myTJapQhcKqjHDspHZar6ZSRsPYbZYLRJU2LIuCbMLNjG4RvYSTuQZsyRZ
        pwon+PSwWSmUILqeSqtF0ik0VbCGGLOvF3TEV3AMNWGGmtmyaC+9zeCFfL/CJfcAADlKFdqyEs4x
        g7E4PtBZ+mKOnysC0XwCyzAaIwUcYAueqAAJ0DKBjG37a0/f7LR/brC+sEZL36UFtqAdFMHTPEd1
        KxpJc/DWl5Oy9SyxNX0WDJG+tzYSOPoLVfnDHvcGmlr7QXsGX/4df0c30Yo1lt0gMeVHntt4wxly
        gGOIA3K6h56ujWmjfmmeG9KnK/rJ1vV/SmjQ6NT1Zsb5FyfjtaNB/je9O5c6lvfXdvv5A+DdOFvA
        U5+ZL6Gpombi3nRopWllLmeBo60nh88uR7O577BTeLTecrUf0JghS2hQofUFnTFbdN+6V78AAAD/
        /wMAMtpjDAcEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d198a472b8b13f3-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:09:00 GMT
      Function-Execution-Id:
      - afqworech7nq
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12786'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 5d9d487e022a516e2d426045df1673d5;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85954'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.696s
      X-Request-Id:
      - d4403e9536f736db31de16ae3538a6c4
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"The sneaky
      toaster stole my socks and ran away to Hawaii. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '299'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOy0rEQBAA737F0OfJkuzLODcRURFUPOhBZOmdtMm4yfQw3UHdJf8uCz6uBVXU
        AUIDDnyH6ofUF6d3D/P7/eUjp/Pqovt6upJyDGV7c1vvz57BAm/fyeuPMfM8pJ40cAQLPhMqNeCq
        db2qq3m1XFoYuKEeHLRJi8VsVeiYt1yUi7ICC6NgS+AOkDIPSTfKO4oCbllb+E//4WphQVmx/yPr
        arLgOw6eBNzLAQaS32bmnsABigRRjHo85KgUj/dounHgzKMYUVQaKKrBLY9q0CijKGUjStiH2Bph
        vxODsTEkHtMRKZtr/MAQZjBZeAsxSLfJhMIRHIhyAgshNvQJrpxep5NvAAAA//8DAMY2LHVpAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d198aaf88fb1080-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:09:06 GMT
      Function-Execution-Id:
      - afqw3t99hxwm
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1500'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - be0a6e8b25c94c694425cc9553c58276;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89454'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 364ms
      X-Request-Id:
      - a48fe48645009b4f9a7ab5ef63c2d305
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The sneaky toaster stole my socks and ran away to Hawaii. "],
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '137'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        x2ZMq//+/B/r2/7zH/8PAAD//wMA3ImjIOMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d198ac2db3210a5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:09:08 GMT
      Function-Execution-Id:
      - 8tofdwqbtzlt
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '505'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - a70adda84322902a71207e5358f297a3;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - d06e288ea267a97d6767e6c9d8e24755
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a humorous statement about a toaster stealing socks and escaping
      to Hawaii.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '152'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d198acecae7226e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 03 Jun 2023 17:09:09 GMT
      Function-Execution-Id:
      - afqwfiqwaj99
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '220'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3742a3458e39b2eacd92ee12bb62e635
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 6c3a8d802f1ac0f486e1f11c6d672a57
    status:
      code: 200
      message: OK
version: 1
