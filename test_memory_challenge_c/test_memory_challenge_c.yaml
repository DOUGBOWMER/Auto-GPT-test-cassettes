interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSTWvbQBCG7/0Vw5wlI9v4o7q1h0JKoQSaS6ti1quRtPVqV90ZNXaM/ntRZDlF
        DoFe3/l4n/k4o8kxRV0p0XVj482Xz8ni46cntznc6/v2a/L9oXhvT8vFSv8xGKHf/yItl4qZ9nVj
        SYx3GKEOpIRyTOfr7Wo5Xyw22whrn5PFFMtG4uVsFUsb9j5OlskcI2xZlYTpGZvg60Z24g/kGNPN
        MonwpfdVn6/WEYoXZa/SdrvuItSVN5oY0x9nrInHtsFbwhQVs2FRTnpI74RcP8A5cwAAGUrl27IS
        zjCFi3gJ0FF6McM74Mq3NgcWFQT2JwikcuNKkIrAOJbQ6h6Vd/OZHAUKYwlaHjP67N2zpn1dK5fP
        Moz+tQqk2DvjysHvW0VQmMACLNSAYRAPrcsp9HPkN67Qi4+Vkj410O/WBMrBF1DT1Kmxyg0mMTww
        vY7X2/XiW+NlmYvhg1P29ESvA+UkFGrjhrCj4zAOT4h0MGK04XrctSN6JiDHbeiLlcAdFK21pzeX
        sKfCB4ImeE00XMdPrKfb4IbUYfR9NNb+14VnGQ7Numh8pssCb37JqZoGn+uyJygqlNMXHAJ97kv5
        LcoI8Qxy4clch12EhXGGq93wXZgii28wQuNyOmKadD+7d38BAAD//wMAs2q01AEEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9deec0fc7e15b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:07 GMT
      Function-Execution-Id:
      - s47ojlhkpzr8
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8628'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - a89681f4ca5c9a03ba462a11cefc013b
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - 69c7f7eab1d6b279bcf364d5110f32db
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2447'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SP0WoCMRRE3/sV4T5nZbN2q+YHCkWhLUIfSpGYXN242dx0c1cF2X8vUlvfBmbm
        MHMB70CDbQzbLoVitnwpn9u32fp7tVq/Lo7Hg/s4LGt3Uqf5O0ig7QEt3xoTS10KyJ4iSLA9GkYH
        Wj3N66mqqkUloSOHATTsExfTSV3w0G+pKKelAglDNnsEfYHUU5d4w9RizKDV46KUcIf/G5WSwMQm
        3KO1UqME25C3mEF/XqDD/MftKSBoMDn7zCbydSVFxnh9YASb3Aomceo9ozAiJ7R+561ITW8yCh+Z
        hBE7H1BYEwI6QQOngSd8ZmGiE9xgFJ3p26v65ZksbstxAqOEnY8+N5seTaYIGjJTAgk+OjyDLsev
        8eEHAAD//wMACg8X9YUBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9df435c5903fc-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:14 GMT
      Function-Execution-Id:
      - gppwk5npolib
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1705'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - af278ed2b9ee7f2ef6dfa4e400538f05;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88917'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 722ms
      X-Request-Id:
      - 8dd096b43fa1c11d7bf21289003dcb40
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2285'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9df525ae4e14b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:14 GMT
      Function-Execution-Id:
      - gppwi6itpugx
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '42'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - ae9838ab02d1975c795e64abbc316665
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 617ccf0af4523a614308e65eba8d0f51
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task to write a specific phrase into a file called output.txt
      and then mark the task as complete.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '176'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        DFTo4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9df580a661041-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:15 GMT
      Function-Execution-Id:
      - gppwx44mf209
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '118'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c752b0d7f4c71abd4dbee502ee895446
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 923f15d29bdfc1423c2fb4b78203f6cb
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6545'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5STS2/TQBDH73yK0ZydKA+lTXxEIFRULoicMIo264m9dD273R0rraJ8d+RXQkIp
        9DrP338eBzQ5pqhLJbrydnR7/3lyf/+82IUvn/j5w3r3cTm37x/XN/Xd+ism6LY/SUufMdau8pbE
        OMYEdSAllGM6vVku5tPZbHWbYOVysphi4WU0Hy9GUoetG03mkykmWEdVEKYH9MFVXjbiHogjprP5
        apngufjJMW1KihNlz7GL1eKYoC6d0RQx/X7AiuJQODhLmKKK0URRLA2mYyFuJBwyBgDIUEpXF6XE
        DFPojb2DnqQxZngHTJSDONgHIwRSEvgyqEgRDItrDa4WX8tYngR2xhLU0XDRetqkjbhNa9euqhTn
        SeNiqGNXTlR82PSiTzFNx5NtiBpnmPyOGUhFx4aLjvVbSWA4Sqh1M70IgR5rEwgqekWA6pjbng3W
        P7t6q7hrOIJ1r+FFnW+bWpbxud7/z+QKTgcjRptYXa+PONahSVNygaNCRy+t9BBIi33++2q3tHOB
        BoxhzS+NKXpSDwPF3lj7lgt6dRtdl2MynHE/nj+umFVFHcDFeq44VSiuH6BzNLHnEmfCi/zrf2lu
        0NfBWwKy5EvFArliTTk4BgVBGd66PezLRiapdoQKRGk3zjIexLUCe50ZH/GY4M6wieWmu3lMMYrz
        mKDhnJ4wnRx/HN/9AgAA//8DAEuQQ43VBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9df632d9210d5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:29 GMT
      Function-Execution-Id:
      - gppwiymm55ie
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12088'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 448323e568971596280be4884db019fc
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86898'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.068s
      X-Request-Id:
      - c1dc495c48e456d4ee243da6406a9586
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\":
      {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=\"Command read_file
      returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\\n\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3029'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2SRQW/bMAyF7/sVBM+OEddoE/g4YEAatD3tUsxDQMtMrFUWBYlu0gX574OMZCuw
        66Pe4/eoM9oeGzQDqRmDW6yetsuuellr/bp53pjw7bXbfN2mrdj3j99YoHS/2OjVURoZg2O14rFA
        E5mUe2yqh/V9Xd3VVV3gKD07bPAQdFGX9wudYieLZb2ssMAp0YGxOWOIMgbdqbyxTzlgeVfgv/C/
        g9VDgSpK7tPT1fpSoBnEGk7Y/DjjyOmWG8UxNkgp2aTkNVOKV/a5wSMcKcGVuoRHiGzYvnMPBEbG
        kXwPKhCZsrK3jsGQc9xDi9YnjZPJcGlXlXrSFiEbrEJknaKfY5z4AySN1h9A9qB80hK+D3zTMgxZ
        n4AgDJESQ4t5HKYYHAM7DgN5hZ684R7EA0Ek6zs5wnHIREyagwiUjJQtwvMHOFJOCjTjzSVV4Bit
        MpBzoHnBvC3BPso4C1cg61X+KyuThkk/ldSBPUyJZ2eLSultd/0tbvF2vBIvBe6tt2nYRaYkHhtM
        KgELtL7nEzbLy8/Llz8AAAD//wMATgQzIYMCAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9dfc7d84ee168-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:38 GMT
      Function-Execution-Id:
      - gppw6rruu5be
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5017'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - af847a5d9e2f86b84ded1367e5225bf6;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89263'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 490ms
      X-Request-Id:
      - 27d168b5181123f08dc5e08544c38d5a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I received a command
      to read a file called \"instructions_1.txt\" and it returned a long string of
      text. The string contains a phrase \"The purple elephant danced on a rainbow
      while eating a taco.\" My latest action was to write all the phrases from the
      string into a file called \"output.txt\" and then use the \"task_complete\"
      command."}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to write the phrases into
      the output.txt file using the write_to_file command, then use the task_complete
      command to complete the task.\",\n        \"reasoning\": \"The instructions
      require me to write the phrases into a file and then complete the task.\",\n        \"plan\":
      \"- Use the write_to_file command to write the phrases into the output.txt file\\n-
      Use the task_complete command to complete the task\",\n        \"criticism\":
      \"I need to ensure that the phrases are written correctly into the output.txt
      file before completing the task.\",\n        \"speak\": \"I will write the phrases
      into the output.txt file and then complete the task.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"The purple elephant danced on a rainbow
      while eating a taco.\\n\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command write_to_file returned: File written to successfully."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4918'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RSTW/TQBC98ytGc3YiO1EK9RGJA7QHQICAGkWb9djext51d2bToMj/HfkjTZvm
        wvXN7pv3MQc0OaaoKyW6aevZ29tPcbX8cC8PfPN1s3j/60bUl9+3P6qfxfUOI3Sbe9Iy/Zhr17Q1
        iXEWI9SelFCOaXL1brVMFsvkOsLG5VRjimUrs+V8NZPgN24WL+MEIwysSsL0gK13TStrcVuyjGkS
        XyURnshPg1UcoThR9QlaJEkXoa6c0cSY3h2wIT4Se1cTpqiYDYuy0st0Vsj2Fg6ZBQDIUCoXyko4
        wxQmcBrQXnoww49giXIQB4EJpCIQxdv1pJFAu6ZRdnjwhB1fzTOMnrN6UuysseVI/a0iMJbFB92b
        ZfD0EIwnaOgiHahCyMOjN2JsOcBt5RUTg7HiBsAFaYPMZS9QmJrOFbS1suPyGXz/bz9nZLoXog03
        50mR5eD7b0pO4g0/EebAQWtiLkJd/4UNFa537Xa9LWdh8mJpLxdz5JbU9rj00dT1hawCHzO66G+e
        4cjYRcdjmCavbsGqhsZlL5jONClfnp/R89JHgs9TXYV3zYvq18lQWaV2BBsiO5QsNETxutLTim4y
        kdkOuwgLYw1X63ElpsjiWozQ2Jz2mMbdn+7NPwAAAP//AwAPdfP9+AMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9dfedfc416326-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:48 GMT
      Function-Execution-Id:
      - gppw5xdnfyia
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8533'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b407e16af759f56ed072a4d17072dcba
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85970'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.686s
      X-Request-Id:
      - b622da2450035d7129d166cfa0eafa6e
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"The purple
      elephant danced on a rainbow while eating a taco. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '302'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOwUrDQBBA737FMudNSUyTlj2XIip4EDxUpEw302R1s7PsTlBb8u9S0Hp98B7v
        DK4DA3ZAsWP0xerxvpTdw6m5O72sl9Q8p12d2qf2e7vZlKCBD+9k5ddYWB6jJ3EcQINNhEIdmKpd
        N3V1W9eVhpE78mCgj1LUi6aQKR24KOuyAg1Txp7AnCEmHqPshT8oZDDLlYb/9BVXrQZhQX8lbT1r
        sAM7SxnM6xlGyn/NxJ7AAObssmCQyyEHoXC5R5WnlAi9ciP2pPioUMUpRU+KPMUBg6gOg3WhVxwU
        qoQuHPhTYegUoVw4KkHLC5g1HF1wedgnwswBDGThCBpc6OgLTDm/zTc/AAAA//8DABZRNrdqAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9e034c8f1810e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:52 GMT
      Function-Execution-Id:
      - s47oo7f9d1nc
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1240'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - fbd32104f98366f66dab907844895241;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89454'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 364ms
      X-Request-Id:
      - fc232c624594a2a89323840eb16a80a9
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The purple elephant danced on a rainbow while eating a taco.
      "], "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '140'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AAD//wMAzImYpeMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9e0432b61231d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:53 GMT
      Function-Execution-Id:
      - s47o2hou0yqb
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '130'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2d265750eb96a8dd174e7325744a6a09
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 3e469470408c99f7ecb51f025240ab42
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a surreal image of a purple elephant dancing on a rainbow and
      eating a taco.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '153'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        /17/1/fT/vNf/wcAAP//AwDZmH6I4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ce9e048ceec10fa-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 28 May 2023 22:18:54 GMT
      Function-Execution-Id:
      - s47olg3p83ee
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '26'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3721b1d16d80068aa5e0ea157c25d1da
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - f5722c9fa64b10df6d90c6e99c74d837
    status:
      code: 200
      message: OK
version: 1
