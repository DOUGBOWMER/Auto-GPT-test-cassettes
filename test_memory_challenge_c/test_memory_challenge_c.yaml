interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RSTY/TQAy98yssn5OqpV+7uYG0EiuVA7BcIKtqOnGSoRNPNOPQlqr/HU3TdqFF
        e+H6/Oz3nu09mgIz1LUS3bQ2nS++zaYPbx/eu6fF7PNqOPq0MYuP9x+6LxX9xATd6gdpOXUMtGta
        S2IcY4LakxIqMBvN7qbj+WQ0nSfYuIIsZli1ko4H01Q6v3LpcDwcYYJdUBVhtsfWu6aVpbg1ccBs
        Ph4m+DL7go9mkwTFibIX6O5+ckhQ185oCph932ND4TzWO0uYoQrBBFEs0aRjIY4B9jkDAOQoteuq
        WkKOGZzAU4G2EsEcHyHUrrMFBFFeYLUDT6owXIHUBIaD+E5Hq2E5GshWoDSWQBwUJOQbwwSbWgmo
        nhQrotYETFsZ5Jj8qepJBceGq1766RWBGEaZOK+Os3RM7ndguHS+UZH+t4eethUIQm24Fm6t4l4z
        ha+hZ8eYy5NW0ygu4sAIvhY8zzmFd6zs7hfd8F5zdGVIeyNGm9Ccj8BERwPEofOxWQk8gmqgdNa6
        zb/uAYaP2DGD0rrzSsjuIEahsjTaEIvdXe8itKTWZ9mNsfY/Ln+z9V7okJwf8LTam/9j1VDv4XKG
        K5vKV9dv2xci96X91ubZxNHIyU/OBzwkWBo2oV72b4gZBnEtJmi4oC1mw8Pz4c1vAAAA//8DAHdM
        Pvs1BAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc5a16fa61409-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:29:40 GMT
      Function-Execution-Id:
      - mswv6f9m1tm9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22953'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c6cd6d8eee99a4018363907f52b77f91
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - 67287b129922578392506d870b3f24b6
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2447'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPzWrDMBCE730KsWc52HF+Gt0K7aFQSnPIpaWEjbyJVctaIa1JSvC7l9C0uQ3M
        zMfMGVwDBmyLYvvoi+XL+2LT2ePmKOu2Xn9vytWjf306TJ8fwhto4N0XWbk2Jpb76EkcB9BgE6FQ
        A6Za3M/r5ay6n2rouSEPBg5RinoyL2RIOy7KuqxAw5DxQGDOEBP3UbbCHYUMppqtSg03+L8xrTQI
        C/pbdF5VowbbsrOUwXycoaf8x03sCQxgzi4LBrms5CAULg9QCeZOCatjckIKVY5k3d5ZFduEmZQL
        wgrV3nlSFr2nRvEgcZCJnERhaJS0FFSPqbuoXx5mdV1OExg17F1wud0mwswBDGThCBpcaOgEphw/
        x7sfAAAA//8DAIn9vwmFAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc642bba41d01-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:29:46 GMT
      Function-Execution-Id:
      - 943hu3hxc6z6
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3444'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 634fa9c609ea3cdc43ab1dfab472f2ac;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88917'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 722ms
      X-Request-Id:
      - c6ba74989c4e3da8cd3c240617f5c72b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This phrase is ''The purple elephant danced on a rainbow while eating a taco.''
      nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the phrases into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2285'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc65a9b2b110e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:29:46 GMT
      Function-Execution-Id:
      - 943hs79gr6rk
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '229'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1849e019c14e96aff3c0e404eeefe1a7
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - db5c6d3b832130238e8d14cad0a01641
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task to write a specific phrase into a file called output.txt
      and then mark the task as complete.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '176'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        DFTo4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc65d8e14223a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:29:47 GMT
      Function-Execution-Id:
      - 943h13gtrqgj
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '311'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 81c25920851564087891db65918c1242
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - ab6a43fbd0ea473fdb1cc61677e06c31
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions in the file accurately and
      efficiently.\",\n        \"speak\": \"I will start by reading the instructions_1.txt
      file to determine the next steps.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6597'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xTy27bQAy89ysInmXDThwn1R80KHpIHyhSFQazYqStV9ztLhW7MPzvhSw5jlWg
        zalXcjg7Q87u0JaYo6lJTRPc5Pr9/ZLWT08f75Zu8eFrZb6s1ZmL+d397eYWM/QPP9joMDE1vgmO
        1XrBDE1kUi4xny9vri6vF/ObmwwbX7LDHKugk8vp1UTb+OAns8vZHDNsE1WM+Q5D9E3Qlfo1S8L8
        YjFbZngif27M3y4zVK/kTtjl7GKfoam9NZww/7bDhtOROHrHmCOlZJOSaCfTi7J0FnaFAAAUqLVv
        q1pTgTkMxaHBW+2KBb4DYS5BPWyiVQatGUIdKXECK+oPBd9qaHWqW4VH6xhIyq4u0KZ+QimtV4Mv
        BuOb5gDx8Fw7oqYFZi+VRKbkxUrVy/lUM1hJGlvTLShB5J+tjQwN/0UjjWT989XgSPoHJ/B58HDg
        XqlfHbheeHj9YopCTnyv38lInIlWrbGpGV+IJbWxGyM9k0OxV68sQMa0kZTdr2EdA3Z8QptgyPV4
        NykwrY9Pb6xz/y8ZvYx9dszvAP8jvkIN9wrPjjYyQrEaJ79vdNgTxcnC2fz4o3TJDG0MjoEdh5pE
        oSQxXIIXIIhk5cFvYFN3e2BSKxUQKBk/LQo5mjsYHHwWssd9ho9WbKpX/U/AHJP6gBlaKXmL+Wz/
        ff/mNwAAAP//AwBxyhJCzgQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc666483a1124-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:30:08 GMT
      Function-Execution-Id:
      - 943htjswuar1
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19455'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f31c6e39b65ecb0a3b44f025a0a47a41
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85222'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 3.184s
      X-Request-Id:
      - d14856ee3c8a6a02851b8dd7b2d065ef
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\":
      {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=\"Command read_file
      returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nThis
      phrase is ''The purple elephant danced on a rainbow while eating a taco.''\\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nWrite
      all the phrases into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\\n\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3029'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2SRT2/bMAzFvwrBs2PESZu0vuU0FBh2GNbDNgMBIzOWVpkyJDrOFvS7D+rs/cGu
        5HtPv0fd0LVYo7Gkph/8av/+y+568e6Ded5PP0bf6+Hd59PH5/Nhs7vDAsPpGxudHaUJ/eBZXRAs
        0EQm5Rbravdwv93fbaqqwD607LHGbtDVtrxf6RhPYbXerisscEzUMdY3HGLoBz1qeGFJOWC9KfBP
        +O/Fw2OBGpT8X9LH6rVAY4MznLD+esOe05Ibg2eskVJySUk0UwZRltzgCSZKMFOX8ASRDbsLt0Bg
        Qt+TtKABIlOenJ1nMOQ9t9Cgk6RxNBkuHatSr9ogZINTiKxjlLcYH6SDpNFJB+EMylct4ZPlZZZh
        yEkCgsFGSgwN5vUwxsEzsOfBkii0JIZbCAIEkZycwgSTzURMmoMIlEwoG4RfrdSyQOcuLP+WmaJT
        BvI+K+Y3EzjR8F/FMOow6lxtss5YsJRAgsKJWZbDwXfWEg5n5QjLj0kHal0CpfRSzETLxfiNY0z8
        RtBg1hxnIze4wJb4WuDZiUv2GJlSEKwxaRiwQCctX/GnrAxqY2u5AAAAAP//AwBUnY4mwAIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc6f7e9c92ad6-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:30:25 GMT
      Function-Execution-Id:
      - 943hk68kyb7t
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '13205'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e0d6ea4b2cf7a8380909f0d3cff53172
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89263'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 490ms
      X-Request-Id:
      - ee63421476f6ea7ccde739811a594cde
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I received a command
      to read a file called \"instructions_1.txt\" and it returned a long string of
      text. The string contains a phrase \"The purple elephant danced on a rainbow
      while eating a taco.\" I was then given a command to write all the phrases into
      a file called \"output.txt\" which has not been created yet. After completing
      this task, I was instructed to use the \"task_complete\" command."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to write the phrases into the output.txt file
      and then use the task_complete command to complete the task.\",\n        \"reasoning\":
      \"The instructions require me to write the phrases into a file and then complete
      the task.\",\n        \"plan\": \"- Use the write_to_file command to write the
      phrases into the output.txt file\\n- Use the task_complete command to complete
      the task\",\n        \"criticism\": \"I need to ensure that the phrases are
      written accurately and that the output.txt file is created.\",\n        \"speak\":
      \"I will write the phrases into the output.txt file and then use the task_complete
      command to complete the task.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"output.txt\",\n            \"text\":
      \"The purple elephant danced on a rainbow while eating a taco.\\n\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4972'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSS2/TQBC+8ytWc15HTkxw6yO3VohTEVIxijbrqb1kH2ZnLBJF/u/ItU2CEUhU
        vc7M95qZM5gKCtCNYu1am+QfHvP3Cpu7E25tfvv4+XD/8YaPD2l67/YgIey/oeYJsdLBtRbZBA8S
        dETFWEGxfnezzfK3m81WggsVWiigbjnJVtuEu7gPSZqla5DQkaoRijO0MbiWdxwO6AmKdZpnEi7k
        l0Z2K4EDK3spbdabXoJugtFIUHw5g0OaiWOwCAUoIkOsPA82g2f0Q4Rz6YUQogRuQlc3TCUUYipO
        DTzyUCzhTnjESnAQHaHgBgUrOuwmjyh0cE7554FftXlqVYK8Zo2oKHjj65H6oUFhPHHs9BCWRMTv
        nYkoHL6OXmuVH6US8em/2RZkOho22pBb7gU9dXGAKf6HgqEhUCV0iBE125N41r0GDTMzrhLUaY1E
        T521p2UwalEdZh8/jLUvW9ZI2cv5HabxP77BK4ej2m/0C1Mq1stHuj77dPMh519DXpD95K30PfQS
        now31OxGJiiAOLQgwfgKj1Ck/df+zU8AAAD//wMAQGfEbNEDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc74eccae6386-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:30:38 GMT
      Function-Execution-Id:
      - 943hxhfxqccz
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12785'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 47e4e4dfbb3df04ae24c16864c441b7c;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85969'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.687s
      X-Request-Id:
      - fb91ceff4a7eb3c0b2b2238239d6936d
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"The purple
      elephant danced on a rainbow while eating a taco. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '302'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOwUrDQBBA737FMudNaZq2sXtWTyIo4qEiZbKZJttudpbdSSuU/LsUtF4fvMe7
        gGvBgO1R7BB9UT9v67fV6enw8rHd9A/n12P/+N6GU7PYYg8auDmQlV9jZnmInsRxAA02EQq1YMr1
        /aqql4tlqWHgljwY6KIU1WxVyJgaLubVvAQNY8aOwFwgJh6i7ISPFDKYZa3hP33D5VqDsKC/kXU1
        abA9O0sZzOcFBsp/zcSewADm7LJgkOshB6FwvUeVx5QIvXIDdqR4r1DFMUVPijzFHoOoFoN1oVMc
        FKqELjR8VhhaRShXjkrQ8gwmDXsXXO53iTBzAANZOIIGF1r6BjOfvqa7HwAAAP//AwAoO+peagEA
        AA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc7adc8d722df-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:30:42 GMT
      Function-Execution-Id:
      - 943hsniv8pyi
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1891'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e79b4028cd3a334f1f54e43a539bcf64;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89454'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 364ms
      X-Request-Id:
      - 95841e83a6baba7b79d5bb1cedb8cb6a
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The purple elephant danced on a rainbow while eating a taco.
      "], "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '140'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        /H/b//X92n/+6/8AAAD//wMA6S4aoOMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc7bc2c44e24a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:30:43 GMT
      Function-Execution-Id:
      - mswvchd2tequ
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '181'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 61e932c2ab755bf05473d3c965617f1a
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 117c133901a13adee101af551a200f30
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a surreal image of a purple elephant dancing on a rainbow and
      eating a taco.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '153'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cefc7c08bb0e10c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 29 May 2023 15:30:44 GMT
      Function-Execution-Id:
      - 943httzdtocz
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '313'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f5be3f8c177f24cee1b1714e53b7a66f
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 01c71e395d54f8c578bcdb716ca72c19
    status:
      code: 200
      message: OK
version: 1
